# docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=jobboard
      - POSTGRES_PASSWORD=jobboard
      - POSTGRES_DB=jobboard
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobboard"]
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@jamdungjobs.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  # Express API Server
  api:
    build:
      context: ..
      dockerfile: Dockerfile.api
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - DATABASE_URL=postgresql://jobboard:jobboard@postgres:5432/jobboard
      - JWT_SECRET=local_development_secret
      - NODE_ENV=development
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - api_node_modules:/app/node_modules
      - ../backend:/app:delegated
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend development server  
  frontend:
    build:
      context: ..
      dockerfile: local-dev/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ENV=development
      - WDS_SOCKET_PORT=0
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ../web-frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
      - ../web-frontend/public:/app/public
      - ../web-frontend/.env:/app/.env
    command: >
      sh -c "cd /app && 
             npm install && 
             npm start"
    depends_on:
      - api

volumes:
  api_node_modules:
  frontend_node_modules:
  postgres_data:
  uploads:
