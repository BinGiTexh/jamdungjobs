[{"filePath":"/app/src/App.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":53},{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":63},{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":47},{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":29,"column":1,"nodeType":"ImportDeclaration","endLine":29,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport CssBaseline from '@mui/material/CssBaseline';\n\n// Context\nimport { AuthProvider } from './context/AuthContext';\nimport { ThemeContextProvider } from './context/ThemeContext';\n\n// Components\nimport SimpleMobileNav from './components/navigation/SimpleMobileNav';\nimport HomePage from './components/home/HomePage';\nimport SmartJobDiscovery from './components/search/SmartJobDiscovery';\nimport LoginPage from './components/auth/LoginPage';\nimport Register from './components/Register';\nimport JobSearch from './components/JobSearch';\nimport ApplicationsPage from './pages/ApplicationsPage';\nimport JobApplyPage from './pages/JobApplyPage';\nimport JobDetailsPage from './pages/JobDetailsPage';\nimport EmployerApplicationsPage from './pages/EmployerApplicationsPage';\nimport EmployerPostJobPage from './pages/EmployerPostJobPageNew';\nimport ProfilePage from './components/profile/ProfilePage';\nimport ResumeBuilderPage from './components/candidate/ResumeBuilderPage';\nimport AboutUs from './components/AboutUs';\nimport DashboardRedirect from './components/DashboardRedirect';\nimport FeatureDemo from './pages/FeatureDemo';\n\n// Utils\nimport { logDev } from './utils/logger';\n\n// Protected Route Component\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// Simple Register Page wrapper\nconst RegisterPage = () => {\n  return <Register />;\n};\n\n// Simple Job Search wrapper\nconst JobSearchPage = () => {\n  return <JobSearch />;\n};\n\nfunction App() {\n  useEffect(() => {\n    logDev('info', 'JamDung Jobs App initialized', {\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    });\n  }, []);\n\n  return (\n    <AuthProvider>\n      <ThemeContextProvider>\n        <CssBaseline />\n        <Helmet>\n          <title>JamDung Jobs - Find Your Dream Job in Jamaica</title>\n          <meta name=\"description\" content=\"Jamaica's premier job search platform. Connect with top employers and find your dream job across the island.\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n        </Helmet>\n        \n        <Router>\n          <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n            <SimpleMobileNav />\n            \n            <main style={{ flex: 1 }}>\n              <Routes>\n                {/* Public Routes */}\n                <Route path=\"/\" element={<HomePage />} />\n                <Route path=\"/search\" element={\n                  <SmartJobDiscovery \n                    onSearch={(criteria) => console.warn('🔍 Search:', criteria)}\n                    onClearFilters={() => console.warn('🧹 Filters cleared')}\n                  />\n                } />\n                <Route path=\"/login\" element={<LoginPage />} />\n                <Route path=\"/register\" element={<RegisterPage />} />\n                <Route path=\"/jobs\" element={<JobSearchPage />} />\n                <Route path=\"/jobs/:jobId\" element={<JobDetailsPage />} />\n                <Route path=\"/jobs/:jobId/apply\" element={<JobApplyPage />} />\n                <Route path=\"/about\" element={<AboutUs />} />\n                <Route path=\"/feature-demo\" element={<FeatureDemo />} />\n\n                {/* Protected Routes */}\n                <Route\n                  path=\"/dashboard\"\n                  element={\n                    <ProtectedRoute>\n                      <DashboardRedirect />\n                    </ProtectedRoute>\n                  }\n                />\n\n                {/* Employer Routes */}\n                <Route\n                  path=\"/employer/dashboard\"\n                  element={\n                    <ProtectedRoute requiredRole=\"EMPLOYER\">\n                      <DashboardRedirect />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/employer/jobs\"\n                  element={\n                    <ProtectedRoute requiredRole=\"EMPLOYER\">\n                      <EmployerPostJobPage />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/employer/applications\"\n                  element={\n                    <ProtectedRoute requiredRole=\"EMPLOYER\">\n                      <EmployerApplicationsPage />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/employer/profile\"\n                  element={\n                    <ProtectedRoute requiredRole=\"EMPLOYER\">\n                      <ProfilePage />\n                    </ProtectedRoute>\n                  }\n                />\n\n                {/* Candidate Routes */}\n                <Route\n                  path=\"/candidate/dashboard\"\n                  element={\n                    <ProtectedRoute requiredRole=\"CANDIDATE\">\n                      <DashboardRedirect />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/applications\"\n                  element={\n                    <ProtectedRoute requiredRole=\"CANDIDATE\">\n                      <ApplicationsPage />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/profile\"\n                  element={\n                    <ProtectedRoute requiredRole=\"CANDIDATE\">\n                      <ProfilePage />\n                    </ProtectedRoute>\n                  }\n                />\n                <Route\n                  path=\"/resume-builder\"\n                  element={\n                    <ProtectedRoute requiredRole=\"CANDIDATE\">\n                      <ResumeBuilderPage />\n                    </ProtectedRoute>\n                  }\n                />\n\n                {/* Catch all route */}\n                <Route path=\"*\" element={<HomePage />} />\n              </Routes>\n            </main>\n          </div>\n        </Router>\n      </ThemeContextProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/AboutUs.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { \n  Box, \n  Typography, \n  Container, \n  Grid, \n  Paper, \n  styled, \n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport WorkIcon from '@mui/icons-material/Work';\nimport PeopleIcon from '@mui/icons-material/People';\nimport SchoolIcon from '@mui/icons-material/School';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport DevicesIcon from '@mui/icons-material/Devices';\n\n// Styled components for Jamaican theme\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  position: 'relative',\n  zIndex: 2,\n  padding: theme.spacing(4),\n  [theme.breakpoints.up('md')]: {\n    maxWidth: '1100px'\n  },\n  minHeight: '100vh',\n  display: 'flex',\n  flexDirection: 'column'\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(4),\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  position: 'relative',\n  overflow: 'hidden',\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  backdropFilter: 'blur(10px)',\n  transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-4px)',\n    boxShadow: '0 8px 24px rgba(0,0,0,0.3)'\n  },\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '4px',\n    background: 'linear-gradient(90deg, #FFD700, #007E1B, #FFD700)'\n  }\n}));\n\n// Background wrapper\nconst PageWrapper = styled(Box)(({ theme }) => ({\n  minHeight: '100vh',\n  backgroundColor: '#0A0A0A',\n  position: 'relative',\n  overflow: 'hidden',\n  paddingBottom: theme.spacing(4)\n}));\n\n// Background image overlay\nconst BackgroundOverlay = styled(Box)({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  width: '100vw',\n  height: '100vh',\n  backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  opacity: 0.3,\n  zIndex: 1\n});\n\nconst GoldText = styled(Typography)(({ theme }) => ({\n  color: '#FFD700',\n  fontWeight: 600\n}));\n\nconst AboutUs = () => {\n  return (\n    <PageWrapper>\n      <BackgroundOverlay />\n      <StyledContainer>\n        <StyledPaper>\n          <Box sx={{ position: 'relative', zIndex: 2 }}>\n            <GoldText variant=\"h3\" gutterBottom align=\"center\" sx={{ mb: 4 }}>\n              About BingiTech & JamDung Jobs\n            </GoldText>\n            \n            <Box sx={{ mb: 6 }}>\n              <Typography variant=\"h5\" sx={{ color: 'white', mb: 2, fontWeight: 500 }}>\n                Our Mission\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 3, fontSize: '1.1rem', lineHeight: 1.6 }}>\n                <strong style={{ color: '#FFD700' }}>BingiTech</strong> is committed to creating technology solutions that are truly Jamaican at their core. \n                Through <strong style={{ color: '#FFD700' }}>JamDung Jobs</strong>, we're building more than just a job board – we're creating a platform that celebrates \n                our culture, empowers our people, and strengthens our economy.\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 3, fontSize: '1.1rem', lineHeight: 1.6 }}>\n                Our mission is to connect Jamaican talent with local opportunities through technology that understands and celebrates our unique identity. \n                We believe that by building solutions specifically designed for Jamaica, we can create a more efficient job market, reduce unemployment, \n                and help businesses find the qualified local talent they need to thrive.\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)', fontSize: '1.1rem', lineHeight: 1.6 }}>\n                JamDung Jobs is more than a name – it's a statement that this platform is built by Jamaicans, for Jamaicans, with our unique needs and culture at the forefront.\n              </Typography>\n            </Box>\n            \n            <Divider sx={{ borderColor: 'rgba(255, 215, 0, 0.3)', my: 4 }} />\n            \n            <Box sx={{ mb: 6 }}>\n              <Typography variant=\"h5\" sx={{ color: 'white', mb: 3, fontWeight: 500 }}>\n                What Makes Us Different\n              </Typography>\n              \n              <List>\n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <LocationOnIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Jamaica-Specific Features</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        From our parish-based location services to our understanding of local industries, every aspect of JamDung Jobs is built with Jamaica in mind.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n                \n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <WorkIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Local Economic Focus</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        We're committed to strengthening Jamaica's economy by making it easier for local businesses to connect with qualified Jamaican talent.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n                \n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <PeopleIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Community-Centered Approach</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        We see employers and job seekers as part of the same community, working together to build a stronger Jamaica.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n                \n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <SchoolIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Skills Development</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        Our skills matching system helps identify gaps in the Jamaican workforce, guiding both job seekers and educational initiatives.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n                \n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <FlagIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Cultural Pride</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        We proudly incorporate Jamaican cultural elements throughout our platform, celebrating our national identity in every aspect of our design.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n                \n                <ListItem sx={{ py: 2 }}>\n                  <ListItemIcon>\n                    <DevicesIcon sx={{ color: '#FFD700', fontSize: 30 }} />\n                  </ListItemIcon>\n                  <ListItemText \n                    primary={<Typography variant=\"h6\" sx={{ color: '#FFD700' }}>Digital Inclusion</Typography>}\n                    secondary={\n                      <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                        We're making employment opportunities accessible to all Jamaicans through a user-friendly platform that works well on various devices.\n                      </Typography>\n                    }\n                  />\n                </ListItem>\n              </List>\n            </Box>\n            \n            <Divider sx={{ borderColor: 'rgba(255, 215, 0, 0.3)', my: 4 }} />\n            \n            <Box>\n              <Typography variant=\"h5\" sx={{ color: 'white', mb: 3, fontWeight: 500 }}>\n                Our Vision for Jamaica\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)', mb: 3, fontSize: '1.1rem', lineHeight: 1.6 }}>\n                We envision a Jamaica where technology serves our unique needs, where local talent meets local opportunity, and where our digital \n                solutions reflect our cultural identity. JamDung Jobs is just the beginning of BingiTech's commitment to creating technology that is \n                not imported from elsewhere but truly designed for and by Jamaicans.\n              </Typography>\n              <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.9)', fontSize: '1.1rem', lineHeight: 1.6 }}>\n                By choosing JamDung Jobs, you're not just using a job board – you're supporting a vision of Jamaica where our technological solutions \n                are as unique and vibrant as our culture. Together, we're building more than careers; we're building a stronger, more connected Jamaica.\n              </Typography>\n            </Box>\n          </Box>\n        </StyledPaper>\n      </StyledContainer>\n    </PageWrapper>\n  );\n};\n\nexport default AboutUs;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/DashboardRedirect.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/FindJobsModal.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FaFilter' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":2,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":47,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":47,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'getJobStatusBadge' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":184,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":184,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchJobs'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [fetchJobs, isOpen, page, searchParams]","fix":{"range":[6962,6990],"text":"[fetchJobs, isOpen, page, searchParams]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":248,"column":15,"nodeType":"CallExpression","messageId":"unexpected","endLine":248,"endColumn":59}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { FaTimes, FaFilter, FaRegBookmark, FaBookmark, FaClock, FaBuilding, FaMapMarkerAlt, FaBriefcase } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { logDev, logError, sanitizeForLogging } from '../utils/logging';\nimport { LocationAutocomplete } from './common/LocationAutocomplete';\nimport { JobTitleAutocomplete } from './common/JobTitleAutocomplete';\nimport { SalaryRangeAutocomplete } from './common/SalaryRangeAutocomplete';\nimport { CompanyAutocomplete } from './common/CompanyAutocomplete';\nimport { SkillsAutocomplete } from './common/SkillsAutocomplete';\n\nconst jobTypes = ['Full-time', 'Part-time', 'Contract', 'Internship', 'Remote'];\nconst sortOptions = [\n  { value: 'latest', label: 'Latest' },\n  { value: 'salary', label: 'Salary' },\n  { value: 'relevance', label: 'Relevance' }\n];\n\nconst QuickApplyModal = ({ job, onClose, onSuccess }) => {\n  const [coverLetter, setCoverLetter] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSubmitting(true);\n    try {\n      const response = await fetch(`http://localhost:5000/api/jobs/${job.id}/apply`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('jamdung_auth_token')}`\n        },\n        body: JSON.stringify({ coverLetter })\n      });\n      \n      if (response.ok) {\n        onSuccess();\n      } else {\n        const data = await response.json();\n        throw new Error(data.message);\n      }\n    } catch (error) {\n      logError('Failed to submit application', { \n        jobId: sanitizeForLogging(job.id),\n        error: sanitizeForLogging(error)\n      });\n      alert(error.message || 'Failed to submit application');\n    } finally {\n      setSubmitting(false);\n      onClose();\n    }\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]\"\n      onClick={(e) => e.stopPropagation()}\n    >\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md relative\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">Quick Apply - {job.title}</h3>\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n            <FaTimes />\n          </button>\n        </div>\n        <form onSubmit={handleSubmit}>\n          <textarea\n            value={coverLetter}\n            onChange={(e) => setCoverLetter(e.target.value)}\n            placeholder=\"Why are you a good fit for this role? (Optional)\"\n            className=\"w-full p-3 border rounded-lg mb-4 min-h-[120px]\"\n          />\n          <div className=\"flex justify-end\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"mr-2 px-4 py-2 text-gray-600 hover:text-gray-800\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={submitting}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {submitting ? 'Submitting...' : 'Submit Application'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport const FindJobsModal = ({ isOpen, onClose }) => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [searchParams, setSearchParams] = useState({\n    search: '',\n    location: '',\n    jobType: '',\n    minSalary: '',\n    maxSalary: '',\n    remote: false,\n    sort: 'latest'\n  });\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [savedJobs, setSavedJobs] = useState(new Set());\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [showQuickApply, setShowQuickApply] = useState(false);\n\n  const fetchJobs = async () => {\n    try {\n      setLoading(true);\n      const queryParams = new URLSearchParams({\n        ...searchParams,\n        page,\n        limit: 10\n      });\n\n      const response = await fetch(`http://localhost:5000/api/jobs?${queryParams}`);\n      const data = await response.json();\n\n      setJobs(data.jobs);\n      setTotalPages(data.pagination.pages);\n\n      // Fetch saved jobs if user is logged in\n      if (user?.role === 'candidate') {\n        const savedResponse = await fetch('http://localhost:5000/api/users/me', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('jamdung_auth_token')}`\n          }\n        });\n        const userData = await savedResponse.json();\n        setSavedJobs(new Set(userData.savedJobs || []));\n      }\n    } catch (error) {\n      logError('Error fetching jobs', { \n        searchParams: sanitizeForLogging(searchParams),\n        page: sanitizeForLogging(page),\n        error: sanitizeForLogging(error)\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSaveJob = async (jobId) => {\n    if (!user) {\n      navigate('/login');\n      return;\n    }\n\n    try {\n      const action = savedJobs.has(jobId) ? 'unsave' : 'save';\n      const response = await fetch(`http://localhost:5000/api/jobs/${jobId}/${action}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('jamdung_auth_token')}`\n        }\n      });\n      \n      if (response.ok) {\n        setSavedJobs(prev => {\n          const next = new Set(prev);\n          if (action === 'save') next.add(jobId);\n          else next.delete(jobId);\n          return next;\n        });\n      }\n    } catch (error) {\n      logError('Error saving job', { \n        jobId: sanitizeForLogging(jobId),\n        userId: sanitizeForLogging(user?.id),\n        action: sanitizeForLogging(savedJobs.has(jobId) ? 'unsave' : 'save'),\n        error: sanitizeForLogging(error)\n      });\n    }\n  };\n\n  const getJobStatusBadge = (job) => {\n    const deadline = new Date(job.applicationDeadline);\n    const now = new Date();\n    const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24));\n\n    if (daysLeft < 0) return { text: 'Expired', color: 'red' };\n    if (daysLeft <= 3) return { text: 'Closing Soon', color: 'orange' };\n    if (job.featured) return { text: 'Featured', color: 'yellow' };\n    if (job.remote) return { text: 'Remote', color: 'green' };\n    return null;\n  };\n\n  const handleQuickApply = (job) => {\n    if (!user) {\n      navigate('/login');\n      return;\n    }\n    setSelectedJob(job);\n    setShowQuickApply(true);\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      logDev('Opening FindJobsModal', { \n        searchParams: sanitizeForLogging(searchParams),\n        page: sanitizeForLogging(page)\n      });\n      fetchJobs();\n    }\n  }, [isOpen, page, searchParams]);\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    logDev('Searching for jobs', { \n      searchParams: sanitizeForLogging(searchParams)\n    });\n    setPage(1);\n    fetchJobs();\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setSearchParams(prev => ({ ...prev, [name]: value }));\n  };\n\n  const viewJobDetails = (jobId) => {\n    navigate(`/jobs/${jobId}`);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div \n        className=\"bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden relative\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {showQuickApply && selectedJob && (\n          <QuickApplyModal\n            job={selectedJob}\n            onClose={() => setShowQuickApply(false)}\n            onSuccess={() => {\n              setShowQuickApply(false);\n              alert('Application submitted successfully!');\n            }}\n          />\n        )}\n        {/* Header */}\n        <div className=\"p-4 border-b flex justify-between items-center\">\n          <h2 className=\"text-xl font-semibold\">Find Jobs</h2>\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n            <FaTimes />\n          </button>\n        </div>\n\n        {/* Search Form */}\n        <form onSubmit={handleSearch} className=\"p-4 bg-gray-50\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <JobTitleAutocomplete\n              value={searchParams.search}\n              onChange={(value) => handleInputChange({ target: { name: 'search', value } })}\n            />\n            <LocationAutocomplete\n              value={searchParams.location}\n              onChange={(value) => handleInputChange({ target: { name: 'location', value } })}\n            />\n            <CompanyAutocomplete\n              value={searchParams.company || ''}\n              onChange={(value) => handleInputChange({ target: { name: 'company', value } })}\n            />\n          </div>\n\n          {/* Advanced Filters */}\n          <div className=\"mt-4 grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <SalaryRangeAutocomplete\n              type=\"min\"\n              value={searchParams.minSalary}\n              onChange={(value) => handleInputChange({ target: { name: 'minSalary', value } })}\n            />\n            <SalaryRangeAutocomplete\n              type=\"max\"\n              value={searchParams.maxSalary}\n              onChange={(value) => handleInputChange({ target: { name: 'maxSalary', value } })}\n            />\n            <div className=\"relative\">\n              <select\n                name=\"jobType\"\n                value={searchParams.jobType}\n                onChange={handleInputChange}\n                className=\"w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none bg-white\"\n              >\n                <option value=\"\">All Job Types</option>\n                {jobTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"relative\">\n              <select\n                name=\"sort\"\n                value={searchParams.sort}\n                onChange={handleInputChange}\n                className=\"w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none bg-white\"\n              >\n                {sortOptions.map(option => (\n                  <option key={option.value} value={option.value}>{option.label}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"flex items-center cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  name=\"remote\"\n                  checked={searchParams.remote}\n                  onChange={(e) => handleInputChange({\n                    target: { name: 'remote', value: e.target.checked }\n                  })}\n                  className=\"mr-2\"\n                />\n                Remote Only\n              </label>\n            </div>\n          </div>\n          \n          {/* Skills Filter */}\n          <div className=\"mt-4\">\n            <SkillsAutocomplete\n              value={searchParams.currentSkill || ''}\n              onChange={(value) => {\n                if (value && !searchParams.skills?.includes(value)) {\n                  handleInputChange({\n                    target: {\n                      name: 'skills',\n                      value: [...(searchParams.skills || []), value]\n                    }\n                  });\n                }\n                handleInputChange({ target: { name: 'currentSkill', value: '' } });\n              }}\n              selectedSkills={searchParams.skills || []}\n            />\n            {searchParams.skills && searchParams.skills.length > 0 && (\n              <div className=\"mt-2 flex flex-wrap gap-2\">\n                {searchParams.skills.map(skill => (\n                  <span\n                    key={skill}\n                    className=\"inline-flex items-center px-3 py-1 rounded-full text-sm\n                      bg-blue-100 text-blue-800\"\n                  >\n                    {skill}\n                    <button\n                      onClick={() => handleInputChange({\n                        target: {\n                          name: 'skills',\n                          value: searchParams.skills.filter(s => s !== skill)\n                        }\n                      })}\n                      className=\"ml-2 text-blue-600 hover:text-blue-800\"\n                    >\n                      <FaTimes size={12} />\n                    </button>\n                  </span>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"mt-4 flex justify-end space-x-2\">\n            <button\n              type=\"button\"\n              onClick={() => setSearchParams({\n                search: '',\n                location: '',\n                jobType: '',\n                minSalary: '',\n                maxSalary: '',\n                remote: false,\n                sort: 'latest'\n              })}\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n            >\n              Clear Filters\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              Search Jobs\n            </button>\n          </div>\n        </form>\n\n        {/* Results */}\n        <div className=\"p-4 overflow-y-auto\" style={{ maxHeight: 'calc(90vh - 240px)' }}>\n          {loading ? (\n            <div className=\"flex justify-center items-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : jobs.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              No jobs found matching your criteria\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {jobs.map(job => (\n                <div\n                  key={job.id}\n                  className=\"border rounded-lg p-4 hover:shadow-md transition-shadow relative\"\n                >\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-blue-600 hover:text-blue-800 cursor-pointer\" onClick={() => viewJobDetails(job.id)}>\n                        {job.title}\n                      </h3>\n                      <div className=\"flex flex-wrap gap-2 mt-1\">\n                        {job.featured && (\n                          <span className=\"bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                            Featured\n                          </span>\n                        )}\n                        {job.remote && (\n                          <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                            Remote\n                          </span>\n                        )}\n                        {job.applicationDeadline && (\n                          <span className=\"flex items-center text-xs text-gray-500\">\n                            <FaClock className=\"mr-1\" />\n                            {new Date(job.applicationDeadline).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleSaveJob(job.id);\n                      }}\n                      className=\"text-gray-400 hover:text-blue-600 transition-colors\"\n                    >\n                      {savedJobs.has(job.id) ? <FaBookmark /> : <FaRegBookmark />}\n                    </button>\n                  </div>\n                  \n                  <div className=\"mt-2 text-sm text-gray-600\">\n                    <div className=\"flex items-center space-x-4 flex-wrap\">\n                      <span className=\"flex items-center\">\n                        <FaBuilding className=\"mr-1\" /> {job.companyName}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <FaMapMarkerAlt className=\"mr-1\" /> {job.location}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <FaBriefcase className=\"mr-1\" /> {job.jobType}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"mt-2 text-sm text-gray-500 line-clamp-2\">{job.description}</p>\n                  \n                  <div className=\"mt-3 flex justify-between items-center\">\n                    {job.salary && (\n                      <div className=\"text-sm text-green-600 font-medium\">\n                        {job.salary}\n                      </div>\n                    )}\n                    {user?.role === 'candidate' && (\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleQuickApply(job);\n                        }}\n                        className=\"px-4 py-1.5 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors\"\n                      >\n                        Quick Apply\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"p-4 border-t flex justify-center space-x-2\">\n            <button\n              onClick={() => setPage(p => Math.max(1, p - 1))}\n              disabled={page === 1}\n              className=\"px-4 py-2 border rounded-lg disabled:opacity-50 hover:bg-gray-50\"\n            >\n              Previous\n            </button>\n            <span className=\"px-4 py-2\">\n              Page {page} of {totalPages}\n            </span>\n            <button\n              onClick={() => setPage(p => Math.min(totalPages, p + 1))}\n              disabled={page === totalPages}\n              className=\"px-4 py-2 border rounded-lg disabled:opacity-50 hover:bg-gray-50\"\n            >\n              Next\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/JobSearch.js","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchJobs'. Either include it or remove the dependency array.","line":505,"column":6,"nodeType":"ArrayExpression","endLine":505,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [searchJobs]","fix":{"range":[16132,16134],"text":"[searchJobs]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/LandingPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/LoadingSpinner.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ProtectedRoute.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/Register.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'setMessage' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":50,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":149,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link, useLocation } from 'react-router-dom';\nimport {\n  Container,\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Paper,\n  FormControl,\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n  Alert,\n  CircularProgress,\n  Divider,\n  Fade\n} from '@mui/material';\nimport { useAuth } from '../context/AuthContext';\nimport { JamaicaLocationAutocomplete } from './common/JamaicaLocationAutocomplete';\nimport GoogleOAuthButton from './auth/GoogleOAuthButton';\n\nconst Register = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { register, registerWithGoogle } = useAuth();\n  \n  // Check if we have a role in the location state (e.g., coming from \"Post a Job\")\n  const defaultRole = location.state?.role || 'JOBSEEKER';\n  const redirectPath = location.state?.from || '/dashboard';\n  \n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: defaultRole,\n    // Company fields (only for employers)\n    companyName: '',\n    companyWebsite: '',\n    companyLocation: '',\n    companyDescription: ''\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  // Set a message if coming from another page\n  const [message, setMessage] = useState(location.state?.message || '');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleWebsiteBlur = () => {\n    if (formData.companyWebsite && !/^https?:\\/\\//i.test(formData.companyWebsite)) {\n      setFormData(prev => ({\n        ...prev,\n        companyWebsite: `https://${prev.companyWebsite}`\n      }));\n    }\n  };\n\n  const handleLocationSelect = (locationObj) => {\n    if (!locationObj) {\n      setFormData(prev => ({ ...prev, companyLocation: '' }));\n      return;\n    }\n    const locationString = `${locationObj.name || locationObj.mainText}, ${locationObj.parish}, Jamaica`;\n    setFormData(prev => ({ ...prev, companyLocation: locationString }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Remove confirmPassword before sending to API and map field names to backend expectations\n      const {\n        confirmPassword,\n        firstName,\n        lastName,\n        companyName,\n        companyWebsite,\n        companyLocation,\n        companyDescription,\n        ...rest\n      } = formData;\n\n      const registrationData = {\n        ...rest,\n        first_name: firstName,\n        last_name: lastName,\n        // Only include company fields for employers to avoid sending undefined\n        ...(formData.role === 'EMPLOYER' && {\n          company_name: companyName,\n          company_website: companyWebsite,\n          company_location: companyLocation,\n          company_description: companyDescription\n        })\n      };\n\n      await register(registrationData);\n      \n      // If we came from the employer job posting flow, redirect back there\n      navigate(redirectPath);\n    } catch (err) {\n      setError(err.message || 'Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSuccess = async (googleData) => {\n    try {\n      const user = await registerWithGoogle(\n        googleData.googleToken, \n        googleData.userInfo, \n        { role: formData.role }\n      );\n      \n      // Redirect based on role\n      const redirectTo = user.role === 'EMPLOYER' ? '/employer/dashboard' : '/candidate/dashboard';\n      navigate(redirectTo);\n    } catch (err) {\n      setError(err.message || 'Google registration failed');\n    }\n  };\n\n  const handleGoogleError = (error) => {\n    setError('Google registration failed. Please try again.');\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#0A0A0A',\n        position: 'relative',\n        overflow: 'hidden'\n      }}\n    >\n      {/* Background image with Jamaican styling */}\n      <Box\n        sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: 0.3,\n          zIndex: 1\n        }}\n      />\n      \n      <Container component=\"main\" maxWidth=\"md\" sx={{ \n        position: 'relative', \n        zIndex: 2,\n        py: 8\n      }}>\n        <Fade in={true} timeout={800}>\n          <Box\n            sx={{\n              mt: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center'\n            }}\n          >\n            <Typography \n              component=\"h1\" \n              variant=\"h3\" \n              sx={{ \n                fontWeight: 700, \n                color: '#FFD700',\n                mb: 3,\n                position: 'relative',\n                textShadow: '0 2px 4px rgba(0,0,0,0.3)',\n                '&::after': {\n                  content: '\"\"',\n                  position: 'absolute',\n                  bottom: '-10px',\n                  left: '50%',\n                  transform: 'translateX(-50%)',\n                  width: '80px',\n                  height: '4px',\n                  background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                  borderRadius: '2px'\n                }\n              }}\n            >\n              Create Your Account\n            </Typography>\n            \n            <Paper \n              elevation={3} \n              sx={{ \n                p: { xs: 2, sm: 4 }, \n                mt: 4, \n                width: '100%',\n                borderRadius: 2,\n                backgroundColor: 'rgba(10, 10, 10, 0.8)',\n                border: '1px solid rgba(255, 215, 0, 0.1)',\n                position: 'relative',\n                overflow: 'hidden',\n                '&::before': {\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.1) 0%, rgba(255, 215, 0, 0.1) 100%)',\n                  opacity: 0.1,\n                  zIndex: 0\n                }\n              }}\n            >\n              {error && (\n                <Alert severity=\"error\" sx={{ mb: 3 }}>\n                  {error}\n                </Alert>\n              )}\n              \n              {message && (\n                <Alert severity=\"info\" sx={{ mb: 3 }}>\n                  {message}\n                </Alert>\n              )}\n              \n              {/* Google OAuth Button */}\n              <GoogleOAuthButton\n                onSuccess={handleGoogleSuccess}\n                onError={handleGoogleError}\n                text={`Continue with Google as ${formData.role === 'EMPLOYER' ? 'Employer' : 'Job Seeker'}`}\n                variant=\"outlined\"\n                sx={{ mb: 3 }}\n              />\n              \n              {/* Divider */}\n              <Divider sx={{ \n                my: 3,\n                '&::before, &::after': {\n                  borderColor: 'rgba(255, 215, 0, 0.3)'\n                }\n              }}>\n                <Typography variant=\"body2\" sx={{ \n                  color: 'rgba(255, 255, 255, 0.7)',\n                  px: 2,\n                  fontWeight: 500\n                }}>\n                  or create account manually\n                </Typography>\n              </Divider>\n              \n              <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1, position: 'relative', zIndex: 1 }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      name=\"firstName\"\n                      required\n                      fullWidth\n                      id=\"firstName\"\n                      label=\"First Name\"\n                      autoFocus\n                      value={formData.firstName}\n                      onChange={handleChange}\n                      InputProps={{\n                        sx: {\n                          color: 'white',\n                          '& .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          },\n                          '&:hover .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.6)'\n                          },\n                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                            borderColor: '#FFD700'\n                          }\n                        }\n                      }}\n                      InputLabelProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      required\n                      fullWidth\n                      id=\"lastName\"\n                      label=\"Last Name\"\n                      name=\"lastName\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                      InputProps={{\n                        sx: {\n                          color: 'white',\n                          '& .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          },\n                          '&:hover .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.6)'\n                          },\n                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                            borderColor: '#FFD700'\n                          }\n                        }\n                      }}\n                      InputLabelProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      required\n                      fullWidth\n                      id=\"email\"\n                      label=\"Email Address\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      InputProps={{\n                        sx: {\n                          color: 'white',\n                          '& .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          },\n                          '&:hover .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.6)'\n                          },\n                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                            borderColor: '#FFD700'\n                          }\n                        }\n                      }}\n                      InputLabelProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      required\n                      fullWidth\n                      name=\"password\"\n                      label=\"Password\"\n                      type=\"password\"\n                      id=\"password\"\n                      autoComplete=\"new-password\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      helperText=\"Password must be at least 8 characters long\"\n                      InputProps={{\n                        sx: {\n                          color: 'white',\n                          '& .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          },\n                          '&:hover .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.6)'\n                          },\n                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                            borderColor: '#FFD700'\n                          }\n                        }\n                      }}\n                      InputLabelProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                      }}\n                      FormHelperTextProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.5)' }\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      required\n                      fullWidth\n                      name=\"confirmPassword\"\n                      label=\"Confirm Password\"\n                      type=\"password\"\n                      id=\"confirmPassword\"\n                      autoComplete=\"new-password\"\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      InputProps={{\n                        sx: {\n                          color: 'white',\n                          '& .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          },\n                          '&:hover .MuiOutlinedInput-notchedOutline': {\n                            borderColor: 'rgba(255, 215, 0, 0.6)'\n                          },\n                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                            borderColor: '#FFD700'\n                          }\n                        }\n                      }}\n                      InputLabelProps={{\n                        sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                      }}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <FormControl component=\"fieldset\" sx={{ my: 2 }}>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', mb: 1 }}>I am registering as:</Typography>\n                      <RadioGroup\n                        row\n                        aria-label=\"role\"\n                        name=\"role\"\n                        value={formData.role}\n                        onChange={handleChange}\n                      >\n                        <FormControlLabel \n                          value=\"JOBSEEKER\" \n                          control={<Radio sx={{ \n                            color: 'rgba(255, 215, 0, 0.5)',\n                            '&.Mui-checked': {\n                              color: '#FFD700'\n                            }\n                          }} />} \n                          label={<Typography sx={{ color: 'white' }}>Job Seeker</Typography>} \n                        />\n                        <FormControlLabel \n                          value=\"EMPLOYER\" \n                          control={<Radio sx={{ \n                            color: 'rgba(255, 215, 0, 0.5)',\n                            '&.Mui-checked': {\n                              color: '#FFD700'\n                            }\n                          }} />} \n                          label={<Typography sx={{ color: 'white' }}>Employer</Typography>} \n                        />\n                      </RadioGroup>\n                    </FormControl>\n                  </Grid>\n                  \n                  {formData.role === 'EMPLOYER' && (\n                    <>\n                      <Grid item xs={12}>\n                        <Divider sx={{ \n                          my: 3, \n                          '&::before, &::after': {\n                            borderColor: 'rgba(255, 215, 0, 0.3)'\n                          }\n                        }}>\n                          <Typography variant=\"h6\" sx={{ fontWeight: 600, color: '#FFD700' }}>\n                            Company Information\n                          </Typography>\n                        </Divider>\n                      </Grid>\n                      \n                      <Grid item xs={12}>\n                        <TextField\n                          required\n                          fullWidth\n                          id=\"companyName\"\n                          label=\"Company Name\"\n                          name=\"companyName\"\n                          value={formData.companyName}\n                          onChange={handleChange}\n                          InputProps={{\n                            sx: {\n                              color: 'white',\n                              '& .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.3)'\n                              },\n                              '&:hover .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.6)'\n                              },\n                              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                                borderColor: '#FFD700'\n                              }\n                            }\n                          }}\n                          InputLabelProps={{\n                            sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={12}>\n                        <TextField\n                          fullWidth\n                          id=\"companyWebsite\"\n                          label=\"Company Website\"\n                          name=\"companyWebsite\"\n                          type=\"url\"\n                          value={formData.companyWebsite}\n                          onChange={handleChange}\n                          onBlur={handleWebsiteBlur}\n                          placeholder=\"https://example.com\"\n                          InputProps={{\n                            sx: {\n                              color: 'white',\n                              '& .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.3)'\n                              },\n                              '&:hover .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.6)'\n                              },\n                              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                                borderColor: '#FFD700'\n                              }\n                            }\n                          }}\n                          InputLabelProps={{\n                            sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={12}>\n                        <JamaicaLocationAutocomplete\n                          value={null}\n                          onChange={handleLocationSelect}\n                          placeholder=\"Company Location (Jamaica)\"\n                          sx={{ backgroundColor: 'rgba(255,255,255,0.08)' }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={12}>\n                        <TextField\n                          required\n                          fullWidth\n                          id=\"companyDescription\"\n                          label=\"Company Description\"\n                          name=\"companyDescription\"\n                          multiline\n                          rows={4}\n                          value={formData.companyDescription}\n                          onChange={handleChange}\n                          InputProps={{\n                            sx: {\n                              color: 'white',\n                              '& .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.3)'\n                              },\n                              '&:hover .MuiOutlinedInput-notchedOutline': {\n                                borderColor: 'rgba(255, 215, 0, 0.6)'\n                              },\n                              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                                borderColor: '#FFD700'\n                              }\n                            }\n                          }}\n                          InputLabelProps={{\n                            sx: { color: 'rgba(255, 255, 255, 0.7)' }\n                          }}\n                        />\n                      </Grid>\n                    </>\n                  )}\n\n                  <Grid item xs={12}>\n                    <Button\n                      type=\"submit\"\n                      fullWidth\n                      variant=\"contained\"\n                      disabled={loading}\n                      sx={{\n                        mt: 3,\n                        mb: 2,\n                        py: 1.5,\n                        background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                        color: '#000',\n                        '&:hover': {\n                          background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                          transform: 'translateY(-2px)',\n                          boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                        },\n                        transition: 'all 0.3s ease',\n                        textTransform: 'none',\n                        fontSize: '1.1rem',\n                        fontWeight: 600\n                      }}\n                    >\n                      {loading ? (\n                        <>\n                          <CircularProgress size={24} sx={{ mr: 1, color: '#000' }} />\n                          Creating Account...\n                        </>\n                      ) : (\n                        'Create Account'\n                      )}\n                    </Button>\n                    <Grid container justifyContent=\"center\">\n                      <Grid item>\n                        <Link to=\"/login\" style={{ textDecoration: 'none' }}>\n                          <Typography variant=\"body2\" sx={{ mt: 2, color: '#FFD700', '&:hover': { textDecoration: 'underline' } }}>\n                            Already have an account? Sign in\n                          </Typography>\n                        </Link>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Paper>\n          </Box>\n        </Fade>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Register;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/RoleProtectedRoute.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/auth/GoogleOAuthButton.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/auth/LoginPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/AboutMeCard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/BasicInfoCard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/CandidateDashboard.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'axios' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'LocationOnIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":35,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'buildApiUrl' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":43,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":111,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":182,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'ensureSkillsArray' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":235,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfileData'. Either include it or remove the dependency array.","line":398,"column":6,"nodeType":"ArrayExpression","endLine":398,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfileData]","fix":{"range":[11712,11714],"text":"[fetchProfileData]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedProfile' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":536,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":536,"endColumn":27}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Paper,\n  Container,\n  Tabs,\n  Tab,\n  Button,\n  TextField,\n  Chip,\n  CircularProgress,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  useTheme,\n  useMediaQuery,\n  Alert,\n  styled,\n  LinearProgress,\n  Fade\n} from '@mui/material';\nimport axios from 'axios';\n\n// Import icons\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport AddIcon from '@mui/icons-material/Add';\nimport Avatar from '@mui/material/Avatar';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\nimport ApplicationsList from '../jobseeker/ApplicationsList';\nimport api from '../../utils/axiosConfig';\nimport { SkillsAutocomplete } from '../common/SkillsAutocomplete';\nimport { JamaicaLocationAutocomplete } from '../common/JamaicaLocationAutocomplete';\nimport { buildApiUrl, buildAssetUrl } from '../../config';\nimport { useAuth } from '../../context/AuthContext';\nimport NotificationsMenu from './NotificationsMenu';\n\n// Styled components for Jamaican theme - matching login page styling\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  position: 'relative',\n  zIndex: 2,\n  padding: theme.spacing(4),\n  [theme.breakpoints.up('md')]: {\n    maxWidth: '1100px'\n  },\n  minHeight: '100vh',\n  display: 'flex',\n  flexDirection: 'column'\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  position: 'relative',\n  overflow: 'hidden',\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  backdropFilter: 'blur(10px)',\n  transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-4px)',\n    boxShadow: '0 8px 24px rgba(0,0,0,0.3)'\n  },\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '4px',\n    background: 'linear-gradient(90deg, #FFD700, #007E1B, #FFD700)'\n  }\n}));\n\n// Background wrapper for the entire dashboard\nconst DashboardWrapper = styled(Box)(({ theme }) => ({\n  minHeight: '100vh',\n  backgroundColor: '#0A0A0A',\n  position: 'relative',\n  overflow: 'hidden',\n  paddingBottom: theme.spacing(4)\n}));\n\n// Background image overlay\nconst BackgroundOverlay = styled(Box)({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  width: '100vw',\n  height: '100vh',\n  backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  opacity: 0.3,\n  zIndex: 1\n});\n\nconst StyledTab = styled(Tab)(({ theme }) => ({\n  fontWeight: 500,\n  fontSize: '0.95rem',\n  textTransform: 'none',\n  minWidth: 100,\n  color: 'rgba(255, 255, 255, 0.7)',\n  '&.Mui-selected': {\n    color: '#FFD700'\n  }\n}));\n\nconst StyledButton = styled(Button)(({ theme, variant }) => ({\n  textTransform: 'none',\n  fontWeight: 500,\n  borderRadius: theme.shape.borderRadius,\n  padding: '8px 24px',\n  ...(variant === 'contained' && {\n    background: 'linear-gradient(45deg, #007E1B 30%, #009921 90%)',\n    color: '#fff',\n    boxShadow: '0 2px 8px rgba(0, 126, 27, 0.5)',\n    '&:hover': {\n      background: 'linear-gradient(45deg, #005714 30%, #007E1B 90%)',\n      boxShadow: '0 4px 12px rgba(0, 126, 27, 0.7)'\n    }\n  }),\n  ...(variant === 'outlined' && {\n    borderColor: '#FFD700',\n    color: '#FFD700',\n    '&:hover': {\n      borderColor: '#FFD700',\n      backgroundColor: 'rgba(255, 215, 0, 0.1)'\n    }\n  })\n}));\n\nconst StyledChip = styled(Chip)(({ theme }) => ({\n  backgroundColor: 'rgba(255, 215, 0, 0.15)',\n  color: '#FFD700',\n  fontWeight: 500,\n  margin: theme.spacing(0.5),\n  borderRadius: 16,\n  border: '1px solid rgba(255, 215, 0, 0.3)'\n}));\n\nconst VisuallyHiddenInput = styled('input')({\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  overflow: 'hidden',\n  position: 'absolute',\n  bottom: 0,\n  left: 0,\n  whiteSpace: 'nowrap',\n  width: 1\n});\n\n// File upload button wrapper - matching login page styling\nconst FileUploadButton = styled(Button)(({ theme }) => ({\n  background: 'linear-gradient(45deg, #007E1B 30%, #009921 90%)',\n  color: 'white',\n  '&:hover': {\n    background: 'linear-gradient(45deg, #005714 30%, #007E1B 90%)'\n  },\n  padding: '8px 24px',\n  borderRadius: theme.shape.borderRadius,\n  textTransform: 'none',\n  fontWeight: 500,\n  marginTop: theme.spacing(1),\n  boxShadow: '0 2px 8px rgba(0, 126, 27, 0.25)'\n}));\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.3)'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: 'rgba(255, 215, 0, 0.7)'\n  },\n  '& .MuiInputBase-input': {\n    color: 'white'\n  }\n}));\n\nconst CandidateDashboard = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const { logout } = useAuth();\n  \n  // Default profile structure with empty arrays\n  const defaultProfile = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    location: '',\n    title: '',\n    bio: '',\n    skills: [], // Initialize empty skills array\n    education: [],\n    experience: [],\n    profilePicture: null,\n    resumeFileName: null,\n    resumeUrl: null,\n    photoUrl: null\n  };\n\n  // Helper function to ensure valid skills array\n  const getValidSkills = (profile) => {\n    if (!profile) return [];\n    const skills = profile.skills;\n    if (!skills) return [];\n    if (Array.isArray(skills)) return skills.filter(skill => !!skill);\n    return [];\n  };\n\n  // Helper function to ensure skills is always an array\n  const ensureSkillsArray = (profile) => ({\n    ...profile,\n    skills: Array.isArray(profile?.skills) ? profile.skills : []\n  });\n\n  // Helper to build full asset URL using shared helper\n  const getFullUrl = (relativeUrl) => {\n    if (!relativeUrl || typeof relativeUrl !== 'string') return '';\n    return buildAssetUrl(relativeUrl);\n  };\n\n  // State for profile data\n  const [profile, setProfile] = useState(defaultProfile);\n  \n  // UI state\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [showResumePreview, setShowResumePreview] = useState(false);\n  \n  // Form state\n  const [editedProfile, setEditedProfile] = useState({...defaultProfile});\n  \n  // File upload state\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  \n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  \n  // Handle profile edit mode toggle\n  const handleEditToggle = () => {\n    if (editMode) {\n      // If we're exiting edit mode, reset the edited profile to the current profile\n      setEditedProfile({\n        ...profile,\n        skills: Array.isArray(profile?.skills) ? profile.skills : []\n      });\n    } else {\n      // If we're entering edit mode, initialize the edited profile with the current profile\n      setEditedProfile({\n        ...profile,\n        skills: Array.isArray(profile?.skills) ? profile.skills : []\n      });\n    }\n    setEditMode(!editMode);\n  };\n  \n  // Handle profile field changes\n  const handleProfileChange = (e) => {\n    const { name, value } = e.target;\n    setEditedProfile(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Handle Jamaica-specific location selection\n  const handleLocationSelect = (location) => {\n    // Format the location for display and storage\n    if (location && typeof location === 'object') {\n      // Create a formatted location string that includes parish information\n      const formattedLocation = location.parish\n        ? `${location.name}, ${location.parish}, Jamaica`\n        : `${location.name}, Jamaica`;\n      \n      // Store both the formatted string and the structured data\n      setEditedProfile(prev => ({\n        ...prev,\n        location: formattedLocation,\n        // Store the structured location data for potential future use\n        locationData: {\n          name: location.name,\n          parish: location.parish,\n          placeId: location.placeId || `jamaica-${location.parish ? location.parish.toLowerCase().replace(/\\s+/g, '-') : ''}-${location.name.toLowerCase().replace(/\\s+/g, '-')}`,\n          type: location.type || 'location'\n        }\n      }));\n      \n      logDev('debug', 'Selected Jamaica location:', location);\n    } else {\n      // Handle case where location is cleared or invalid\n      setEditedProfile(prev => ({\n        ...prev,\n        location: '',\n        locationData: null\n      }));\n    }\n  };\n\n  // Constants for localStorage keys (must match the ones in AuthContext.js)\n  const TOKEN_KEY = 'jamdung_auth_token';\n  \n  // Fetch profile data\n  const fetchProfileData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch user profile data\n      const userResponse = await api.get('/api/jobseeker/profile');\n      \n      if (!userResponse.data) {\n        throw new Error('No profile data returned from server');\n      }\n      \n      logDev('debug', 'Fetched profile data:', userResponse.data);\n      \n      // Handle different backend response shapes (e.g., { success, data: {...} } or raw user object)\n      const userData = userResponse.data?.data || userResponse.data || {};\n      \n      const candidateData = userData.candidateProfile || userData.candidate_profile || {};\n      \n      // Extract photo and resume URLs from the candidateProfile\n      const photoUrl = candidateData.photoUrl || null;\n      const resumeUrl = candidateData.resumeUrl || null;\n      const resumeFileName = candidateData.resumeFileName || null;\n      \n      // Update both profile states with defaults for any missing fields\n      const updatedProfile = {\n        ...defaultProfile,\n        ...userData,\n        photoUrl,\n        resumeUrl,\n        resumeFileName,\n        // Ensure arrays are always properly initialized\n        skills: Array.isArray(candidateData.skills) ? candidateData.skills : [],\n        education: candidateData.education || [],\n        experience: candidateData.experience || []\n      };\n      \n      logDev('debug', 'Profile URLs:', {\n        photoUrl,\n        fullPhotoUrl: getFullUrl(photoUrl),\n        resumeUrl,\n        fullResumeUrl: getFullUrl(resumeUrl),\n        resumeFileName\n      });\n      \n      const sanitizedProfile = {\n        ...updatedProfile,\n        skills: getValidSkills(updatedProfile.skills)\n      };\n      \n      setProfile(sanitizedProfile);\n      setEditedProfile(sanitizedProfile);\n      \n      return sanitizedProfile;\n    } catch (error) {\n      logError('Error fetching profile data', { error: sanitizeForLogging(error), context: 'candidateDashboard' });\n      setMessage({ type: 'error', text: 'Failed to load profile data. Please try again later.' });\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Load profile data when component mounts\n  useEffect(() => {\n    fetchProfileData();\n  }, []);\n  \n  // Handle save profile changes\n  const handleSaveProfile = async () => {\n    try {\n      setLoading(true);\n      logDev('debug', 'Updating profile with data:', editedProfile);\n      \n      // Combine user and jobseeker profile data into one payload for backend\n      const payload = {\n        first_name: editedProfile.firstName,\n        last_name: editedProfile.lastName,\n        phone_number: editedProfile.phone,\n        title: editedProfile.title,\n        bio: editedProfile.bio,\n        location: editedProfile.location,\n        skills: editedProfile.skills,\n        education: editedProfile.education,\n        experience: editedProfile.experience,\n        locationData: editedProfile.locationData || null\n      };\n      \n      // Send single request to update jobseeker profile (also updates user fields in backend)\n      const profileResponse = await api.put('/api/jobseeker/profile', payload, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(TOKEN_KEY)}`\n        }\n      });\n      \n      logDev('debug', 'Profile update response:', profileResponse.data);\n      \n      // Extract updated data accommodating different response shapes\n      const responseData = profileResponse.data?.data || profileResponse.data || {};\n      \n      const updatedProfile = {\n        ...profile,\n        ...responseData,\n        ...payload\n      };\n      \n      // Ensure skills array is properly initialized\n      const sanitizedProfile = {\n        ...updatedProfile,\n        skills: Array.isArray(updatedProfile.skills) ? updatedProfile.skills : []\n      };\n      setProfile(sanitizedProfile);\n      setEditedProfile(sanitizedProfile);\n      \n      setEditMode(false);\n      \n      setMessage({ type: 'success', text: 'Profile updated successfully!' });\n    } catch (error) {\n      logError('Error updating profile', { error: sanitizeForLogging(error), userId: profile.id, context: 'candidateDashboard' });\n      setMessage({ type: 'error', text: `Failed to update profile: ${error.message}` });\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle file selection for resume upload\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      // Only accept PDF files\n      if (file.type !== 'application/pdf') {\n        setMessage({ type: 'error', text: 'Please upload a PDF file.' });\n        return;\n      }\n      \n      setSelectedFile(file);\n      logDev('debug', 'File selected:', file.name);\n    }\n  };\n  \n  // Handle resume upload\n  const handleUploadResume = async () => {\n    if (!selectedFile) {\n      setMessage({ type: 'error', text: 'Please select a file to upload.' });\n      return;\n    }\n    \n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n    if (selectedFile.size > maxSize) {\n      setMessage({ type: 'error', text: `File size exceeds 5MB limit. Your file is ${(selectedFile.size / (1024 * 1024)).toFixed(2)}MB.` });\n      return;\n    }\n    \n    setIsUploading(true);\n    setUploadProgress(0);\n    \n    try {\n      // Create form data\n      const formData = new FormData();\n      formData.append('resume', selectedFile);\n      \n      // Get the token for explicit authorization\n      const token = localStorage.getItem(TOKEN_KEY);\n      if (!token) {\n        throw new Error('Authentication token not found. Please log in again.');\n      }\n      \n      logDev('debug', 'Uploading resume:', {\n        fileName: selectedFile.name,\n        fileSize: selectedFile.size,\n        fileType: selectedFile.type\n      });\n      \n      // Make API call to upload resume with progress tracking\n      const response = await api.post('/api/jobseeker/profile/resume', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          setUploadProgress(percentCompleted);\n          logDev('debug', `Upload progress: ${percentCompleted}%`);\n        }\n      });\n      \n      // Safely handle the response data\n      const responseData = response.data || {};\n      logDev('debug', 'Upload response:', responseData);\n      \n      // Check if we have a valid resumeUrl in the response\n      if (!responseData.resumeUrl) {\n        logError('Invalid resume upload response', { \n          response: sanitizeForLogging(responseData),\n          context: 'candidateDashboard'\n        });\n        throw new Error('Resume URL not found in server response');\n      }\n      \n      // Update profile with resume URL from response\n      const resumeUrl = getFullUrl(responseData.resumeUrl);\n      const resumeFileName = responseData.resumeFileName || selectedFile.name;\n      \n      const updatedProfile = {\n        ...profile,\n        resumeUrl: resumeUrl,\n        resumeFileName: resumeFileName\n      };\n      \n      logDev('debug', 'Updated profile with resume URL:', {\n        resumeUrl,\n        fullUrl: getFullUrl(resumeUrl),\n        resumeFileName\n      });\n      \n      // Also update editedProfile to keep them in sync\n      setEditedProfile(prev => ({\n        ...prev,\n        resumeFileName: selectedFile.name,\n        resumeUrl: getFullUrl(responseData.resumeUrl)\n      }));\n      \n      // Reset file selection\n      setSelectedFile(null);\n      \n      // Show success message\n      setMessage({ type: 'success', text: 'Resume uploaded successfully!' });\n      \n      // Refresh profile data to ensure we have the latest resume info\n      await fetchProfileData();\n    } catch (error) {\n      // Handle specific error codes\n      if (error.response) {\n        const status = error.response.status;\n        if (status === 400) {\n          setMessage({ type: 'error', text: 'Invalid file format. Please upload a PDF file.' });\n        } else if (status === 401) {\n          setMessage({ type: 'error', text: 'Authentication error. Please log in again.' });\n        } else if (status === 413) {\n          setMessage({ type: 'error', text: 'File too large. Maximum size is 5MB.' });\n        } else {\n          setMessage({ type: 'error', text: `Upload failed: ${error.response.data?.message || error.message}` });\n        }\n      } else {\n        setMessage({ type: 'error', text: `Upload failed: ${error.message}` });\n      }\n      \n      logError('Resume upload error', { \n        error: sanitizeForLogging(error), \n        fileName: selectedFile?.name,\n        fileSize: selectedFile?.size,\n        context: 'candidateDashboard' \n      });\n    } finally {\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  // Handle profile picture upload\n  const handleProfilePictureUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      setMessage({ type: 'error', text: 'Photo size should be less than 5MB' });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const formData = new FormData();\n      formData.append('photo', file);\n\n      const response = await api.post('/api/jobseeker/profile/photo', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${localStorage.getItem('jamdung_auth_token')}`\n        }\n      });\n\n      if (!response.data || !response.data.photoUrl) {\n        throw new Error('No photo URL returned from server');\n      }\n\n      // Log the response for debugging\n      logDev('debug', 'Profile photo upload response:', response.data);\n      \n      // Optimistically update the profile photo locally for instant feedback\n      const newPhotoUrl = response.data.photoUrl;\n      setProfile(prev => ({ ...prev, photoUrl: newPhotoUrl }));\n      // Also refresh entire profile to sync other possible changes\n      await fetchProfileData();\n      \n      setMessage({ type: 'success', text: 'Profile picture updated successfully!' });\n    } catch (error) {\n      logError('Error uploading profile picture', {\n        error: sanitizeForLogging(error),\n        context: 'candidateDashboard'\n      });\n      setMessage({ type: 'error', text: 'Failed to update profile picture.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle opening resume preview\n  const handleViewResume = () => {\n    if (!profile.resumeUrl) {\n      setMessage({ type: 'error', text: 'No resume available to view.' });\n      return;\n    }\n    setShowResumePreview(true);\n  };\n\n  // Handle resume download\n  const handleDownloadResume = async () => {\n    if (!profile.resumeUrl) {\n      setMessage({ type: 'error', text: 'No resume available to download.' });\n      return;\n    }\n\n    try {\n      // Create a temporary link element to trigger the download\n      const link = document.createElement('a');\n      link.href = getFullUrl(profile.resumeUrl);\n      link.download = profile.resumeFileName || 'resume.pdf';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      logDev('debug', 'Resume download initiated:', {\n        fileName: profile.resumeFileName\n      });\n    } catch (error) {\n      logError('Error downloading resume', {\n        error: sanitizeForLogging(error),\n        context: 'candidateDashboard'\n      });\n      setMessage({ type: 'error', text: 'Failed to download resume.' });\n    }\n  };\n\n  // Handle closing resume preview\n  const handleCloseResumePreview = () => {\n    setShowResumePreview(false);\n  };\n\n  // Render resume preview dialog\n  const renderResumePreview = () => (\n    <Dialog\n      open={showResumePreview}\n      onClose={handleCloseResumePreview}\n      maxWidth=\"md\"\n      fullWidth\n      fullScreen={isMobile}\n      PaperProps={{\n        sx: {\n          backgroundColor: 'rgba(20, 20, 20, 0.95)',\n          border: '1px solid rgba(255, 215, 0, 0.3)',\n          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',\n          color: 'white'\n        }\n      }}\n    >\n      <DialogTitle sx={{ \n        borderBottom: '1px solid rgba(255, 215, 0, 0.3)',\n        padding: '16px 24px'\n      }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\" sx={{ color: '#FFD700', fontWeight: 600 }}>\n            Resume Preview\n          </Typography>\n          <IconButton onClick={handleCloseResumePreview} sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent sx={{ padding: 0 }}>\n        {profile.resumeUrl ? (\n          <Box sx={{ height: '70vh', overflow: 'auto', backgroundColor: '#fff' }}>\n            <object\n              data={getFullUrl(profile.resumeUrl)}\n              type=\"application/pdf\"\n              width=\"100%\"\n              height=\"100%\"\n              style={{ minHeight: '500px' }}\n            >\n              <Typography variant=\"body1\" sx={{ p: 3, color: '#000' }}>\n                Unable to display PDF. <a href={getFullUrl(profile.resumeUrl)} target=\"_blank\" rel=\"noopener noreferrer\">Download</a> instead.\n              </Typography>\n            </object>\n          </Box>\n        ) : (\n          <Box sx={{ textAlign: 'center', py: 8 }}>\n            <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>No resume available to preview.</Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.7)', mt: 1 }}>Upload a resume to see it here.</Typography>\n          </Box>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ borderTop: '1px solid rgba(255, 215, 0, 0.3)', padding: '16px 24px' }}>\n        <StyledButton onClick={handleDownloadResume} startIcon={<GetAppIcon />} variant=\"outlined\">\n          Download\n        </StyledButton>\n        <StyledButton onClick={handleCloseResumePreview} variant=\"contained\">\n          Close\n        </StyledButton>\n      </DialogActions>\n    </Dialog>\n  );\n\n  // Render profile section\n  const renderProfileSection = () => {\n    // Get the photo URL and log details for debugging\n    const photoUrl = getFullUrl(profile.photoUrl);\n    console.warn('Profile photo rendering:', { \n      originalUrl: profile.photoUrl,\n      processedUrl: photoUrl,\n      profileData: JSON.stringify(profile)\n    });\n    \n    // Force reload the image by adding a timestamp\n    const photoUrlWithTimestamp = photoUrl ? `${photoUrl}?t=${new Date().getTime()}` : '';\n    \n    return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={4}>\n        <StyledPaper>\n          <Box sx={{ textAlign: 'center', position: 'relative' }}>\n            <Box sx={{ position: 'relative', display: 'inline-block', mb: 2 }}>\n              {photoUrl ? (\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar \n                    src={photoUrlWithTimestamp} \n                    alt={`${profile.firstName} ${profile.lastName}`}\n                    sx={{ width: 120, height: 120, mb: 2 }}\n                    imgProps={{ \n                      onError: (e) => {\n                        console.error('Image failed to load:', photoUrlWithTimestamp);\n                        e.target.onerror = null; // Prevent infinite error loop\n                        e.target.src = ''; // Clear the src to show fallback\n                      }\n                    }}\n                  />\n                </Box>\n              ) : (\n                <Avatar\n                  sx={{ width: 120, height: 120, mb: 2, bgcolor: '#009B77' }}\n                >\n                  {profile.firstName && profile.lastName ? \n                    `${profile.firstName[0]}${profile.lastName[0]}` : '?'}\n                </Avatar>\n              )}\n              {editMode && (\n                <label htmlFor=\"profile-picture-upload\">\n                  <IconButton \n                    component=\"span\"\n                    sx={{ \n                      position: 'absolute', \n                      bottom: 0, \n                      right: 0,\n                      backgroundColor: '#009B77',\n                      color: 'white',\n                      '&:hover': { backgroundColor: '#007c5f' }\n                    }}\n                  >\n                    <EditIcon fontSize=\"small\" />\n                  </IconButton>\n                  <VisuallyHiddenInput\n                    id=\"profile-picture-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleProfilePictureUpload}\n                  />\n                </label>\n              )}\n            </Box>\n            <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 600, color: 'white' }}>\n              {profile.firstName} {profile.lastName}\n            </Typography>\n            <Typography variant=\"body1\" color=\"rgba(255, 255, 255, 0.7)\" gutterBottom>\n              {profile.title || 'Job Title'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              {profile.location || 'Location'}\n            </Typography>\n          </Box>\n          \n          <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, mt: 2, color: '#FFD700' }}>\n            Contact Information\n          </Typography>\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" gutterBottom>\n              Email: {profile.email}\n            </Typography>\n            <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" gutterBottom>\n              Phone: {profile.phone || 'Not provided'}\n            </Typography>\n          </Box>\n          \n          <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, mt: 2, color: '#FFD700' }}>\n            Resume\n          </Typography>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            {profile.resumeFileName ? (\n              <>\n                <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" gutterBottom>\n                  {profile.resumeFileName}\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  <StyledButton \n                    variant=\"outlined\" \n                    size=\"small\"\n                    startIcon={<VisibilityIcon />}\n                    onClick={handleViewResume}\n                  >\n                    View\n                  </StyledButton>\n                  <StyledButton \n                    variant=\"outlined\" \n                    size=\"small\"\n                    startIcon={<GetAppIcon />}\n                    onClick={handleDownloadResume}\n                  >\n                    Download\n                  </StyledButton>\n                </Box>\n              </>\n            ) : (\n              <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" gutterBottom>\n                No resume uploaded\n              </Typography>\n            )}\n            \n            {editMode && (\n              <Box sx={{ mt: 2 }}>\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                  <input\n                    accept=\"application/pdf\"\n                    style={{ display: 'none' }}\n                    id=\"resume-upload\"\n                    type=\"file\"\n                    onChange={handleFileSelect}\n                  />\n                  <label htmlFor=\"resume-upload\">\n                    <FileUploadButton \n                      component=\"span\"\n                      startIcon={<CloudUploadIcon />}\n                      fullWidth\n                    >\n                      {profile.resumeFileName ? 'Update Resume' : 'Upload Resume'}\n                    </FileUploadButton>\n                  </label>\n                  \n                  {selectedFile && (\n                    <Box sx={{ \n                      mt: 1, \n                      p: 2, \n                      border: `1px solid ${theme.palette.primary.light}`,\n                      borderRadius: 1,\n                      backgroundColor: theme.palette.background.paper\n                    }}>\n                      <Typography variant=\"body2\" gutterBottom>\n                        <strong>Selected:</strong> {selectedFile.name}\n                      </Typography>\n                      \n                      {isUploading && (\n                        <Box sx={{ width: '100%', mt: 1, mb: 2 }}>\n                          <LinearProgress \n                            variant=\"determinate\" \n                            value={uploadProgress} \n                            sx={{ \n                              height: 8, \n                              borderRadius: 4,\n                              backgroundColor: theme.palette.primary.light,\n                              '& .MuiLinearProgress-bar': {\n                                backgroundColor: theme.palette.primary.main\n                              }\n                            }}\n                          />\n                          <Typography variant=\"caption\" sx={{ display: 'block', textAlign: 'center', mt: 0.5 }}>\n                            {uploadProgress}% Complete\n                          </Typography>\n                        </Box>\n                      )}\n                      \n                      <StyledButton \n                        variant=\"contained\" \n                        size=\"small\"\n                        onClick={handleUploadResume}\n                        disabled={isUploading}\n                        fullWidth\n                        sx={{ mt: 1 }}\n                      >\n                        {isUploading ? 'Uploading...' : 'Confirm Upload'}\n                      </StyledButton>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            )}\n          </Box>\n        </StyledPaper>\n      </Grid>\n      \n      <Grid item xs={12} md={8}>\n        <StyledPaper>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n            <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600, color: '#FFD700' }}>\n              About Me\n            </Typography>\n            {!editMode && (\n              <StyledButton \n                variant=\"outlined\" \n                size=\"small\"\n                startIcon={<EditIcon />}\n                onClick={handleEditToggle}\n              >\n                Edit Profile\n              </StyledButton>\n            )}\n          </Box>\n          \n          {editMode ? (\n            <>\n              <StyledTextField\n                name=\"bio\"\n                label=\"Bio\"\n                multiline\n                rows={4}\n                value={editedProfile.bio || ''}\n                onChange={handleProfileChange}\n                fullWidth\n                margin=\"normal\"\n                placeholder=\"Tell employers about yourself, your experience, and what you're looking for.\"\n              />\n              \n              <Typography variant=\"h6\" sx={{ mt: 3, mb: 2, fontWeight: 600, color: '#FFD700' }}>\n                Personal Information\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <StyledTextField\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    value={editedProfile.firstName || ''}\n                    onChange={handleProfileChange}\n                    fullWidth\n                    margin=\"normal\"\n                    placeholder=\"Your first name\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <StyledTextField\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    value={editedProfile.lastName || ''}\n                    onChange={handleProfileChange}\n                    fullWidth\n                    margin=\"normal\"\n                    placeholder=\"Your last name\"\n                  />\n                </Grid>\n              </Grid>\n              \n              <Typography variant=\"h6\" sx={{ mt: 3, mb: 2, fontWeight: 600, color: '#FFD700' }}>\n                Contact Information\n              </Typography>\n              \n              <StyledTextField\n                name=\"phone\"\n                label=\"Phone Number\"\n                value={editedProfile.phone || ''}\n                onChange={handleProfileChange}\n                fullWidth\n                margin=\"normal\"\n                placeholder=\"e.g., +1 (876) 555-1234\"\n              />\n            </>\n          ) : (\n            <Typography variant=\"body1\" paragraph sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n              {profile.bio || 'No bio provided. Edit your profile to add a bio.'}\n            </Typography>\n          )}\n          \n          <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 2, color: '#FFD700' }}>\n            Skills\n          </Typography>\n          \n          <Box sx={{ display: 'flex', flexWrap: 'wrap', mb: 2 }}>\n            {(() => {\n              // Get the appropriate profile based on edit mode\n              const currentProfile = editMode ? editedProfile : profile;\n              \n              // Get validated skills array using helper function\n              const skills = getValidSkills(currentProfile);\n              \n              // Display message if no skills\n              if (!skills || skills.length === 0) {\n                return (\n                  <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\">\n                    No skills added yet.\n                  </Typography>\n                );\n              }\n              \n              // Render skills chips\n              return skills.map((skill, index) => (\n                <StyledChip \n                  key={`skill-${index}-${skill}`}\n                  label={skill}\n                  onDelete={editMode ? undefined : undefined}\n                />\n              ));\n            })()}\n          </Box>\n          \n          {editMode && (\n            <Box sx={{ mt: 2 }}>\n              <SkillsAutocomplete\n                value={getValidSkills(editedProfile)}\n                onChange={(newSkills) => {\n                  setEditedProfile(prev => ({\n                    ...prev,\n                    skills: Array.isArray(newSkills) ? newSkills.filter(skill => !!skill) : []\n                  }));\n                }}\n                label=\"Skills\"\n                placeholder=\"Search or add skills\"\n                multiple={true}\n                freeSolo={true}\n              />\n            </Box>\n          )}\n          \n          <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 2, color: '#FFD700' }}>\n            Location\n          </Typography>\n          \n          {editMode ? (\n            <JamaicaLocationAutocomplete\n              value={editedProfile.location || ''}\n              onChange={handleLocationSelect}\n              placeholder=\"Enter your location in Jamaica\"\n              sx={{ mb: 2 }}\n            />\n          ) : (\n            <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n              {profile.location || 'No location provided.'}\n            </Typography>\n          )}\n\n          {/* ===================== Education Section ===================== */}\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 2, color: '#FFD700' }}>\n            Education\n          </Typography>\n\n          {editMode ? (\n            <>\n              {(editedProfile.education || []).length > 0 ? (\n                editedProfile.education.map((edu, idx) => (\n                  <Box key={`edu-${idx}`} sx={{ mb: 2, border: '1px solid rgba(255,215,0,0.2)', p: 2, borderRadius: 2, position: 'relative' }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12} sm={6}>\n                        <StyledTextField\n                          label=\"School / Institution\"\n                          value={edu.school || ''}\n                          onChange={(e) => handleEducationChange(idx, 'school', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <StyledTextField\n                          label=\"Degree / Certification\"\n                          value={edu.degree || ''}\n                          onChange={(e) => handleEducationChange(idx, 'degree', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <StyledTextField\n                          label=\"Field of Study\"\n                          value={edu.fieldOfStudy || ''}\n                          onChange={(e) => handleEducationChange(idx, 'fieldOfStudy', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={6} sm={3}>\n                        <StyledTextField\n                          label=\"Start Year\"\n                          value={edu.startDate || ''}\n                          onChange={(e) => handleEducationChange(idx, 'startDate', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={6} sm={3}>\n                        <StyledTextField\n                          label=\"End Year\"\n                          value={edu.endDate || ''}\n                          onChange={(e) => handleEducationChange(idx, 'endDate', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                    </Grid>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => removeEducationEntry(idx)}\n                      sx={{ position: 'absolute', top: 8, right: 8, color: '#ff6b6b' }}\n                    >\n                      <DeleteIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Box>\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" sx={{ mb: 2 }}>\n                  No education entries added yet.\n                </Typography>\n              )}\n              <StyledButton\n                variant=\"outlined\"\n                startIcon={<AddIcon />}\n                onClick={addEducationEntry}\n                sx={{ mb: 3 }}\n              >\n                Add Education\n              </StyledButton>\n            </>\n          ) : (\n            <Box sx={{ mb: 3 }}>\n              {(profile.education || []).length > 0 ? (\n                profile.education.map((edu, idx) => (\n                  <Typography key={`edu-view-${idx}`} variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.8)', mb: 1 }}>\n                    {edu.degree ? `${edu.degree}, ` : ''}{edu.school} {(edu.startDate || edu.endDate) ? `(${edu.startDate || ''}${edu.endDate ? ` - ${edu.endDate}` : ''})` : ''}\n                  </Typography>\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\">\n                  No education information provided.\n                </Typography>\n              )}\n            </Box>\n          )}\n\n          {/* ===================== Experience Section ===================== */}\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 2, color: '#FFD700' }}>\n            Work Experience\n          </Typography>\n\n          {editMode ? (\n            <>\n              {(editedProfile.experience || []).length > 0 ? (\n                editedProfile.experience.map((exp, idx) => (\n                  <Box key={`exp-${idx}`} sx={{ mb: 2, border: '1px solid rgba(255,215,0,0.2)', p: 2, borderRadius: 2, position: 'relative' }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12} sm={6}>\n                        <StyledTextField\n                          label=\"Company\"\n                          value={exp.company || ''}\n                          onChange={(e) => handleExperienceChange(idx, 'company', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={12} sm={6}>\n                        <StyledTextField\n                          label=\"Job Title\"\n                          value={exp.title || ''}\n                          onChange={(e) => handleExperienceChange(idx, 'title', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={6} sm={3}>\n                        <StyledTextField\n                          label=\"Start Date\"\n                          value={exp.startDate || ''}\n                          onChange={(e) => handleExperienceChange(idx, 'startDate', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={6} sm={3}>\n                        <StyledTextField\n                          label=\"End Date\"\n                          value={exp.endDate || ''}\n                          onChange={(e) => handleExperienceChange(idx, 'endDate', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <StyledTextField\n                          label=\"Description\"\n                          value={exp.description || ''}\n                          onChange={(e) => handleExperienceChange(idx, 'description', e.target.value)}\n                          fullWidth\n                          margin=\"dense\"\n                          multiline\n                          rows={3}\n                        />\n                      </Grid>\n                    </Grid>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => removeExperienceEntry(idx)}\n                      sx={{ position: 'absolute', top: 8, right: 8, color: '#ff6b6b' }}\n                    >\n                      <DeleteIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Box>\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\" sx={{ mb: 2 }}>\n                  No experience entries added yet.\n                </Typography>\n              )}\n              <StyledButton\n                variant=\"outlined\"\n                startIcon={<AddIcon />}\n                onClick={addExperienceEntry}\n                sx={{ mb: 3 }}\n              >\n                Add Experience\n              </StyledButton>\n            </>\n          ) : (\n            <Box sx={{ mb: 3 }}>\n              {(profile.experience || []).length > 0 ? (\n                profile.experience.map((exp, idx) => (\n                  <Typography key={`exp-view-${idx}`} variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.8)', mb: 1 }}>\n                    {exp.title} at {exp.company} {(exp.startDate || exp.endDate) ? `(${exp.startDate || ''}${exp.endDate ? ` - ${exp.endDate}` : ''})` : ''}\n                  </Typography>\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"rgba(255, 255, 255, 0.7)\">\n                  No work experience provided.\n                </Typography>\n              )}\n            </Box>\n          )}\n          \n          {editMode && (\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4, gap: 2 }}>\n              <StyledButton \n                variant=\"outlined\"\n                onClick={handleEditToggle}\n              >\n                Cancel\n              </StyledButton>\n              <StyledButton \n                variant=\"contained\"\n                onClick={handleSaveProfile}\n                disabled={loading}\n              >\n                Save Changes\n              </StyledButton>\n            </Box>\n          )}\n        </StyledPaper>\n      </Grid>\n    </Grid>\n  );\n};\n\n// Helper function for education CRUD\nconst handleEducationChange = (index, field, value) => {\n  setEditedProfile(prev => {\n    const newEducation = Array.isArray(prev.education) ? [...prev.education] : [];\n    // Ensure the entry exists\n    newEducation[index] = {\n      ...(newEducation[index] || {}),\n      [field]: value\n    };\n    return { ...prev, education: newEducation };\n  });\n};\n\nconst addEducationEntry = () => {\n  setEditedProfile(prev => ({\n    ...prev,\n    education: [...(prev.education || []), {\n      school: '',\n      degree: '',\n      fieldOfStudy: '',\n      startDate: '',\n      endDate: '',\n      description: ''\n    }]\n  }));\n};\n\nconst removeEducationEntry = (index) => {\n  setEditedProfile(prev => {\n    const newEducation = [...(prev.education || [])];\n    newEducation.splice(index, 1);\n    return { ...prev, education: newEducation };\n  });\n};\n\n// Helper function for experience CRUD\nconst handleExperienceChange = (index, field, value) => {\n  setEditedProfile(prev => {\n    const newExperience = Array.isArray(prev.experience) ? [...prev.experience] : [];\n    newExperience[index] = {\n      ...(newExperience[index] || {}),\n      [field]: value\n    };\n    return { ...prev, experience: newExperience };\n  });\n};\n\nconst addExperienceEntry = () => {\n  setEditedProfile(prev => ({\n    ...prev,\n    experience: [...(prev.experience || []), {\n      company: '',\n      title: '',\n      startDate: '',\n      endDate: '',\n      description: ''\n    }]\n  }));\n};\n\nconst removeExperienceEntry = (index) => {\n  setEditedProfile(prev => {\n    const newExperience = [...(prev.experience || [])];\n    newExperience.splice(index, 1);\n    return { ...prev, experience: newExperience };\n  });\n};\n\nreturn (\n    <DashboardWrapper>\n      <BackgroundOverlay />\n      <StyledContainer>\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4, zIndex: 2 }}>\n            <CircularProgress sx={{ color: '#FFD700' }} />\n          </Box>\n        )}\n      \n        {message && (\n          <Alert \n            severity={message.type} \n            sx={{ \n              mb: 3, \n              zIndex: 2,\n              backgroundColor: 'rgba(30, 30, 30, 0.9)',\n              color: message.type === 'error' ? '#ff6b6b' : message.type === 'success' ? '#51cf66' : '#FFD700',\n              border: '1px solid',\n              borderColor: message.type === 'error' ? '#ff6b6b' : message.type === 'success' ? '#51cf66' : '#FFD700'\n            }}\n            onClose={() => setMessage(null)}\n          >\n            {message.text}\n          </Alert>\n        )}\n      \n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          borderBottom: 1, \n          borderColor: 'rgba(255, 215, 0, 0.3)', \n          mb: 3 \n        }}>\n          <Tabs \n            value={tabValue} \n            onChange={handleTabChange}\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            sx={{\n              '& .MuiTabs-indicator': {\n                backgroundColor: '#FFD700'\n              },\n              flexGrow: 1\n            }}\n          >\n            <StyledTab label=\"Profile\" />\n            <StyledTab label=\"Applications\" />\n            <StyledTab label=\"Saved Jobs\" />\n            <StyledTab label=\"Settings\" />\n          </Tabs>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <NotificationsMenu />\n          </Box>\n        </Box>\n      \n        {tabValue === 0 && renderProfileSection()}\n        {tabValue === 1 && (\n          <Fade in={true} timeout={800}>\n            <Box>\n              <StyledPaper>\n                <Box sx={{ position: 'relative', zIndex: 2 }}>\n                  <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 600, color: '#FFD700' }}>\n                    My Applications\n                  </Typography>\n                  <ApplicationsList />\n                </Box>\n              </StyledPaper>\n            </Box>\n          </Fade>\n        )}\n        {tabValue === 2 && (\n          <StyledPaper>\n            <Typography variant=\"body1\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>Your saved jobs will appear here.</Typography>\n          </StyledPaper>\n        )}\n        {tabValue === 3 && (\n          <StyledPaper>\n            <Box sx={{ p: 2 }}>\n              <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 600, color: '#FFD700' }}>Account Settings</Typography>\n              <StyledButton \n                variant=\"outlined\" \n                color=\"error\"\n                onClick={logout}\n                sx={{ mt: 2 }}\n              >\n                Logout\n              </StyledButton>\n            </Box>\n          </StyledPaper>\n        )}\n        \n        {renderResumePreview()}\n      </StyledContainer>\n    </DashboardWrapper>\n  );\n};\n\nexport default CandidateDashboard;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/CandidateProfile.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/NotificationsMenu.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'sanitizeForLogging' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  IconButton,\n  Badge,\n  Menu,\n  MenuItem,\n  Typography,\n  Divider,\n  Box,\n  ListItemText,\n  ListItemIcon,\n  Button\n} from '@mui/material';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../../utils/axiosConfig';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\n\nconst NotificationsMenu = () => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const notificationsOpen = Boolean(anchorEl);\n  const navigate = useNavigate();\n\n  // Function to fetch notifications\n  const fetchNotifications = useCallback(async () => {\n    try {\n      const response = await api.get('/api/notifications');\n      const notificationsData = response.data.data || [];\n      setNotifications(notificationsData);\n      \n      logDev('debug', 'Fetched notifications', { \n        count: notificationsData.length,\n        unreadCount: notificationsData.filter(n => n.status === 'UNREAD').length,\n        pagination: response.data.pagination\n      });\n    } catch (error) {\n      logError('Error fetching notifications', error, {\n        module: 'NotificationsMenu',\n        function: 'fetchNotifications'\n      });\n      setNotifications([]);\n    }\n  }, []);\n\n  // Function to fetch unread notification count\n  const fetchUnreadCount = useCallback(async () => {\n    try {\n      const response = await api.get('/api/notifications/count');\n      setUnreadCount(response.data.count);\n      \n      logDev('debug', 'Fetched unread notification count', { \n        count: response.data.count \n      });\n    } catch (error) {\n      logError('Error fetching unread count', error, {\n        module: 'NotificationsMenu',\n        function: 'fetchUnreadCount'\n      });\n    }\n  }, []);\n\n  // Function to mark a notification as read\n  const markAsRead = useCallback(async (notificationId) => {\n    try {\n      await api.patch(`/api/notifications/${notificationId}/mark-read`);\n      \n      // Update local state to reflect the change\n      setNotifications(prevNotifications => \n        prevNotifications.map(notification => \n          notification.id === notificationId \n            ? { ...notification, status: 'READ', isRead: true } \n            : notification\n        )\n      );\n      \n      fetchUnreadCount(); // Update the badge count\n      \n      logDev('debug', 'Marked notification as read', { notificationId });\n    } catch (error) {\n      logError('Error marking notification as read', error, {\n        module: 'NotificationsMenu',\n        function: 'markAsRead',\n        notificationId\n      });\n    }\n  }, [fetchUnreadCount]);\n\n  // Function to mark all notifications as read\n  const markAllAsRead = useCallback(async () => {\n    try {\n      const unreadNotifications = notifications.filter(n => n.status === 'UNREAD');\n      if (unreadNotifications.length === 0) return;\n      \n      // Use the new endpoint to mark all notifications as read\n      await api.patch('/api/notifications/mark-all-read');\n      \n      // Update local state\n      setNotifications(prevNotifications => \n        prevNotifications.map(notification => ({\n          ...notification,\n          status: 'READ',\n          isRead: true\n        }))\n      );\n      \n      setUnreadCount(0);\n      \n      logDev('debug', 'Marked all notifications as read', { \n        count: unreadNotifications.length \n      });\n    } catch (error) {\n      logError('Error marking all notifications as read', error, {\n        module: 'NotificationsMenu',\n        function: 'markAllAsRead'\n      });\n    }\n  }, [notifications]);\n\n  // Handle notification icon click\n  const handleNotificationsClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  // Handle notification menu close\n  const handleNotificationsClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Handle notification item click\n  const handleNotificationClick = (notification) => {\n    // Mark as read\n    if (notification.status === 'UNREAD') {\n      markAsRead(notification.id);\n    }\n    \n    // Close the menu\n    handleNotificationsClose();\n    \n    // Navigate based on notification type\n    if (notification.type === 'APPLICATION') {\n      // Extract data from content\n      const contentObj = notification.contentObj || {};\n      \n      // If we have an application ID, navigate to application details\n      if (contentObj.applicationId) {\n        navigate('/applications');\n      }\n    } else if (notification.type === 'MESSAGE') {\n      // Navigate to messages or inbox\n      navigate('/messages');\n    } else if (notification.type === 'SYSTEM') {\n      // System notifications might not need navigation\n    }\n  };\n\n  // Effect for fetching notifications and setting up polling\n  useEffect(() => {\n    // Initial fetch\n    fetchNotifications();\n    fetchUnreadCount();\n    \n    // Set up polling interval (every 30 seconds)\n    const intervalId = setInterval(() => {\n      fetchNotifications();\n      fetchUnreadCount();\n    }, 30000);\n    \n    // Clean up on unmount\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [fetchNotifications, fetchUnreadCount]);\n\n  return (\n    <>\n      {/* Notification Icon with Badge */}\n      <IconButton\n        onClick={handleNotificationsClick}\n        size=\"large\"\n        aria-label=\"show notifications\"\n        aria-controls=\"notifications-menu\"\n        aria-haspopup=\"true\"\n        sx={{\n          color: '#FFD700',\n          '&:hover': {\n            backgroundColor: 'rgba(255, 215, 0, 0.1)'\n          }\n        }}\n      >\n        <Badge\n          badgeContent={unreadCount}\n          color=\"error\"\n          sx={{\n            '& .MuiBadge-badge': {\n              backgroundColor: '#ff6b6b',\n              color: 'white',\n              fontWeight: 'bold'\n            }\n          }}\n        >\n          <NotificationsIcon />\n        </Badge>\n      </IconButton>\n      \n      {/* Notifications Menu */}\n      <Menu\n        id=\"notifications-menu\"\n        anchorEl={anchorEl}\n        open={notificationsOpen}\n        onClose={handleNotificationsClose}\n        PaperProps={{\n          sx: {\n            maxHeight: 400,\n            width: '350px',\n            backgroundColor: '#1A1A1A',\n            border: '1px solid rgba(255, 215, 0, 0.3)',\n            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n          }\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <Box sx={{ px: 2, py: 1.5, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography sx={{ color: '#FFD700', fontWeight: 600 }}>\n            Notifications {unreadCount > 0 && `(${unreadCount} unread)`}\n          </Typography>\n          \n          {unreadCount > 0 && (\n            <Button\n              startIcon={<DoneAllIcon />}\n              onClick={markAllAsRead}\n              size=\"small\"\n              sx={{\n                color: 'rgba(255, 255, 255, 0.7)',\n                textTransform: 'none',\n                '&:hover': {\n                  backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                  color: '#FFD700'\n                },\n                fontSize: '0.75rem'\n              }}\n            >\n              Mark all as read\n            </Button>\n          )}\n        </Box>\n        \n        <Divider sx={{ backgroundColor: 'rgba(255, 215, 0, 0.1)' }} />\n        \n        {notifications.length === 0 ? (\n          <MenuItem sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n            <ListItemText primary=\"No notifications\" />\n          </MenuItem>\n        ) : (\n          <>\n            {notifications.map((notification) => {\n              const contentObj = notification.contentObj || {};\n              const isApplication = notification.type === 'APPLICATION';\n              const isMessage = notification.type === 'MESSAGE';\n              const isSystem = notification.type === 'SYSTEM';\n              \n              let title = 'Notification';\n              let content = 'You have a new notification';\n              \n              if (isApplication && contentObj.jobTitle) {\n                title = 'Application Update';\n                content = `Update on your application for ${contentObj.jobTitle}`;\n              } else if (isMessage && contentObj.senderName) {\n                title = 'New Message';\n                content = `New message from ${contentObj.senderName}`;\n              } else if (isSystem) {\n                title = 'System Notification';\n                content = notification.content || 'System update';\n              }\n              \n              return (\n                <MenuItem\n                  key={notification.id}\n                  onClick={() => handleNotificationClick(notification)}\n                  sx={{\n                    borderLeft: notification.status === 'UNREAD' ? '3px solid #2C5530' : 'none',\n                    backgroundColor: notification.status === 'UNREAD' ? 'rgba(44, 85, 48, 0.1)' : 'transparent',\n                    '&:hover': {\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                    },\n                    padding: '10px 16px'\n                  }}\n                >\n                  <ListItemText\n                    primary={\n                      <Typography\n                        sx={{\n                          color: '#FFD700',\n                          fontWeight: notification.status === 'UNREAD' ? 600 : 400,\n                          fontSize: '0.9rem'\n                        }}\n                      >\n                        {title}\n                      </Typography>\n                    }\n                    secondary={\n                      <Typography\n                        sx={{\n                          color: 'rgba(255, 255, 255, 0.7)',\n                          fontWeight: notification.status === 'UNREAD' ? 500 : 400,\n                          fontSize: '0.8rem'\n                        }}\n                      >\n                        {content}\n                        {notification.createdAt && (\n                          <Box component=\"span\" sx={{ display: 'block', fontSize: '0.75rem', mt: 0.5, color: 'rgba(255, 255, 255, 0.5)' }}>\n                            {new Date(notification.createdAt).toLocaleString()}\n                          </Box>\n                        )}\n                      </Typography>\n                    }\n                  />\n                </MenuItem>\n              );\n            })}\n            \n            <Divider sx={{ backgroundColor: 'rgba(255, 215, 0, 0.1)' }} />\n            \n            <Box sx={{ p: 1, textAlign: 'center' }}>\n              <Button\n                size=\"small\"\n                sx={{\n                  color: '#FFD700',\n                  textTransform: 'none',\n                  '&:hover': {\n                    backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                  },\n                  fontSize: '0.8rem'\n                }}\n                onClick={handleNotificationsClose}\n              >\n                Close\n              </Button>\n            </Box>\n          </>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default NotificationsMenu;\n\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/PhotoUploadCard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/ResumeBuilder.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":null},"fix":{"range":[845,869],"text":""},"desc":"Remove the console.null()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  Grid,\n  TextField,\n  Divider,\n  IconButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  styled,\n  Avatar\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { SkillsAutocomplete } from '../common/SkillsAutocomplete';\nimport { LocationAutocomplete } from '../common/LocationAutocomplete';\n\n// Function to log only in development environment\nconst logDev = (level, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console[level](...args);\n  }\n};\n\n// Styled components for Jamaican theme\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  position: 'relative',\n  overflow: 'hidden',\n  marginBottom: theme.spacing(3),\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n    opacity: 0.3,\n    zIndex: 0\n  }\n}));\n\n// Jamaican educational institutions\nconst JAMAICAN_EDUCATION_INSTITUTIONS = [\n  'University of the West Indies (UWI)',\n  'University of Technology (UTech)',\n  'Northern Caribbean University (NCU)',\n  'Caribbean Maritime University (CMU)',\n  'Edna Manley College of the Visual and Performing Arts',\n  'G.C. Foster College of Physical Education and Sport',\n  'College of Agriculture, Science and Education (CASE)',\n  'Excelsior Community College',\n  'Knox Community College',\n  'Montego Bay Community College',\n  'Brown\\'s Town Community College',\n  'Moneague College',\n  'Shortwood Teachers\\' College',\n  'Sam Sharpe Teachers\\' College',\n  'Bethlehem Moravian College',\n  'Mico University College',\n  'Jamaica Theological Seminary',\n  'Caribbean Graduate School of Theology',\n  'International University of the Caribbean',\n  'University College of the Caribbean'\n];\n\n// Jamaican qualifications\nconst JAMAICAN_QUALIFICATIONS = [\n  'Caribbean Secondary Education Certificate (CSEC)',\n  'Caribbean Advanced Proficiency Examination (CAPE)',\n  'Associate Degree',\n  'Bachelor\\'s Degree',\n  'Master\\'s Degree',\n  'Doctoral Degree (PhD)',\n  'Diploma',\n  'Certificate',\n  'Professional Certification',\n  'Vocational Training Certificate',\n  'HEART Trust/NTA Certification',\n  'City & Guilds Certification',\n  'Teaching Diploma',\n  'Nursing Diploma',\n  'Technical Diploma',\n  'National Council on Technical and Vocational Education and Training (NCTVET) Certification'\n];\n\n// Resume sections\nconst steps = ['Personal Information', 'Education', 'Work Experience', 'Skills & Achievements'];\n\nconst ResumeBuilder = ({ onSave, onExport }) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [resumeData, setResumeData] = useState({\n    personalInfo: {\n      fullName: '',\n      email: '',\n      phone: '',\n      location: '',\n      title: '',\n      summary: '',\n      photoUrl: null,\n      resumeFile: null,\n      resumeFileName: ''\n    },\n    education: [\n      {\n        institution: '',\n        qualification: '',\n        fieldOfStudy: '',\n        startDate: '',\n        endDate: '',\n        present: false,\n        description: ''\n      }\n    ],\n    workExperience: [\n      {\n        company: '',\n        position: '',\n        location: '',\n        startDate: '',\n        endDate: '',\n        present: false,\n        description: ''\n      }\n    ],\n    skills: [],\n    achievements: [\n      {\n        title: '',\n        description: ''\n      }\n    ]\n  });\n\n  // Handle form field changes\n  const handlePersonalInfoChange = (field, value) => {\n    setResumeData({\n      ...resumeData,\n      personalInfo: {\n        ...resumeData.personalInfo,\n        [field]: value\n      }\n    });\n  };\n  \n  // Handle photo upload\n  const handlePhotoUpload = (file) => {\n    if (!file) return;\n    \n    // Create a FileReader to read the image file as a data URL\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      // e.target.result contains the data URL (base64 encoded image)\n      const photoDataUrl = e.target.result;\n      \n      // Update the resumeData state with the photo URL\n      handlePersonalInfoChange('photoUrl', photoDataUrl);\n    };\n    \n    // Read the file as a data URL\n    reader.readAsDataURL(file);\n  };\n  \n  // Handle resume file upload\n  const handleResumeUpload = (file) => {\n    if (!file) return;\n    \n    // Store the file object and filename\n    handlePersonalInfoChange('resumeFile', file);\n    handlePersonalInfoChange('resumeFileName', file.name);\n  };\n\n  const handleEducationChange = (index, field, value) => {\n    const updatedEducation = [...resumeData.education];\n    updatedEducation[index] = {\n      ...updatedEducation[index],\n      [field]: value\n    };\n    \n    // If present is checked, clear the end date\n    if (field === 'present' && value === true) {\n      updatedEducation[index].endDate = '';\n    }\n    \n    setResumeData({\n      ...resumeData,\n      education: updatedEducation\n    });\n  };\n\n  const handleWorkExperienceChange = (index, field, value) => {\n    const updatedWorkExperience = [...resumeData.workExperience];\n    updatedWorkExperience[index] = {\n      ...updatedWorkExperience[index],\n      [field]: value\n    };\n    \n    // If present is checked, clear the end date\n    if (field === 'present' && value === true) {\n      updatedWorkExperience[index].endDate = '';\n    }\n    \n    setResumeData({\n      ...resumeData,\n      workExperience: updatedWorkExperience\n    });\n  };\n\n  const handleSkillsChange = (newSkills) => {\n    setResumeData({\n      ...resumeData,\n      skills: newSkills\n    });\n  };\n\n  const handleAchievementChange = (index, field, value) => {\n    const updatedAchievements = [...resumeData.achievements];\n    updatedAchievements[index] = {\n      ...updatedAchievements[index],\n      [field]: value\n    };\n    \n    setResumeData({\n      ...resumeData,\n      achievements: updatedAchievements\n    });\n  };\n\n  // Add/remove education entries\n  const addEducation = () => {\n    setResumeData({\n      ...resumeData,\n      education: [\n        ...resumeData.education,\n        {\n          institution: '',\n          qualification: '',\n          fieldOfStudy: '',\n          startDate: '',\n          endDate: '',\n          present: false,\n          description: ''\n        }\n      ]\n    });\n  };\n\n  const removeEducation = (index) => {\n    if (resumeData.education.length > 1) {\n      const updatedEducation = resumeData.education.filter((_, i) => i !== index);\n      setResumeData({\n        ...resumeData,\n        education: updatedEducation\n      });\n    }\n  };\n\n  // Add/remove work experience entries\n  const addWorkExperience = () => {\n    setResumeData({\n      ...resumeData,\n      workExperience: [\n        ...resumeData.workExperience,\n        {\n          company: '',\n          position: '',\n          location: '',\n          startDate: '',\n          endDate: '',\n          present: false,\n          description: ''\n        }\n      ]\n    });\n  };\n\n  const removeWorkExperience = (index) => {\n    if (resumeData.workExperience.length > 1) {\n      const updatedWorkExperience = resumeData.workExperience.filter((_, i) => i !== index);\n      setResumeData({\n        ...resumeData,\n        workExperience: updatedWorkExperience\n      });\n    }\n  };\n\n  // Add/remove achievement entries\n  const addAchievement = () => {\n    setResumeData({\n      ...resumeData,\n      achievements: [\n        ...resumeData.achievements,\n        {\n          title: '',\n          description: ''\n        }\n      ]\n    });\n  };\n\n  const removeAchievement = (index) => {\n    if (resumeData.achievements.length > 1) {\n      const updatedAchievements = resumeData.achievements.filter((_, i) => i !== index);\n      setResumeData({\n        ...resumeData,\n        achievements: updatedAchievements\n      });\n    }\n  };\n\n  // Handle step navigation\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSave = () => {\n    if (onSave && typeof onSave === 'function') {\n      onSave(resumeData);\n    }\n  };\n\n  // Placeholder for export functionality - will be implemented in the next phase\n  const handleExport = (format) => {\n    if (onExport && typeof onExport === 'function') {\n      onExport(resumeData, format);\n    } else {\n      logDev('info', 'Export functionality will be implemented in the next phase');\n      logDev('debug', 'Resume data:', resumeData);\n      logDev('debug', 'Export format:', format);\n    }\n  };\n\n  // Render form sections based on active step\n  const renderStepContent = (step) => {\n    const formStyles = {\n      '& .MuiOutlinedInput-root': {\n        color: 'white',\n        '& fieldset': { borderColor: 'rgba(255, 215, 0, 0.3)' },\n        '&:hover fieldset': { borderColor: 'rgba(255, 215, 0, 0.5)' },\n        '&.Mui-focused fieldset': { borderColor: '#FFD700' }\n      },\n      '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' },\n      '& .MuiInputLabel-root.Mui-focused': { color: '#FFD700' },\n      '& .MuiFormHelperText-root': { color: 'rgba(255, 255, 255, 0.5)' },\n      mb: 2\n    };\n\n    switch (step) {\n      case 0: // Personal Information\n        return (\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 2 }}>\n                Tell us about yourself\n              </Typography>\n            </Grid>\n            \n            {/* Photo Upload Section */}\n            <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\n              <Box sx={{ textAlign: 'center' }}>\n                <Box\n                  sx={{\n                    width: 150,\n                    height: 150,\n                    borderRadius: '50%',\n                    border: '2px solid rgba(255, 215, 0, 0.5)',\n                    overflow: 'hidden',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    backgroundColor: 'rgba(0, 0, 0, 0.2)',\n                    mb: 2,\n                    mx: 'auto',\n                    position: 'relative'\n                  }}\n                >\n                  {resumeData.personalInfo.photoUrl ? (\n                    <Avatar\n                      src={resumeData.personalInfo.photoUrl}\n                      alt=\"Profile Photo\"\n                      sx={{ width: '100%', height: '100%' }}\n                    />\n                  ) : (\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                      No photo selected\n                    </Typography>\n                  )}\n                </Box>\n                \n                <input\n                  accept=\"image/*\"\n                  type=\"file\"\n                  id=\"photo-upload\"\n                  style={{ display: 'none' }}\n                  onChange={(e) => e.target.files[0] && handlePhotoUpload(e.target.files[0])}\n                />\n                <label htmlFor=\"photo-upload\">\n                  <Button\n                    variant=\"outlined\"\n                    component=\"span\"\n                    startIcon={<CloudUploadIcon />}\n                    size=\"small\"\n                    sx={{\n                      color: '#FFD700',\n                      borderColor: '#FFD700',\n                      '&:hover': {\n                        borderColor: '#FFD700',\n                        backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                      }\n                    }}\n                  >\n                    Upload Photo\n                  </Button>\n                </label>\n                <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1, color: 'rgba(255, 255, 255, 0.5)' }}>\n                  Recommended: Square image, 300x300 pixels or larger\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Full Name\"\n                fullWidth\n                required\n                value={resumeData.personalInfo.fullName}\n                onChange={(e) => handlePersonalInfoChange('fullName', e.target.value)}\n                sx={formStyles}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Professional Title\"\n                fullWidth\n                placeholder=\"e.g., Software Developer, Marketing Specialist\"\n                value={resumeData.personalInfo.title}\n                onChange={(e) => handlePersonalInfoChange('title', e.target.value)}\n                sx={formStyles}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Email\"\n                type=\"email\"\n                fullWidth\n                required\n                value={resumeData.personalInfo.email}\n                onChange={(e) => handlePersonalInfoChange('email', e.target.value)}\n                sx={formStyles}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Phone\"\n                fullWidth\n                required\n                value={resumeData.personalInfo.phone}\n                onChange={(e) => handlePersonalInfoChange('phone', e.target.value)}\n                sx={formStyles}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <LocationAutocomplete\n                value={resumeData.personalInfo.location}\n                onChange={(newValue) => handlePersonalInfoChange('location', newValue)}\n                label=\"Location\"\n                sx={formStyles}\n              />\n            </Grid>\n            \n            {/* Resume Upload Section */}\n            <Grid item xs={12}>\n              <Box sx={{ \n                border: '1px dashed rgba(255, 215, 0, 0.5)', \n                borderRadius: 1, \n                p: 2, \n                mb: 2,\n                backgroundColor: 'rgba(255, 215, 0, 0.05)'\n              }}>\n                <Typography variant=\"subtitle2\" sx={{ color: '#FFD700', mb: 1 }}>\n                  Upload Existing Resume (Optional)\n                </Typography>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 2 }}>\n                  <input\n                    accept=\".pdf,.doc,.docx\"\n                    type=\"file\"\n                    id=\"resume-upload\"\n                    style={{ display: 'none' }}\n                    onChange={(e) => e.target.files[0] && handleResumeUpload(e.target.files[0])}\n                  />\n                  <label htmlFor=\"resume-upload\">\n                    <Button\n                      variant=\"outlined\"\n                      component=\"span\"\n                      startIcon={<CloudUploadIcon />}\n                      sx={{\n                        color: '#2C5530',\n                        borderColor: '#2C5530',\n                        '&:hover': {\n                          borderColor: '#2C5530',\n                          backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                        }\n                      }}\n                    >\n                      Select File\n                    </Button>\n                  </label>\n                  \n                  {resumeData.personalInfo.resumeFileName && (\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.9)' }}>\n                      Selected: {resumeData.personalInfo.resumeFileName}\n                    </Typography>\n                  )}\n                </Box>\n                \n                <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1, color: 'rgba(255, 255, 255, 0.5)' }}>\n                  Supported formats: PDF, DOC, DOCX (Max size: 5MB)\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <TextField\n                label=\"Professional Summary\"\n                fullWidth\n                multiline\n                rows={4}\n                value={resumeData.personalInfo.summary}\n                onChange={(e) => handlePersonalInfoChange('summary', e.target.value)}\n                helperText=\"Briefly describe your professional background, key skills, and career goals.\"\n                sx={formStyles}\n              />\n            </Grid>\n          </Grid>\n        );\n\n      case 1: // Education\n        return (\n          <Box>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700' }}>\n                Education Background\n              </Typography>\n              <Button\n                startIcon={<AddIcon />}\n                onClick={addEducation}\n                sx={{\n                  color: '#2C5530',\n                  '&:hover': {\n                    backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                  }\n                }}\n              >\n                Add Education\n              </Button>\n            </Box>\n            \n            {resumeData.education.map((edu, index) => (\n              <Box key={index} sx={{ mb: 4, position: 'relative' }}>\n                {index > 0 && (\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => removeEducation(index)}\n                    sx={{\n                      position: 'absolute',\n                      top: 0,\n                      right: 0,\n                      color: 'rgba(255, 255, 255, 0.5)',\n                      '&:hover': {\n                        color: '#f44336',\n                        backgroundColor: 'rgba(244, 67, 54, 0.1)'\n                      }\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                )}\n                \n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <FormControl fullWidth sx={formStyles}>\n                      <InputLabel>Institution</InputLabel>\n                      <Select\n                        value={edu.institution}\n                        onChange={(e) => handleEducationChange(index, 'institution', e.target.value)}\n                        label=\"Institution\"\n                      >\n                        <MenuItem value=\"\">\n                          <em>Select or type an institution</em>\n                        </MenuItem>\n                        {JAMAICAN_EDUCATION_INSTITUTIONS.map((institution) => (\n                          <MenuItem key={institution} value={institution}>\n                            {institution}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth sx={formStyles}>\n                      <InputLabel>Qualification</InputLabel>\n                      <Select\n                        value={edu.qualification}\n                        onChange={(e) => handleEducationChange(index, 'qualification', e.target.value)}\n                        label=\"Qualification\"\n                      >\n                        <MenuItem value=\"\">\n                          <em>Select a qualification</em>\n                        </MenuItem>\n                        {JAMAICAN_QUALIFICATIONS.map((qualification) => (\n                          <MenuItem key={qualification} value={qualification}>\n                            {qualification}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Field of Study\"\n                      fullWidth\n                      placeholder=\"e.g., Computer Science, Business Administration\"\n                      value={edu.fieldOfStudy}\n                      onChange={(e) => handleEducationChange(index, 'fieldOfStudy', e.target.value)}\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Start Date\"\n                      type=\"month\"\n                      fullWidth\n                      value={edu.startDate}\n                      onChange={(e) => handleEducationChange(index, 'startDate', e.target.value)}\n                      InputLabelProps={{ shrink: true }}\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <TextField\n                        label=\"End Date\"\n                        type=\"month\"\n                        fullWidth\n                        value={edu.endDate}\n                        onChange={(e) => handleEducationChange(index, 'endDate', e.target.value)}\n                        disabled={edu.present}\n                        InputLabelProps={{ shrink: true }}\n                        sx={formStyles}\n                      />\n                      <Box sx={{ ml: 2, display: 'flex', alignItems: 'center' }}>\n                        <input\n                          type=\"checkbox\"\n                          id={`present-edu-${index}`}\n                          checked={edu.present}\n                          onChange={(e) => handleEducationChange(index, 'present', e.target.checked)}\n                          style={{ marginRight: '8px' }}\n                        />\n                        <label htmlFor={`present-edu-${index}`} style={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                          Present\n                        </label>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <TextField\n                      label=\"Description\"\n                      fullWidth\n                      multiline\n                      rows={2}\n                      value={edu.description}\n                      onChange={(e) => handleEducationChange(index, 'description', e.target.value)}\n                      placeholder=\"Describe your studies, achievements, relevant coursework, etc.\"\n                      sx={formStyles}\n                    />\n                  </Grid>\n                </Grid>\n                \n                {index < resumeData.education.length - 1 && (\n                  <Divider sx={{ my: 2, backgroundColor: 'rgba(255, 215, 0, 0.2)' }} />\n                )}\n              </Box>\n            ))}\n          </Box>\n        );\n\n      case 2: // Work Experience\n        return (\n          <Box>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700' }}>\n                Work Experience\n              </Typography>\n              <Button\n                startIcon={<AddIcon />}\n                onClick={addWorkExperience}\n                sx={{\n                  color: '#2C5530',\n                  '&:hover': {\n                    backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                  }\n                }}\n              >\n                Add Experience\n              </Button>\n            </Box>\n            \n            {resumeData.workExperience.map((exp, index) => (\n              <Box key={index} sx={{ mb: 4, position: 'relative' }}>\n                {index > 0 && (\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => removeWorkExperience(index)}\n                    sx={{\n                      position: 'absolute',\n                      top: 0,\n                      right: 0,\n                      color: 'rgba(255, 255, 255, 0.5)',\n                      '&:hover': {\n                        color: '#f44336',\n                        backgroundColor: 'rgba(244, 67, 54, 0.1)'\n                      }\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                )}\n                \n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Company/Organization\"\n                      fullWidth\n                      required\n                      value={exp.company}\n                      onChange={(e) => handleWorkExperienceChange(index, 'company', e.target.value)}\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Position/Title\"\n                      fullWidth\n                      required\n                      value={exp.position}\n                      onChange={(e) => handleWorkExperienceChange(index, 'position', e.target.value)}\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <LocationAutocomplete\n                      value={exp.location}\n                      onChange={(newValue) => handleWorkExperienceChange(index, 'location', newValue)}\n                      label=\"Location\"\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      label=\"Start Date\"\n                      type=\"month\"\n                      fullWidth\n                      value={exp.startDate}\n                      onChange={(e) => handleWorkExperienceChange(index, 'startDate', e.target.value)}\n                      InputLabelProps={{ shrink: true }}\n                      sx={formStyles}\n                    />\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <TextField\n                        label=\"End Date\"\n                        type=\"month\"\n                        fullWidth\n                        value={exp.endDate}\n                        onChange={(e) => handleWorkExperienceChange(index, 'endDate', e.target.value)}\n                        disabled={exp.present}\n                        InputLabelProps={{ shrink: true }}\n                        sx={formStyles}\n                      />\n                      <Box sx={{ ml: 2, display: 'flex', alignItems: 'center' }}>\n                        <input\n                          type=\"checkbox\"\n                          id={`present-exp-${index}`}\n                          checked={exp.present}\n                          onChange={(e) => handleWorkExperienceChange(index, 'present', e.target.checked)}\n                          style={{ marginRight: '8px' }}\n                        />\n                        <label htmlFor={`present-exp-${index}`} style={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                          Present\n                        </label>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <TextField\n                      label=\"Description\"\n                      fullWidth\n                      multiline\n                      rows={3}\n                      value={exp.description}\n                      onChange={(e) => handleWorkExperienceChange(index, 'description', e.target.value)}\n                      placeholder=\"Describe your responsibilities, achievements, and the skills you utilized in this role.\"\n                      sx={formStyles}\n                    />\n                  </Grid>\n                </Grid>\n                \n                {index < resumeData.workExperience.length - 1 && (\n                  <Divider sx={{ my: 2, backgroundColor: 'rgba(255, 215, 0, 0.2)' }} />\n                )}\n              </Box>\n            ))}\n          </Box>\n        );\n\n      case 3: // Skills & Achievements\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 2 }}>\n                Skills\n              </Typography>\n              <SkillsAutocomplete\n                value={resumeData.skills}\n                onChange={handleSkillsChange}\n                label=\"Skills\"\n                sx={formStyles}\n              />\n              <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.5)', mt: 1 }}>\n                Add relevant skills that showcase your expertise. These will help employers find you for matching positions.\n              </Typography>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2, mt: 2 }}>\n                <Typography variant=\"subtitle1\" sx={{ color: '#FFD700' }}>\n                  Achievements & Certifications\n                </Typography>\n                <Button\n                  startIcon={<AddIcon />}\n                  onClick={addAchievement}\n                  sx={{\n                    color: '#2C5530',\n                    '&:hover': {\n                      backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                    }\n                  }}\n                >\n                  Add Achievement\n                </Button>\n              </Box>\n              \n              {resumeData.achievements.map((achievement, index) => (\n                <Box key={index} sx={{ mb: 3, position: 'relative' }}>\n                  {index > 0 && (\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => removeAchievement(index)}\n                      sx={{\n                        position: 'absolute',\n                        top: 0,\n                        right: 0,\n                        color: 'rgba(255, 255, 255, 0.5)',\n                        '&:hover': {\n                          color: '#f44336',\n                          backgroundColor: 'rgba(244, 67, 54, 0.1)'\n                        }\n                      }}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  )}\n                  \n                  <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                      <TextField\n                        label=\"Achievement/Certification Title\"\n                        fullWidth\n                        value={achievement.title}\n                        onChange={(e) => handleAchievementChange(index, 'title', e.target.value)}\n                        placeholder=\"e.g., Employee of the Year, AWS Certification\"\n                        sx={formStyles}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12}>\n                      <TextField\n                        label=\"Description\"\n                        fullWidth\n                        multiline\n                        rows={2}\n                        value={achievement.description}\n                        onChange={(e) => handleAchievementChange(index, 'description', e.target.value)}\n                        placeholder=\"Provide details about this achievement or certification.\"\n                        sx={formStyles}\n                      />\n                    </Grid>\n                  </Grid>\n                  \n                  {index < resumeData.achievements.length - 1 && (\n                    <Divider sx={{ my: 2, backgroundColor: 'rgba(255, 215, 0, 0.2)' }} />\n                  )}\n                </Box>\n              ))}\n            </Grid>\n          </Grid>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <StyledPaper>\n      <Typography variant=\"h5\" sx={{ color: '#FFD700', mb: 3 }}>\n        Resume Builder\n      </Typography>\n      \n      <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel\n              sx={{\n                '& .MuiStepLabel-label': {\n                  color: activeStep === steps.indexOf(label) ? '#FFD700' : 'rgba(255, 255, 255, 0.7)'\n                },\n                '& .MuiStepIcon-root': {\n                  color: activeStep === steps.indexOf(label) ? '#2C5530' : 'rgba(255, 255, 255, 0.3)'\n                },\n                '& .MuiStepIcon-root.Mui-completed': {\n                  color: '#2C5530'\n                }\n              }}\n            >\n              {label}\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      \n      <Box sx={{ mt: 2, mb: 4 }}>\n        {renderStepContent(activeStep)}\n      </Box>\n      \n      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Button\n          disabled={activeStep === 0}\n          onClick={handleBack}\n          startIcon={<NavigateBeforeIcon />}\n          sx={{\n            color: 'rgba(255, 255, 255, 0.7)',\n            '&:hover': {\n              backgroundColor: 'rgba(255, 255, 255, 0.1)'\n            }\n          }}\n        >\n          Back\n        </Button>\n        \n        <Box>\n          {activeStep === steps.length - 1 ? (\n            <>\n              <Button\n                variant=\"contained\"\n                onClick={handleSave}\n                sx={{\n                  backgroundColor: '#2C5530',\n                  color: '#FFFFFF',\n                  mr: 2,\n                  '&:hover': {\n                    backgroundColor: '#1E3D23'\n                  }\n                }}\n              >\n                Save Resume\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={() => handleExport('pdf')}\n                sx={{\n                  backgroundColor: '#FFD700',\n                  color: '#000000',\n                  '&:hover': {\n                    backgroundColor: '#E6C200'\n                  }\n                }}\n              >\n                Export as PDF\n              </Button>\n            </>\n          ) : (\n            <Button\n              variant=\"contained\"\n              onClick={handleNext}\n              endIcon={<NavigateNextIcon />}\n              sx={{\n                backgroundColor: '#2C5530',\n                color: '#FFFFFF',\n                '&:hover': {\n                  backgroundColor: '#1E3D23'\n                }\n              }}\n            >\n              Next\n            </Button>\n          )}\n        </Box>\n      </Box>\n    </StyledPaper>\n  );\n};\n\nexport default ResumeBuilder;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/ResumeBuilderPage.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'resumeData'. Either include it or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [resumeData, user]","fix":{"range":[3047,3053],"text":"[resumeData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Container,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  useMediaQuery,\n  useTheme,\n  styled,\n  CircularProgress\n} from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { useAuth } from '../../context/AuthContext';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\nimport ResumePreview from './ResumePreview';\nimport ResumeBuilder from './ResumeBuilder';\n\n// Styled components for Jamaican theme\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  position: 'relative',\n  zIndex: 2,\n  padding: theme.spacing(4),\n  [theme.breakpoints.up('md')]: {\n    maxWidth: '1300px'\n  }\n}));\n\nconst ResumeBuilderPage = () => {\n  const { user } = useAuth();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const [resumeData, setResumeData] = useState({\n    personalInfo: {\n      fullName: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      location: user?.location || '',\n      title: '',\n      summary: ''\n    },\n    education: [\n      {\n        institution: '',\n        qualification: '',\n        fieldOfStudy: '',\n        startDate: '',\n        endDate: '',\n        present: false,\n        description: ''\n      }\n    ],\n    workExperience: [\n      {\n        company: '',\n        position: '',\n        location: '',\n        startDate: '',\n        endDate: '',\n        present: false,\n        description: ''\n      }\n    ],\n    skills: user?.skills || [],\n    achievements: [\n      {\n        title: '',\n        description: ''\n      }\n    ]\n  });\n  const [previewOpen, setPreviewOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(null);\n\n  // Load existing resume data if available\n  useEffect(() => {\n    const fetchResumeData = async () => {\n      logDev('debug', 'Fetching resume data', { \n        userId: user?.id,\n        source: 'localStorage' \n      });\n      try {\n        // Check if we have saved resume data in localStorage\n        const savedResume = localStorage.getItem('candidateResumeData');\n        \n        if (savedResume) {\n          // Use the saved resume data\n          setResumeData(JSON.parse(savedResume));\n        } else {\n          // In a real application, you would fetch from API\n          // For demo purposes, we'll just use the default data with user info\n          logDev('debug', 'No saved resume found, using default template', {\n            userId: user?.id,\n            defaultFields: Object.keys(resumeData)\n          });\n        }\n      } catch (error) {\n        logError('Error fetching resume data', error, {\n          module: 'ResumeBuilderPage',\n          function: 'fetchResumeData',\n          userId: user?.id\n        });\n      }\n    };\n    \n    fetchResumeData();\n  }, [user]);\n\n  const handleSaveResume = (data) => {\n    try {\n      setLoading(true);\n      \n      logDev('debug', 'Saving resume data', {\n        userId: user?.id,\n        sections: Object.keys(data),\n        skillsCount: data.skills?.length || 0,\n        educationCount: data.education?.length || 0,\n        experienceCount: data.workExperience?.length || 0\n      });\n      \n      // Save to localStorage for persistence during demo\n      localStorage.setItem('candidateResumeData', JSON.stringify(data));\n      \n      // In a real application, you would also save to your backend\n      // const response = await axios.post('/api/candidate/resume', data);\n      \n      setResumeData(data);\n      setMessage({\n        type: 'success',\n        text: 'Resume saved successfully!'\n      });\n      \n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n      \n      setLoading(false);\n    } catch (error) {\n      logError('Error saving resume', error, {\n        module: 'ResumeBuilderPage',\n        function: 'handleSaveResume',\n        userId: user?.id,\n        dataSize: JSON.stringify(data).length\n      });\n      setMessage({\n        type: 'error',\n        text: 'Failed to save resume. Please try again.'\n      });\n    }\n  };\n\n  const handleExportResume = async (data, format) => {\n    try {\n      setLoading(true);\n      \n      logDev('debug', 'Exporting resume', { \n        userId: user?.id,\n        format,\n        sections: Object.keys(data)\n      });\n      \n      // Update resume data first\n      setResumeData(data);\n      \n      // Simple export functionality without PDF generation\n      if (format === 'pdf') {\n        // Store the resume data in localStorage\n        localStorage.setItem('candidateResumeData', JSON.stringify(data));\n        \n        // Show a message to the user\n        setMessage({\n          type: 'success',\n          text: 'Your resume has been saved! PDF export will be available soon.'\n        });\n        \n        // In a real implementation, we would send the data to the server\n        // and generate a PDF there, then provide a download link\n        logDev('info', 'Resume data prepared for export', sanitizeForLogging({\n          userId: user?.id,\n          format: 'pdf',\n          sections: Object.keys(data),\n          personalInfo: {\n            name: data.personalInfo?.fullName,\n            email: data.personalInfo?.email ? '[EMAIL REDACTED]' : 'Not provided',\n            phone: data.personalInfo?.phone ? '[PHONE REDACTED]' : 'Not provided'\n          }\n        }));\n      } else {\n        // For other formats (future implementation)\n        logDev('warn', 'Export format not supported', { format });\n        setMessage({\n          type: 'error',\n          text: `Export as ${format} not supported yet.`\n        });\n      }\n      \n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n    } catch (error) {\n      logError('Error exporting resume', error, {\n        module: 'ResumeBuilderPage',\n        function: 'handleExportResume',\n        userId: user?.id,\n        format,\n        dataSize: JSON.stringify(data).length\n      });\n      setLoading(false);\n      setMessage({\n        type: 'error',\n        text: 'Failed to export resume. Please try again.'\n      });\n    }\n  };\n\n  const handlePreviewOpen = () => {\n    logDev('debug', 'Opening resume preview', { userId: user?.id });\n    setPreviewOpen(true);\n  };\n\n  const handlePreviewClose = () => {\n    logDev('debug', 'Closing resume preview', { userId: user?.id });\n    setPreviewOpen(false);\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#0A0A0A',\n        position: 'relative'\n      }}\n    >\n      {/* Background image with Jamaican styling */}\n      <Box\n        sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: 0.3,\n          zIndex: 1\n        }}\n      />\n      \n      <StyledContainer maxWidth=\"lg\">\n        <Box sx={{ py: 4, position: 'relative', zIndex: 2 }}>\n          <Typography \n            variant=\"h4\" \n            component=\"h1\" \n            gutterBottom \n            sx={{ \n              color: '#FFD700',\n              fontWeight: 600,\n              textShadow: '0 2px 4px rgba(0,0,0,0.3)',\n              mb: 4\n            }}\n          >\n            Resume Builder\n          </Typography>\n\n          {message && (\n            <Box \n              sx={{ \n                p: 2, \n                mb: 3, \n                backgroundColor: message.type === 'success' ? 'rgba(44, 85, 48, 0.1)' : 'rgba(205, 43, 43, 0.1)',\n                color: message.type === 'success' ? '#E8F5E9' : '#f8d7da',\n                border: message.type === 'success' ? '1px solid rgba(44, 85, 48, 0.3)' : '1px solid rgba(205, 43, 43, 0.3)',\n                borderRadius: 1\n              }}\n            >\n              {message.text}\n            </Box>\n          )}\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={isMobile ? 12 : 7}>\n              <ResumeBuilder \n                onSave={handleSaveResume} \n                onExport={handleExportResume} \n                initialData={resumeData}\n              />\n            </Grid>\n            \n            {!isMobile && (\n              <Grid item md={5}>\n                <Box \n                  sx={{ \n                    position: 'sticky', \n                    top: 20, \n                    maxHeight: 'calc(100vh - 40px)',\n                    overflowY: 'auto',\n                    pr: 2\n                  }}\n                >\n                  <Typography \n                    variant=\"h6\" \n                    sx={{ \n                      color: '#FFD700',\n                      mb: 2,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    }}\n                  >\n                    <span>Live Preview</span>\n                    <Box>\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        startIcon={<GetAppIcon />}\n                        onClick={() => handleExportResume(resumeData, 'pdf')}\n                        sx={{\n                          ml: 1,\n                          color: '#FFD700',\n                          borderColor: '#FFD700',\n                          '&:hover': {\n                            borderColor: '#FFD700',\n                            backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                          }\n                        }}\n                      >\n                        Export PDF\n                        {loading && <CircularProgress size={16} sx={{ ml: 1 }} />}\n                      </Button>\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        startIcon={<SaveIcon />}\n                        onClick={() => handleSaveResume(resumeData)}\n                        disabled={loading}\n                        sx={{\n                          ml: 1,\n                          color: '#2C5530',\n                          borderColor: '#2C5530',\n                          '&:hover': {\n                            borderColor: '#2C5530',\n                            backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                          }\n                        }}\n                      >\n                        Save\n                      </Button>\n                    </Box>\n                  </Typography>\n                  \n                  <Box \n                    id=\"resume-preview-container\"\n                    sx={{ \n                      transform: 'scale(0.8)',\n                      transformOrigin: 'top center',\n                      boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n                    }}\n                  >\n                    <ResumePreview resumeData={resumeData} />\n                  </Box>\n                </Box>\n              </Grid>\n            )}\n            \n            {isMobile && (\n              <Grid item xs={12}>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  startIcon={<VisibilityIcon />}\n                  onClick={handlePreviewOpen}\n                  sx={{\n                    backgroundColor: '#2C5530',\n                    color: '#FFFFFF',\n                    '&:hover': {\n                      backgroundColor: '#1E3D23'\n                    }\n                  }}\n                >\n                  Preview Resume\n                </Button>\n              </Grid>\n            )}\n          </Grid>\n        </Box>\n      </StyledContainer>\n      \n      {/* Preview Dialog for Mobile */}\n      <Dialog\n        open={previewOpen}\n        onClose={handlePreviewClose}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            backgroundColor: '#0A0A0A',\n            backgroundImage: 'linear-gradient(135deg, rgba(44, 85, 48, 0.1) 0%, rgba(255, 215, 0, 0.1) 100%)',\n            color: '#FFFFFF'\n          }\n        }}\n      >\n        <DialogTitle sx={{ color: '#FFD700' }}>\n          Resume Preview\n        </DialogTitle>\n        <DialogContent>\n          <Box \n            id=\"resume-preview-dialog\"\n            sx={{ \n              p: 2,\n              backgroundColor: '#FFFFFF',\n              borderRadius: 1\n            }}\n          >\n            <ResumePreview resumeData={resumeData} />\n          </Box>\n        </DialogContent>\n        <DialogActions sx={{ p: 2 }}>\n          <Button\n            onClick={() => handleExportResume(resumeData, 'pdf')}\n            startIcon={<GetAppIcon />}\n            sx={{\n              color: '#FFD700',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 215, 0, 0.1)'\n              }\n            }}\n          >\n            Export PDF\n            {loading && <CircularProgress size={16} sx={{ ml: 1 }} />}\n          </Button>\n          <Button\n            onClick={handlePreviewClose}\n            sx={{\n              color: 'rgba(255, 255, 255, 0.7)',\n              '&:hover': {\n                color: '#FFFFFF'\n              }\n            }}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ResumeBuilderPage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/candidate/ResumePreview.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/BaseAutocomplete.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/CompanyAutocomplete.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { FaBuilding } from 'react-icons/fa';\nimport { logDev, logError } from '../../utils/loggingUtils';\nimport { BaseAutocomplete } from './BaseAutocomplete';\n\nexport const CompanyAutocomplete = ({ value, onChange }) => {\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchCompanySuggestions = async (query) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/companies/search?q=${encodeURIComponent(query)}`);\n      const data = await response.json();\n      return data.companies.map(company => ({\n        id: company.id,\n        name: company.name,\n        logo: company.logo,\n        location: company.location\n      }));\n    } catch (error) {\n      logError('Error fetching company suggestions', error, {\n        module: 'CompanyAutocomplete',\n        function: 'fetchCompanySuggestions',\n        query\n      });\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = async (input) => {\n    onChange(input);\n    if (input.length >= 2) {\n      const results = await fetchCompanySuggestions(input);\n      logDev('debug', 'Company suggestions fetched', {\n        query: input,\n        resultsCount: results.length\n      });\n      setSuggestions(results);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const renderSuggestion = (suggestion) => (\n    <div className=\"flex items-center\">\n      {suggestion.logo && (\n        <img\n          src={suggestion.logo}\n          alt={suggestion.name}\n          className=\"w-8 h-8 rounded-full mr-3 object-cover\"\n        />\n      )}\n      <div>\n        <div className=\"font-medium\">{suggestion.name}</div>\n        {suggestion.location && (\n          <div className=\"text-sm text-gray-500\">{suggestion.location}</div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <BaseAutocomplete\n      value={value}\n      onChange={(suggestion) => onChange(suggestion.name)}\n      onClear={() => onChange('')}\n      onInputChange={(input) => {\n        handleInputChange(input);\n        if (input.length >= 2) {\n          logDev('debug', 'Company search input changed', { \n            inputLength: input.length \n          });\n        }\n      }}\n      placeholder=\"Company name\"\n      icon={FaBuilding}\n      suggestions={suggestions}\n      renderSuggestion={renderSuggestion}\n      loading={loading}\n    />\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/DeadlineWarning.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/JamaicaLocationAutocomplete.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'logError' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":14,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  TextField, \n  Autocomplete, \n  Box, \n  Typography, \n  Grid,\n  Slider,\n  InputAdornment,\n  Chip\n} from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport { searchLocations, jamaicaParishes } from '../../data/jamaicaLocations';\nimport { logDev, logError } from '../../utils/loggingUtils';\n\n/**\n * Jamaica-specific location autocomplete component\n * Uses local data of Jamaican parishes, cities, towns, and neighborhoods\n */\nexport const JamaicaLocationAutocomplete = ({ \n  value, \n  onChange, \n  placeholder = 'Location in Jamaica', \n  radius = 10, \n  onRadiusChange,\n  sx = {}\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const [searchRadius, setSearchRadius] = useState(radius);\n  const [selectedParishes, setSelectedParishes] = useState([]);\n\n  // Update options when input changes\n  useEffect(() => {\n    if (inputValue.length >= 2) {\n      const results = searchLocations(inputValue);\n      logDev('debug', 'Jamaica location search results', {\n        query: inputValue,\n        resultsCount: results.length,\n        topResults: results.slice(0, 3).map(r => r.name)\n      });\n      \n      // Filter by selected parishes if any\n      const filteredResults = selectedParishes.length > 0 \n        ? results.filter(option => selectedParishes.includes(option.parish))\n        : results;\n      \n      // Log parish filtering in development\n      if (selectedParishes.length > 0) {\n        logDev('debug', 'Filtering locations by parishes', {\n          selectedParishes,\n          beforeCount: results.length,\n          afterCount: filteredResults.length\n        });\n      }\n      \n      // Always show at least top parishes if no results\n      if (filteredResults.length === 0 && inputValue.length >= 2) {\n        // Find parishes that match the input\n        const matchingParishes = jamaicaParishes\n          .filter(parish => parish.toLowerCase().includes(inputValue.toLowerCase()))\n          .slice(0, 3);\n          \n        if (matchingParishes.length > 0) {\n          const parishResults = matchingParishes.map(parish => ({\n            mainText: parish,\n            secondaryText: 'Jamaica',\n            placeId: `jamaica-parish-${parish.toLowerCase().replace(/\\s+/g, '-')}`,\n            name: parish,\n            parish: parish,\n            type: 'parish',\n            formattedAddress: `${parish}, Jamaica`\n          }));\n          \n          setOptions(parishResults);\n          return;\n        }\n      }\n        \n      setOptions(filteredResults);\n    } else {\n      // Show popular locations when input is empty or too short\n      const popularLocations = [\n        { name: 'Kingston', parish: 'Kingston' },\n        { name: 'Montego Bay', parish: 'St. James' },\n        { name: 'Ocho Rios', parish: 'St. Ann' },\n        { name: 'Negril', parish: 'Westmoreland' },\n        { name: 'Mandeville', parish: 'Manchester' }\n      ].map(loc => ({\n        mainText: loc.name,\n        secondaryText: `${loc.parish}, Jamaica`,\n        placeId: `jamaica-${loc.parish.toLowerCase().replace(/\\s+/g, '-')}-${loc.name.toLowerCase().replace(/\\s+/g, '-')}`,\n        name: loc.name,\n        parish: loc.parish,\n        type: 'popular',\n        formattedAddress: `${loc.name}, ${loc.parish}, Jamaica`\n      }));\n      \n      setOptions(popularLocations);\n    }\n  }, [inputValue, selectedParishes]);\n\n  // Handle input change\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    \n    // Log input changes that meet the minimum length requirement\n    if (newInputValue.length >= 2) {\n      logDev('debug', 'Location search input changed', {\n        input: newInputValue,\n        length: newInputValue.length\n      });\n    }\n  };\n\n  // Handle option selection\n  const handleOptionSelect = (event, option) => {\n    if (option) {\n      // Add radius to the selected location\n      const locationWithRadius = {\n        ...option,\n        radius: searchRadius\n      };\n      \n      // Log location selection in development\n      logDev('info', 'Location selected', {\n        name: option.name,\n        parish: option.parish,\n        placeId: option.placeId,\n        radius: searchRadius\n      });\n      \n      onChange(locationWithRadius);\n    } else {\n      logDev('debug', 'Location selection cleared');\n      onChange(null);\n    }\n  };\n\n  // Handle radius change\n  const handleRadiusChange = (event, newValue) => {\n    setSearchRadius(newValue);\n    \n    // If there's a selected location, update its radius\n    if (value) {\n      const updatedLocation = {\n        ...value,\n        radius: newValue\n      };\n      onChange(updatedLocation);\n    }\n    \n    // Call the parent's radius change handler if provided\n    if (onRadiusChange) {\n      onRadiusChange(newValue);\n    }\n    \n    // Log radius change in development\n    logDev('debug', 'Search radius changed', {\n      newRadius: newValue,\n      hasSelectedLocation: !!value\n    });\n  };\n\n  // Handle parish filter selection\n  const handleParishSelect = (parish) => {\n    setSelectedParishes(prev => {\n      const newSelection = prev.includes(parish)\n        ? prev.filter(p => p !== parish)\n        : [...prev, parish];\n      \n      // Log parish filter change in development\n      logDev('debug', 'Parish filter changed', {\n        parish,\n        action: prev.includes(parish) ? 'removed' : 'added',\n        totalSelected: newSelection.length\n      });\n      \n      return newSelection;\n    });\n  };\n\n  return (\n    <Box>\n      <Autocomplete\n        id=\"jamaica-location-autocomplete\"\n        options={options}\n        getOptionLabel={(option) => typeof option === 'string' ? option : option.mainText}\n        filterOptions={(x) => x} // Disable built-in filtering\n        autoComplete\n        includeInputInList\n        filterSelectedOptions\n        value={value && typeof value === 'object' ? value : null}\n        onChange={handleOptionSelect}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        noOptionsText={inputValue.length < 2 ? 'Type at least 2 characters' : 'No locations found'}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={placeholder}\n            fullWidth\n            InputProps={{\n              ...params.InputProps,\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <LocationOnIcon sx={{ color: '#FFD700' }} />\n                </InputAdornment>\n              ),\n              sx: {\n                color: 'white',\n                backgroundColor: 'rgba(255, 255, 255, 0.08)',\n                '& .MuiOutlinedInput-notchedOutline': {\n                  borderColor: 'rgba(255, 215, 0, 0.5)',\n                  borderWidth: '2px'\n                },\n                '&:hover .MuiOutlinedInput-notchedOutline': {\n                  borderColor: 'rgba(255, 215, 0, 0.8)'\n                },\n                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                  borderColor: '#FFD700',\n                  borderWidth: '2px'\n                },\n                ...sx\n              }\n            }}\n            InputLabelProps={{\n              sx: { color: '#FFD700', fontWeight: 500 }\n            }}\n          />\n        )}\n        renderOption={(props, option) => (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: '#FFD700', mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                <Typography variant=\"body1\" color=\"text.primary\">\n                  {option.mainText}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.secondaryText}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        )}\n      />\n      \n      {/* Parish filters */}\n      <Box sx={{ mt: 1, mb: 2 }}>\n        <Typography variant=\"body2\" sx={{ color: '#FFD700', mb: 1, fontWeight: 500 }}>\n          Filter by Parish:\n        </Typography>\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n          {jamaicaParishes.map((parish) => (\n            <Chip\n              key={parish}\n              label={parish}\n              size=\"small\"\n              onClick={() => handleParishSelect(parish)}\n              color={selectedParishes.includes(parish) ? 'primary' : 'default'}\n              sx={{\n                backgroundColor: selectedParishes.includes(parish) \n                  ? 'rgba(44, 85, 48, 0.8)' \n                  : 'rgba(255, 255, 255, 0.08)',\n                color: selectedParishes.includes(parish) ? '#FFD700' : 'white',\n                borderColor: selectedParishes.includes(parish) ? '#FFD700' : 'rgba(255, 255, 255, 0.3)',\n                '&:hover': {\n                  backgroundColor: selectedParishes.includes(parish) \n                    ? 'rgba(44, 85, 48, 0.9)' \n                    : 'rgba(255, 255, 255, 0.15)'\n                }\n              }}\n            />\n          ))}\n        </Box>\n      </Box>\n      \n      {/* Radius slider */}\n      <Box sx={{ mt: 2 }}>\n        <Typography id=\"radius-slider\" gutterBottom sx={{ color: '#FFD700', fontWeight: 500 }}>\n          Search Radius: {searchRadius} km\n        </Typography>\n        <Slider\n          value={searchRadius}\n          onChange={handleRadiusChange}\n          aria-labelledby=\"radius-slider\"\n          valueLabelDisplay=\"auto\"\n          step={5}\n          marks\n          min={5}\n          max={50}\n          sx={{\n            color: '#FFD700',\n            '& .MuiSlider-thumb': {\n              backgroundColor: '#FFD700',\n              '&:hover, &.Mui-focusVisible': {\n                boxShadow: '0px 0px 0px 8px rgba(255, 215, 0, 0.16)'\n              }\n            },\n            '& .MuiSlider-track': {\n              backgroundColor: '#FFD700'\n            },\n            '& .MuiSlider-rail': {\n              backgroundColor: 'rgba(255, 215, 0, 0.3)'\n            },\n            '& .MuiSlider-mark': {\n              backgroundColor: 'rgba(255, 215, 0, 0.5)'\n            },\n            '& .MuiSlider-valueLabel': {\n              backgroundColor: '#2C5530',\n              color: '#FFD700'\n            }\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/JamaicaLocationProfileAutocomplete.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":null},"fix":{"range":[447,471],"text":""},"desc":"Remove the console.null()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  TextField, \n  Autocomplete, \n  Box, \n  Typography, \n  Grid,\n  InputAdornment\n} from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport { jamaicaLocations, jamaicaParishes } from '../../data/jamaicaLocations';\n\n// Function to log only in development environment\nconst logDev = (level, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console[level](...args);\n  }\n};\n\n/**\n * Simplified Jamaica-specific location autocomplete component for profile pages\n * Uses local data of Jamaican parishes, cities, towns, and neighborhoods\n * without the filtering options\n */\nexport const JamaicaLocationProfileAutocomplete = ({ \n  value, \n  onChange, \n  placeholder = 'Location in Jamaica', \n  sx = {}\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n\n  // Function to search locations based on input\n  const searchLocations = (query) => {\n    if (!query || query.length < 2) return [];\n    \n    const lowerQuery = query.toLowerCase();\n    \n    // Search through locations and parishes\n    const results = jamaicaLocations\n      .filter(location => \n        location.name.toLowerCase().includes(lowerQuery) || \n        location.parish.toLowerCase().includes(lowerQuery)\n      )\n      .map(location => ({\n        mainText: location.name,\n        secondaryText: `${location.parish}, Jamaica`,\n        placeId: `jamaica-${location.parish.toLowerCase().replace(/\\\\s+/g, '-')}-${location.name.toLowerCase().replace(/\\\\s+/g, '-')}`,\n        name: location.name,\n        parish: location.parish,\n        type: location.type || 'location',\n        formattedAddress: `${location.name}, ${location.parish}, Jamaica`\n      }));\n      \n    // Add parishes as options if they match\n    const parishResults = jamaicaParishes\n      .filter(parish => parish.toLowerCase().includes(lowerQuery))\n      .map(parish => ({\n        mainText: parish,\n        secondaryText: 'Jamaica',\n        placeId: `jamaica-parish-${parish.toLowerCase().replace(/\\\\s+/g, '-')}`,\n        name: parish,\n        parish: parish,\n        type: 'parish',\n        formattedAddress: `${parish}, Jamaica`\n      }));\n      \n    // Merge and deduplicate options by mainText + secondaryText to ensure unique keys\n    const merged = [...results, ...parishResults];\n    const seen = new Set();\n    const unique = [];\n    for (const opt of merged) {\n      const dedupKey = `${opt.mainText}|${opt.secondaryText}`;\n      if (!seen.has(dedupKey)) {\n        seen.add(dedupKey);\n        unique.push(opt);\n      }\n    }\n    \n    return unique.slice(0, 10);\n  };\n\n  // Update options when input changes\n  useEffect(() => {\n    if (inputValue.length >= 2) {\n      const results = searchLocations(inputValue);\n      logDev('debug', 'Jamaica location search results:', results);\n      setOptions(results);\n    } else {\n      // Build initial popular locations list and then deduplicate\n      const initialPopular = [\n        { name: 'Kingston', parish: 'Kingston' },\n        { name: 'Montego Bay', parish: 'St. James' },\n        { name: 'Ocho Rios', parish: 'St. Ann' },\n        { name: 'Negril', parish: 'Westmoreland' },\n        { name: 'Mandeville', parish: 'Manchester' },\n        ...jamaicaParishes.map(parish => ({ name: parish, parish }))\n      ].map(loc => ({\n        mainText: loc.name,\n        secondaryText: loc.name === loc.parish ? 'Jamaica' : `${loc.parish}, Jamaica`,\n        placeId: `jamaica-${loc.parish.toLowerCase().replace(/\\\\s+/g, '-')}-${loc.name.toLowerCase().replace(/\\\\s+/g, '-')}`,\n        name: loc.name,\n        parish: loc.parish,\n        type: loc.name === loc.parish ? 'parish' : 'popular',\n        formattedAddress: loc.name === loc.parish ? `${loc.name}, Jamaica` : `${loc.name}, ${loc.parish}, Jamaica`\n      }));\n\n      // Deduplicate by mainText + secondaryText similar to search results\n      const seenPopular = new Set();\n      const uniquePopular = [];\n      for (const opt of initialPopular) {\n        const dedupKey = `${opt.mainText}|${opt.secondaryText}`;\n        if (!seenPopular.has(dedupKey)) {\n          seenPopular.add(dedupKey);\n          uniquePopular.push(opt);\n        }\n      }\n\n      setOptions(uniquePopular);\n    }\n  }, [inputValue]);\n\n  // Handle input change\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  // Handle option selection\n  const handleOptionSelect = (event, option) => {\n    if (option) {\n      onChange(option);\n    } else {\n      onChange(null);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"jamaica-location-profile-autocomplete\"\n      options={options}\n      getOptionLabel={(option) => typeof option === 'string' ? option : option.mainText}\n      filterOptions={(x) => x} // Disable built-in filtering\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value && typeof value === 'object' ? value : null}\n      onChange={handleOptionSelect}\n      inputValue={inputValue}\n      onInputChange={handleInputChange}\n      noOptionsText={inputValue.length < 2 ? 'Type at least 2 characters' : 'No locations found'}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={placeholder}\n          fullWidth\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <LocationOnIcon sx={{ color: '#FFD700' }} />\n              </InputAdornment>\n            ),\n            sx: {\n              color: 'white',\n              backgroundColor: 'rgba(255, 255, 255, 0.08)',\n              '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.5)',\n                borderWidth: '2px'\n              },\n              '&:hover .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.8)'\n              },\n              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                borderColor: '#FFD700',\n                borderWidth: '2px'\n              },\n              ...sx\n            }\n          }}\n          InputLabelProps={{\n            sx: { color: '#FFD700', fontWeight: 500 }\n          }}\n        />\n      )}\n      renderOption={(props, option) => (\n        <li {...props}>\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <Box\n                component={LocationOnIcon}\n                sx={{ color: '#FFD700', mr: 2 }}\n              />\n            </Grid>\n            <Grid item xs>\n              <Typography variant=\"body1\" color=\"text.primary\">\n                {option.mainText}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {option.secondaryText}\n              </Typography>\n            </Grid>\n          </Grid>\n        </li>\n      )}\n    />\n  );\n};\n\nexport default JamaicaLocationProfileAutocomplete;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/JobShareButton.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/JobTitleAutocomplete.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { FaBriefcase } from 'react-icons/fa';\nimport { BaseAutocomplete } from './BaseAutocomplete';\n\n// Common job titles and roles\nconst commonJobTitles = [\n  'Software Engineer',\n  'Product Manager',\n  'Data Scientist',\n  'UX Designer',\n  'Marketing Manager',\n  'Sales Representative',\n  'Business Analyst',\n  'Project Manager',\n  'DevOps Engineer',\n  'Full Stack Developer',\n  'Frontend Developer',\n  'Backend Developer',\n  'Mobile Developer',\n  'UI Designer',\n  'Content Writer',\n  'Account Manager',\n  'HR Manager',\n  'Financial Analyst',\n  'Operations Manager',\n  'Customer Success Manager'\n].map(title => ({ id: title.toLowerCase(), title }));\n\nexport const JobTitleAutocomplete = ({ value, onChange }) => {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleInputChange = (input) => {\n    onChange(input);\n    if (input.length >= 2) {\n      const filtered = commonJobTitles.filter(item =>\n        item.title.toLowerCase().includes(input.toLowerCase())\n      );\n      setSuggestions(filtered);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const renderSuggestion = (suggestion) => (\n    <div>\n      <div className=\"font-medium\">{suggestion.title}</div>\n    </div>\n  );\n\n  return (\n    <BaseAutocomplete\n      value={value}\n      onChange={(suggestion) => onChange(suggestion.title)}\n      onClear={() => onChange('')}\n      onInputChange={handleInputChange}\n      placeholder=\"Job title or keyword\"\n      icon={FaBriefcase}\n      suggestions={suggestions}\n      renderSuggestion={renderSuggestion}\n    />\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/JobTitleInput.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array. If 'setInputValue' needs the current value of 'value', you can also switch to useReducer instead of useState and read 'value' in the reducer.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [value]","fix":{"range":[1356,1358],"text":"[value]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Autocomplete, \n  TextField, \n  InputAdornment, \n  Box, \n  Typography \n} from '@mui/material';\nimport WorkIcon from '@mui/icons-material/Work';\n\n// Common job titles and roles\nconst commonJobTitles = [\n  'Software Engineer',\n  'Product Manager',\n  'Data Scientist',\n  'UX Designer',\n  'Marketing Manager',\n  'Sales Representative',\n  'Business Analyst',\n  'Project Manager',\n  'DevOps Engineer',\n  'Full Stack Developer',\n  'Frontend Developer',\n  'Backend Developer',\n  'Mobile Developer',\n  'UI Designer',\n  'Content Writer',\n  'Account Manager',\n  'HR Manager',\n  'Financial Analyst',\n  'Operations Manager',\n  'Customer Success Manager',\n  // Jamaican-specific job titles\n  'Tourism Officer',\n  'Hospitality Manager',\n  'Agricultural Specialist',\n  'Cultural Events Coordinator',\n  'Reggae Music Producer',\n  'Cruise Ship Liaison',\n  'Resort Staff Manager',\n  'Jamaican Cuisine Chef',\n  'Tour Guide',\n  'Craft Artisan'\n];\n\n/**\n * A Material-UI based job title autocomplete component\n * Allows users to search for job titles with autocomplete suggestions\n */\nexport const JobTitleInput = ({ value, onChange, sx }) => {\n  const [inputValue, setInputValue] = useState('');\n  \n  useEffect(() => {\n    // Initialize input value from prop\n    if (value) {\n      setInputValue(value);\n    }\n  }, []);\n\n  return (\n    <Autocomplete\n      freeSolo\n      options={commonJobTitles}\n      value={value}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n        onChange(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Job Title or Keyword\"\n          placeholder=\"Search for job titles...\"\n          fullWidth\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <WorkIcon sx={{ color: '#FFD700' }} />\n              </InputAdornment>\n            ),\n            sx: {\n              color: 'white',\n              backgroundColor: 'rgba(255, 255, 255, 0.08)',\n              '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.5)',\n                borderWidth: '2px'\n              },\n              '&:hover .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.8)'\n              },\n              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                borderColor: '#FFD700',\n                borderWidth: '2px'\n              }\n            }\n          }}\n          InputLabelProps={{\n            sx: { color: '#FFD700', fontWeight: 500 }\n          }}\n        />\n      )}\n      renderOption={(props, option) => (\n        <Box component=\"li\" {...props}>\n          <Typography sx={{ color: '#2C5530', fontWeight: 500 }}>\n            {option}\n          </Typography>\n        </Box>\n      )}\n      PaperProps={{\n        sx: {\n          backgroundColor: 'rgba(20, 20, 20, 0.95)',\n          border: '1px solid rgba(255, 215, 0, 0.3)',\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n          '& .MuiAutocomplete-option': {\n            '&:hover': {\n              backgroundColor: 'rgba(44, 85, 48, 0.2)'\n            },\n            '&[aria-selected=\"true\"]': {\n              backgroundColor: 'rgba(44, 85, 48, 0.4)'\n            }\n          }\n        }\n      }}\n      sx={sx}\n    />\n  );\n};\n\nexport default JobTitleInput;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/LocationAutocomplete.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isLoaded' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":40,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'inputRef' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":43,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":97,"column":32,"nodeType":"Identifier","endLine":97,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { \n  TextField, \n  Autocomplete, \n  Box, \n  Typography, \n  Grid,\n  Slider,\n  InputAdornment,\n  CircularProgress\n} from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport { logDev, logError } from '../../utils/loggingUtils';\n\n// Helper function to handle Google Maps API errors\nconst handleGoogleMapsError = (status) => {\n  if (status === 'REQUEST_DENIED') {\n    logError('Google Places API request denied', \n      { status, message: 'Please ensure the Places API is enabled in your Google Cloud Console' },\n      { component: 'LocationAutocomplete' }\n    );\n    \n    logDev('warn',\n      'To enable the Places API:\\n' +\n      '1. Go to https://console.cloud.google.com\\n' +\n      '2. Select your project\\n' +\n      '3. Go to \"APIs & Services\" > \"Library\"\\n' +\n      '4. Search for \"Places API\"\\n' +\n      '5. Click \"Enable\"'\n    );\n    return true;\n  }\n  return false;\n};\n\nexport const LocationAutocomplete = ({ value, onChange, placeholder = 'Location', radius, onRadiusChange }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [searchRadius, setSearchRadius] = useState(radius || 10); // Default 10 km\n  const autocompleteRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Check if script is already loaded\n    if (window.google?.maps?.places) {\n      logDev('debug', 'Google Maps already loaded');\n      setIsLoaded(true);\n      initAutocomplete();\n      return;\n    }\n\n    // Load Google Places API script\n    const existingScript = document.getElementById('google-maps-script');\n    if (existingScript) {\n      logDev('debug', 'Script tag exists, waiting for load');\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.id = 'google-maps-script';\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    \n    if (!apiKey) {\n      logError('Google Maps API key is missing', null, { component: 'LocationAutocomplete' });\n    }\n    \n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n    script.async = true;\n    script.onerror = (error) => {\n      logError('Failed to load Google Maps script', error, { component: 'LocationAutocomplete' });\n      handleGoogleMapsError('REQUEST_DENIED');\n    };\n    script.onload = () => {\n      logDev('debug', 'Google Maps script loaded successfully');\n      setIsLoaded(true);\n      initAutocomplete();\n    };\n    document.head.appendChild(script);\n\n    return () => {\n      // Don't remove the script on unmount as other components might need it\n    };\n  }, []);\n\n  const initAutocomplete = () => {\n    logDev('debug', 'Initializing autocomplete service');\n    try {\n      autocompleteRef.current = new window.google.maps.places.AutocompleteService();\n      logDev('debug', 'Autocomplete service initialized successfully');\n    } catch (error) {\n      logError('Failed to initialize autocomplete service', error, { component: 'LocationAutocomplete' });\n    }\n  };\n\n  const debouncedPredictions = useCallback(\n    (() => {\n      let timeoutId;\n      return (input) => {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        \n        return new Promise((resolve) => {\n          timeoutId = setTimeout(() => {\n            if (!autocompleteRef.current) {\n              logError('Autocomplete service not initialized', null, { component: 'LocationAutocomplete' });\n              resolve([]);\n              return;\n            }\n\n            logDev('debug', 'Requesting predictions for:', input);\n            try {\n              setLoading(true);\n              autocompleteRef.current.getPlacePredictions(\n                {\n                  input,\n                  types: ['(cities)', 'locality', 'sublocality', 'neighborhood']\n                  // Allow locations in Jamaica by default, but don't restrict to only Jamaica\n                  // componentRestrictions: { country: 'jm' }\n                },\n                (predictions, status) => {\n                  setLoading(false);\n                  resolve({ predictions, status });\n                }\n              );\n            } catch (error) {\n              logError('Error getting predictions', error, { \n                component: 'LocationAutocomplete',\n                input: inputValue\n              });\n              setLoading(false);\n              resolve({ predictions: [], status: 'ERROR' });\n            }\n          }, 300); // 300ms delay\n        });\n      };\n    })(),\n    []\n  );\n\n  const handleInputChange = async (event, newInputValue) => {\n    setInputValue(newInputValue);\n\n    if (newInputValue.length >= 2) {\n      const { predictions, status } = await debouncedPredictions(newInputValue);\n      handleAutocompleteResults(predictions, status);\n    } else {\n      setOptions([]);\n    }\n  };\n\n  const handleAutocompleteResults = (predictions, status) => {\n    logDev('debug', 'Got autocomplete results:', { status, predictionsCount: predictions?.length });\n    \n    // Check for specific API activation error\n    if (handleGoogleMapsError(status)) {\n      return;\n    }\n\n    try {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n        const mappedOptions = predictions.map(p => ({\n          id: p.place_id,\n          description: p.description,\n          mainText: p.structured_formatting.main_text,\n          secondaryText: p.structured_formatting.secondary_text\n        }));\n        setOptions(mappedOptions);\n      } else {\n        logDev('debug', 'No valid predictions received, status:', status);\n        setOptions([]);\n      }\n    } catch (error) {\n      logError('Error processing predictions', error, { \n        component: 'LocationAutocomplete',\n        status,\n        predictionsCount: predictions?.length\n      });\n      setOptions([]);\n    }\n  };\n\n  const handleOptionSelect = (event, option) => {\n    if (option) {\n      // Pass both the location name and the place_id to the parent component\n      onChange({\n        name: option.mainText,\n        placeId: option.id,\n        radius: searchRadius\n      });\n    } else {\n      onChange(null);\n    }\n  };\n  \n  const handleRadiusChange = (event, newValue) => {\n    setSearchRadius(newValue);\n    \n    // If we have a selected location, update the parent component with the new radius\n    if (value && typeof value === 'object' && value.name) {\n      onChange({\n        ...value,\n        radius: newValue\n      });\n    }\n    \n    // If onRadiusChange callback is provided, call it\n    if (onRadiusChange) {\n      onRadiusChange(newValue);\n    }\n  };\n\n  // Initialize inputValue from value prop if it exists\n  useEffect(() => {\n    if (value && typeof value === 'object' && value.name) {\n      setInputValue(value.name);\n      if (value.radius) {\n        setSearchRadius(value.radius);\n      }\n    } else if (typeof value === 'string') {\n      setInputValue(value);\n    }\n  }, [value]);\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Autocomplete\n          id=\"location-autocomplete\"\n          options={options}\n          getOptionLabel={(option) => typeof option === 'string' ? option : option.mainText}\n          filterOptions={(x) => x} // Disable built-in filtering\n          autoComplete\n          includeInputInList\n          filterSelectedOptions\n          value={value && typeof value === 'object' ? value : null}\n          onChange={handleOptionSelect}\n          inputValue={inputValue}\n          onInputChange={handleInputChange}\n          loading={loading}\n          noOptionsText=\"No locations found\"\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label={placeholder}\n              fullWidth\n              InputProps={{\n                ...params.InputProps,\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LocationOnIcon sx={{ color: '#FFD700' }} />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <React.Fragment>\n                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                    {params.InputProps.endAdornment}\n                  </React.Fragment>\n                ),\n                sx: {\n                  color: 'white',\n                  backgroundColor: 'rgba(255, 255, 255, 0.08)',\n                  '& .MuiOutlinedInput-notchedOutline': {\n                    borderColor: 'rgba(255, 215, 0, 0.5)',\n                    borderWidth: '2px'\n                  },\n                  '&:hover .MuiOutlinedInput-notchedOutline': {\n                    borderColor: 'rgba(255, 215, 0, 0.8)'\n                  },\n                  '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                    borderColor: '#FFD700',\n                    borderWidth: '2px'\n                  }\n                }\n              }}\n              InputLabelProps={{\n                sx: { color: '#FFD700', fontWeight: 500 }\n              }}\n            />\n          )}\n          renderOption={(props, option) => (\n            <li {...props}>\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <Box\n                    component={LocationOnIcon}\n                    sx={{ color: 'text.secondary', mr: 2 }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <Typography variant=\"body1\" color=\"text.primary\">\n                    {option.mainText}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {option.secondaryText}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </li>\n          )}\n        />\n      </Grid>\n      \n      {/* Radius slider */}\n      <Grid item xs={12}>\n        <Typography id=\"radius-slider\" gutterBottom sx={{ color: '#FFD700', fontWeight: 500 }}>\n          Search Radius: {searchRadius} km\n        </Typography>\n        <Slider\n          value={searchRadius}\n          onChange={handleRadiusChange}\n          aria-labelledby=\"radius-slider\"\n          valueLabelDisplay=\"auto\"\n          step={5}\n          marks\n          min={5}\n          max={50}\n          sx={{\n            color: '#FFD700',\n            '& .MuiSlider-thumb': {\n              backgroundColor: '#FFD700',\n              '&:hover, &.Mui-focusVisible': {\n                boxShadow: '0px 0px 0px 8px rgba(255, 215, 0, 0.16)'\n              }\n            },\n            '& .MuiSlider-track': {\n              backgroundColor: '#FFD700'\n            },\n            '& .MuiSlider-rail': {\n              backgroundColor: 'rgba(255, 215, 0, 0.3)'\n            },\n            '& .MuiSlider-mark': {\n              backgroundColor: 'rgba(255, 215, 0, 0.5)'\n            },\n            '& .MuiSlider-valueLabel': {\n              backgroundColor: '#2C5530',\n              color: '#FFD700'\n            }\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/RecentlyViewedJobs.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRecentJobs'. Either include it or remove the dependency array.","line":11,"column":6,"nodeType":"ArrayExpression","endLine":11,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadRecentJobs]","fix":{"range":[369,371],"text":"[loadRecentJobs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { FaClock, FaMapMarkerAlt, FaBuilding } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\n\nconst RecentlyViewedJobs = ({ className = '', limit = 5 }) => {\n  const [recentJobs, setRecentJobs] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    loadRecentJobs();\n  }, []);\n\n  const loadRecentJobs = () => {\n    try {\n      const recent = JSON.parse(localStorage.getItem('recentlyViewedJobs') || '[]');\n      setRecentJobs(recent.slice(0, limit));\n    } catch (error) {\n      console.error('Error loading recent jobs:', error);\n      setRecentJobs([]);\n    }\n  };\n\n  const handleJobClick = (job) => {\n    navigate(`/jobs/${job.id}`);\n  };\n\n  const clearRecentJobs = () => {\n    localStorage.removeItem('recentlyViewedJobs');\n    setRecentJobs([]);\n  };\n\n  if (recentJobs.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 p-4 ${className}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n          <FaClock className=\"w-5 h-5 text-gray-500\" />\n          Recently Viewed\n        </h3>\n        <button\n          onClick={clearRecentJobs}\n          className=\"text-sm text-gray-500 hover:text-gray-700 underline\"\n        >\n          Clear\n        </button>\n      </div>\n\n      <div className=\"space-y-3\">\n        {recentJobs.map((job, index) => (\n          <div\n            key={`${job.id}-${index}`}\n            onClick={() => handleJobClick(job)}\n            className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-100 hover:border-gray-300 hover:bg-gray-50 cursor-pointer transition-all\"\n          >\n            {/* Company Logo */}\n            <div className=\"flex-shrink-0\">\n              {job.company?.logoUrl ? (\n                <img\n                  src={job.company.logoUrl}\n                  alt={`${job.company.name} logo`}\n                  className=\"w-10 h-10 rounded-lg object-cover\"\n                />\n              ) : (\n                <div className=\"w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center\">\n                  <FaBuilding className=\"w-5 h-5 text-gray-400\" />\n                </div>\n              )}\n            </div>\n\n            {/* Job Details */}\n            <div className=\"flex-1 min-w-0\">\n              <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                {job.title}\n              </h4>\n              <p className=\"text-sm text-gray-600 truncate\">\n                {job.company?.name || 'Company'}\n              </p>\n              <div className=\"flex items-center gap-4 mt-1 text-xs text-gray-500\">\n                {job.location && (\n                  <span className=\"flex items-center gap-1\">\n                    <FaMapMarkerAlt className=\"w-3 h-3\" />\n                    {job.location}\n                  </span>\n                )}\n                {job.type && (\n                  <span className=\"capitalize\">\n                    {job.type.replace('_', ' ').toLowerCase()}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* View Time */}\n            <div className=\"flex-shrink-0 text-xs text-gray-400\">\n              {job.viewedAt && (\n                <span>{getTimeAgo(job.viewedAt)}</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Utility function to track job views\nexport const trackJobView = (job) => {\n  try {\n    const recentJobs = JSON.parse(localStorage.getItem('recentlyViewedJobs') || '[]');\n    \n    // Remove existing entry for this job if it exists\n    const filteredJobs = recentJobs.filter(item => item.id !== job.id);\n    \n    // Add current job to the beginning with timestamp\n    const updatedJobs = [\n      {\n        ...job,\n        viewedAt: new Date().toISOString()\n      },\n      ...filteredJobs\n    ].slice(0, 10); // Keep only last 10 jobs\n    \n    localStorage.setItem('recentlyViewedJobs', JSON.stringify(updatedJobs));\n  } catch (error) {\n    console.error('Error tracking job view:', error);\n  }\n};\n\n// Helper function to format time ago\nconst getTimeAgo = (dateString) => {\n  const now = new Date();\n  const viewed = new Date(dateString);\n  const diffInMinutes = Math.floor((now - viewed) / (1000 * 60));\n  \n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  return viewed.toLocaleDateString();\n};\n\nexport default RecentlyViewedJobs;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/SalaryDisplay.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/SalaryRangeAutocomplete.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/SalaryRangeInput.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/Seo.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/SkillsAutocomplete.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":null},"fix":{"range":[431,455],"text":""},"desc":"Remove the console.null()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateSkillMatch' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":98,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Chip,\n  Box,\n  Typography,\n  CircularProgress,\n  Paper\n} from '@mui/material';\nimport CodeIcon from '@mui/icons-material/Code';\nimport axios from 'axios';\nimport { buildApiUrl } from '../../config';\n\n// Function to log only in development environment\nconst logDev = (level, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console[level](...args);\n  }\n};\n\n// Common tech skills and frameworks\nconst commonSkills = [\n  // Programming Languages\n  'JavaScript', 'Python', 'Java', 'C++', 'Ruby', 'PHP', 'Swift', 'Kotlin', 'Go',\n  // Frontend\n  'React', 'Vue.js', 'Angular', 'HTML5', 'CSS3', 'TypeScript', 'Next.js', 'Gatsby',\n  // Backend\n  'Node.js', 'Django', 'Ruby on Rails', 'Spring Boot', 'Express.js', 'FastAPI',\n  // Database\n  'MongoDB', 'PostgreSQL', 'MySQL', 'Redis', 'Elasticsearch',\n  // Cloud & DevOps\n  'AWS', 'Azure', 'Google Cloud', 'Docker', 'Kubernetes', 'Jenkins', 'GitLab CI',\n  // Mobile\n  'React Native', 'Flutter', 'iOS', 'Android',\n  // Other\n  'Git', 'REST API', 'GraphQL', 'Machine Learning', 'AI', 'Data Science',\n  // Soft Skills\n  'Project Management', 'Team Leadership', 'Agile', 'Scrum', 'Communication',\n  // Jamaican-specific skills\n  'Caribbean Tourism', 'Hospitality Management', 'Jamaican Accounting Standards',\n  'Jamaican Tax Law', 'Jamaican Business Law', 'Caribbean Marketing',\n  'Patois', 'Cultural Tourism', 'Caribbean Cuisine', 'Reggae Production',\n  'Jamaican Agriculture', 'Caribbean Logistics', 'Island Sustainability',\n  'Tropical Agriculture', 'Caribbean Healthcare', 'Jamaican Education System'\n];\n\nexport const SkillsAutocomplete = ({\n  value = [],\n  onChange,\n  label = 'Skills',\n  placeholder = 'Select skills',\n  multiple = true,\n  freeSolo = false,\n  required = false,\n  helperText = '',\n  error = false,\n  openOnFocus = true\n}) => {\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  \n  // Fetch skills from API or use common skills\n  useEffect(() => {\n    const fetchSkills = async () => {\n      try {\n        setLoading(true);\n        // Try to fetch from API first\n        // Use correct API prefix to avoid 404\n        const response = await axios.get(buildApiUrl('/api/skills'));\n        if (response.data && Array.isArray(response.data)) {\n          setOptions(response.data.map(skill => typeof skill === 'string' ? skill : skill.name));\n        }\n      } catch (error) {\n        // Fall back to common skills if API fails\n        logDev('debug', 'Using default skills list');\n        setOptions(commonSkills);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchSkills();\n  }, []);\n  \n  // Filter options based on input\n  const getFilteredOptions = () => {\n    if (!inputValue) return options;\n    \n    return options.filter(option => {\n      const skillName = typeof option === 'string' ? option : option.name;\n      return skillName.toLowerCase().includes(inputValue.toLowerCase());\n    });\n  };\n  \n  // Calculate skill match score (for future use in job matching)\n  const calculateSkillMatch = (jobSkills, userSkills) => {\n    if (!jobSkills || !userSkills || jobSkills.length === 0 || userSkills.length === 0) {\n      return 0;\n    }\n    \n    const matchedSkills = jobSkills.filter(skill => \n      userSkills.some(userSkill => \n        userSkill.toLowerCase() === skill.toLowerCase()\n      )\n    );\n    \n    return (matchedSkills.length / jobSkills.length) * 100;\n  };\n\n  return (\n    <Autocomplete\n      multiple={multiple}\n      freeSolo={freeSolo}\n      openOnFocus={openOnFocus}\n      autoHighlight\n      options={getFilteredOptions()}\n      value={value}\n      onChange={(event, newValue) => {\n        onChange(newValue);\n      }}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          placeholder={placeholder}\n          required={required}\n          error={error}\n          helperText={helperText}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <>\n                {loading ? <CircularProgress color=\"inherit\" size={20} sx={{ mr: 1 }} /> : <CodeIcon sx={{ mr: 1, color: '#FFD700' }} />}\n                {params.InputProps.startAdornment}\n              </>\n            ),\n            sx: {\n              color: 'white',\n              backgroundColor: 'rgba(255, 255, 255, 0.08)',\n              '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.5)',\n                borderWidth: '2px'\n              },\n              '&:hover .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'rgba(255, 215, 0, 0.8)'\n              },\n              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                borderColor: '#FFD700',\n                borderWidth: '2px'\n              }\n            }\n          }}\n          InputLabelProps={{\n            sx: { color: '#FFD700', fontWeight: 500 }\n          }}\n          FormHelperTextProps={{\n            sx: { color: 'rgba(255, 215, 0, 0.7)' }\n          }}\n        />\n      )}\n      renderTags={(tagValue, getTagProps) =>\n        tagValue.map((option, index) => {\n          const tagProps = getTagProps({ index });\n          const { key, ...chipProps } = tagProps; // Extract key to pass separately\n          return (\n            <Chip\n              key={key}\n              label={option}\n              {...chipProps}\n              sx={{\n                backgroundColor: 'rgba(44, 85, 48, 0.8)',\n                color: '#FFD700',\n                fontWeight: 500,\n                border: '1px solid rgba(255, 215, 0, 0.5)',\n                '& .MuiChip-deleteIcon': {\n                  color: '#FFD700',\n                  '&:hover': {\n                    color: '#FFFFFF'\n                  }\n                }\n              }}\n            />\n          );\n        })\n      }\n      renderOption={(props, option) => (\n        <li {...props}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <CodeIcon sx={{ mr: 1, fontSize: 20, color: '#FFD700' }} />\n            <Typography variant=\"body2\" sx={{ color: '#FFFFFF' }}>{typeof option === 'string' ? option : option.name}</Typography>\n          </Box>\n        </li>\n      )}\n      PaperComponent={(props) => (\n        <Paper \n          elevation={3} \n          {...props} \n          sx={{ \n            ...props.sx,\n            borderRadius: 2,\n            backgroundColor: 'rgba(20, 20, 20, 0.95)',\n            border: '1px solid rgba(255, 215, 0, 0.3)',\n            maxHeight: '300px',\n            overflowY: 'auto',\n            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n          }} \n        />\n      )}\n      filterOptions={(options, params) => {\n        const filtered = options.filter(option => {\n          const skillName = typeof option === 'string' ? option : option.name;\n          return skillName.toLowerCase().includes(params.inputValue.toLowerCase());\n        });\n        \n        // Add the current input as an option if it's not in the list\n        if (params.inputValue !== '' && freeSolo && !filtered.some(option => {\n          const skillName = typeof option === 'string' ? option : option.name;\n          return skillName.toLowerCase() === params.inputValue.toLowerCase();\n        })) {\n          filtered.push(params.inputValue);\n        }\n        \n        return filtered;\n      }}\n    />\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/common/ThemeToggle.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'themeMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { IconButton, Tooltip, useTheme as useMuiTheme } from '@mui/material';\nimport { Brightness4, Brightness7 } from '@mui/icons-material';\nimport { useTheme } from '../../context/ThemeContext';\n\nconst ThemeToggle = ({ size = 'medium', showTooltip = true }) => {\n  const { themeMode, toggleTheme, isDarkMode } = useTheme();\n  const muiTheme = useMuiTheme();\n\n  const toggleButton = (\n    <IconButton\n      onClick={toggleTheme}\n      size={size}\n      sx={{\n        color: isDarkMode ? muiTheme.palette.secondary.main : muiTheme.palette.primary.main,\n        transition: 'all 0.3s ease-in-out',\n        '&:hover': {\n          backgroundColor: isDarkMode \n            ? 'rgba(255, 215, 0, 0.1)' \n            : 'rgba(0, 150, 57, 0.1)',\n          transform: 'rotate(180deg)'\n        },\n        '&:active': {\n          transform: 'rotate(180deg) scale(0.9)'\n        }\n      }}\n      aria-label={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}\n    >\n      {isDarkMode ? (\n        <Brightness7 sx={{ fontSize: size === 'small' ? 20 : size === 'large' ? 32 : 24 }} />\n      ) : (\n        <Brightness4 sx={{ fontSize: size === 'small' ? 20 : size === 'large' ? 32 : 24 }} />\n      )}\n    </IconButton>\n  );\n\n  if (showTooltip) {\n    return (\n      <Tooltip \n        title={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}\n        placement=\"bottom\"\n        arrow\n      >\n        {toggleButton}\n      </Tooltip>\n    );\n  }\n\n  return toggleButton;\n};\n\nexport default ThemeToggle;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/ApplicationsList.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":25,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircleIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":29,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'CancelIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":30,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'PersonIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":32,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":52,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":49}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Typography,\n  Chip,\n  Button,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  styled,\n  Fade,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Avatar,\n  Tooltip,\n  CircularProgress,\n  TextField,\n  Select,\n  FormControl,\n  InputLabel\n} from '@mui/material';\n\n// Icons\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport EmailIcon from '@mui/icons-material/Email';\nimport PersonIcon from '@mui/icons-material/Person';\nimport WorkIcon from '@mui/icons-material/Work';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport { logError } from '../../utils/loggingUtils';\nimport api from '../../utils/axiosConfig';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  backdropFilter: 'blur(10px)',\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  borderRadius: theme.shape.borderRadius,\n  marginBottom: theme.spacing(2),\n  transition: 'transform 0.2s ease-in-out',\n  '&:hover': {\n    transform: 'translateY(-2px)'\n  }\n}));\n\nconst StatusChip = styled(Chip)(({ status, theme }) => {\n  const statusColors = {\n    PENDING: { bg: 'rgba(255, 152, 0, 0.1)', color: '#FFA726' },\n    REVIEWING: { bg: 'rgba(33, 150, 243, 0.1)', color: '#42A5F5' },\n    ACCEPTED: { bg: 'rgba(76, 175, 80, 0.1)', color: '#81C784' },\n    REJECTED: { bg: 'rgba(244, 67, 54, 0.1)', color: '#E57373' },\n    INTERVIEWING: { bg: 'rgba(156, 39, 176, 0.1)', color: '#BA68C8' }\n  };\n\n  return {\n    backgroundColor: statusColors[status]?.bg || 'rgba(158, 158, 158, 0.1)',\n    color: statusColors[status]?.color || '#9E9E9E',\n    border: `1px solid ${statusColors[status]?.color || '#9E9E9E'}`,\n    '& .MuiChip-label': {\n      fontWeight: 500\n    }\n  };\n});\n\nconst ApplicationsList = ({ jobListings }) => {\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedApplication, setSelectedApplication] = useState(null);\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [activeApplicationId, setActiveApplicationId] = useState(null);\n  const [filterJob, setFilterJob] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [notes, setNotes] = useState('');\n\n  useEffect(() => {\n    fetchApplications();\n  }, []);\n\n  const fetchApplications = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/api/employer/applications');\n      const appsArray = Array.isArray(response.data)\n        ? response.data\n        : Array.isArray(response.data?.applications)\n          ? response.data.applications\n          : [];\n      setApplications(appsArray);\n      setError(null);\n    } catch (err) {\n      logError('Error fetching applications:', err);\n      setError('Failed to load applications. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStatusChange = async (applicationId, newStatus) => {\n    try {\n      await api.put(`/api/employer/applications/${applicationId}/status`, { status: newStatus });\n      setApplications(applications.map(app =>\n        app.id === applicationId ? { ...app, status: newStatus } : app\n      ));\n      handleMenuClose();\n    } catch (err) {\n      logError('Error updating application status:', err);\n      setError('Failed to update application status. Please try again.');\n    }\n  };\n\n  const handleNotesUpdate = async (applicationId) => {\n    try {\n      await api.put(`/api/employer/applications/${applicationId}/notes`, { notes });\n      setApplications(applications.map(app =>\n        app.id === applicationId ? { ...app, notes } : app\n      ));\n      setDetailsOpen(false);\n    } catch (err) {\n      logError('Error updating application notes:', err);\n      setError('Failed to update notes. Please try again.');\n    }\n  };\n\n  const handleMenuClick = (event, application) => {\n    setMenuAnchorEl(event.currentTarget);\n    setActiveApplicationId(application.id);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setActiveApplicationId(null);\n  };\n\n  const handleDetailsOpen = (application) => {\n    setSelectedApplication(application);\n    setNotes(application.notes || '');\n    setDetailsOpen(true);\n  };\n\n  const filteredApplications = applications.filter(app => {\n    const jobMatch = filterJob === 'all' || app.jobId === filterJob;\n    const statusMatch = filterStatus === 'all' || app.status === filterStatus;\n    return jobMatch && statusMatch;\n  });\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>\n        <CircularProgress sx={{ color: '#FFD700' }} />\n      </Box>\n    );\n  }\n\n  return (\n    <Fade in={true}>\n      <Box>\n        <Box sx={{ mb: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Filter by Job</InputLabel>\n                <Select\n                  value={filterJob}\n                  onChange={(e) => setFilterJob(e.target.value)}\n                  sx={{ color: '#FFFFFF' }}\n                >\n                  <MenuItem value=\"all\">All Jobs</MenuItem>\n                  {jobListings.map(job => (\n                    <MenuItem key={job.id} value={job.id}>{job.title}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Filter by Status</InputLabel>\n                <Select\n                  value={filterStatus}\n                  onChange={(e) => setFilterStatus(e.target.value)}\n                  sx={{ color: '#FFFFFF' }}\n                >\n                  <MenuItem value=\"all\">All Statuses</MenuItem>\n                  <MenuItem value=\"PENDING\">Pending</MenuItem>\n                  <MenuItem value=\"REVIEWING\">Reviewing</MenuItem>\n                  <MenuItem value=\"INTERVIEWING\">Interviewing</MenuItem>\n                  <MenuItem value=\"ACCEPTED\">Accepted</MenuItem>\n                  <MenuItem value=\"REJECTED\">Rejected</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </Box>\n\n        {error && (\n          <Typography color=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Typography>\n        )}\n\n        {filteredApplications.length === 0 ? (\n          <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', textAlign: 'center', mt: 4 }}>\n            No applications found matching your filters\n          </Typography>\n        ) : (\n          filteredApplications.map(application => (\n            <StyledPaper key={application.id}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                  <Avatar \n                    src={application.candidate?.avatar || ''}\n                    alt={(application.user ? `${application.user.firstName || ''} ${application.user.lastName || ''}`.trim() : application.candidate?.name) || 'Candidate'}\n                    sx={{ width: 60, height: 60 }}\n                  />\n                </Grid>\n                <Grid item xs>\n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 1 }}>\n                    {(application.user ? `${application.user.firstName || ''} ${application.user.lastName || ''}`.trim() : application.candidate?.name) || 'Unknown Candidate'}\n                  </Typography>\n                  <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 2 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                      <EmailIcon sx={{ color: 'rgba(255, 215, 0, 0.7)', fontSize: 18 }} />\n                      <Typography variant=\"body2\" sx={{ color: '#FFFFFF' }}>\n                        {application.candidate?.email || 'N/A'}\n                      </Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                      <WorkIcon sx={{ color: 'rgba(255, 215, 0, 0.7)', fontSize: 18 }} />\n                      <Typography variant=\"body2\" sx={{ color: '#FFFFFF' }}>\n                        {jobListings.find(job => job.id === application.jobId)?.title || 'Unknown Position'}\n                      </Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                      <CalendarTodayIcon sx={{ color: 'rgba(255, 215, 0, 0.7)', fontSize: 18 }} />\n                      <Typography variant=\"body2\" sx={{ color: '#FFFFFF' }}>\n                        {(() => { const d = application.appliedDate || application.createdAt || application.applied_at; return d ? `Applied ${new Date(d).toLocaleDateString()}` : 'Applied –'; })()}\n                      </Typography>\n                    </Box>\n                  </Box>\n                  <StatusChip\n                    status={application.status}\n                    label={application.status}\n                  />\n                </Grid>\n                <Grid item>\n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={() => handleDetailsOpen(application)}\n                      sx={{\n                        borderColor: 'rgba(255, 215, 0, 0.3)',\n                        color: '#FFD700',\n                        '&:hover': {\n                          borderColor: '#FFD700',\n                          backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                        }\n                      }}\n                    >\n                      View Details\n                    </Button>\n                    <IconButton\n                      onClick={(e) => handleMenuClick(e, application)}\n                      sx={{ color: '#FFD700' }}\n                    >\n                      <MoreVertIcon />\n                    </IconButton>\n                  </Box>\n                </Grid>\n              </Grid>\n            </StyledPaper>\n          ))\n        )}\n\n        <Menu\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onClose={handleMenuClose}\n          PaperProps={{\n            sx: {\n              backgroundColor: '#1A1A1A',\n              border: '1px solid rgba(255, 215, 0, 0.3)'\n            }\n          }}\n        >\n          <MenuItem onClick={() => handleStatusChange(activeApplicationId, 'REVIEWING')}>\n            <Typography sx={{ color: '#42A5F5' }}>Mark as Reviewing</Typography>\n          </MenuItem>\n          <MenuItem onClick={() => handleStatusChange(activeApplicationId, 'INTERVIEWING')}>\n            <Typography sx={{ color: '#BA68C8' }}>Set to Interviewing</Typography>\n          </MenuItem>\n          <MenuItem onClick={() => handleStatusChange(activeApplicationId, 'ACCEPTED')}>\n            <Typography sx={{ color: '#81C784' }}>Accept Application</Typography>\n          </MenuItem>\n          <MenuItem onClick={() => handleStatusChange(activeApplicationId, 'REJECTED')}>\n            <Typography sx={{ color: '#E57373' }}>Reject Application</Typography>\n          </MenuItem>\n        </Menu>\n\n        <Dialog\n          open={detailsOpen}\n          onClose={() => setDetailsOpen(false)}\n          maxWidth=\"md\"\n          fullWidth\n          PaperProps={{\n            sx: {\n              backgroundColor: '#1A1A1A',\n              border: '1px solid rgba(255, 215, 0, 0.3)'\n            }\n          }}\n        >\n          {selectedApplication && (\n            <>\n              <DialogTitle sx={{ color: '#FFD700' }}>\n                Application Details\n              </DialogTitle>\n              <DialogContent>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                    Candidate Information\n                  </Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                        <strong>Name:</strong> {(selectedApplication.user ? `${selectedApplication.user.firstName || ''} ${selectedApplication.user.lastName || ''}`.trim() : selectedApplication.candidate?.name) || 'Unknown Candidate'}\n                      </Typography>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                        <strong>Email:</strong> {selectedApplication.user?.email || selectedApplication.candidate?.email || 'N/A'}\n                      </Typography>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                        <strong>Phone:</strong> {selectedApplication.user?.phoneNumber || selectedApplication.candidate?.phone || 'N/A'}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                        <strong>Status:</strong> {selectedApplication.status}\n                      </Typography>\n                      <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                        {(() => { const d = selectedApplication.appliedDate || selectedApplication.createdAt || selectedApplication.applied_at; return <><strong>Applied Date:</strong> {d ? new Date(d).toLocaleDateString() : '—'}</>; })()}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Box>\n\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                    Notes\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={4}\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    sx={{\n                      '& .MuiOutlinedInput-root': {\n                        color: '#FFFFFF',\n                        '& fieldset': {\n                          borderColor: 'rgba(255, 215, 0, 0.3)'\n                        },\n                        '&:hover fieldset': {\n                          borderColor: 'rgba(255, 215, 0, 0.5)'\n                        },\n                        '&.Mui-focused fieldset': {\n                          borderColor: '#FFD700'\n                        }\n                      }\n                    }}\n                  />\n                </Box>\n              </DialogContent>\n              <DialogActions>\n                <Button\n                  onClick={() => setDetailsOpen(false)}\n                  sx={{ color: 'rgba(255, 255, 255, 0.7)' }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => handleNotesUpdate(selectedApplication.id)}\n                  variant=\"contained\"\n                  sx={{\n                    backgroundColor: '#FFD700',\n                    color: '#000000',\n                    '&:hover': {\n                      backgroundColor: '#FFE44D'\n                    }\n                  }}\n                >\n                  Save Notes\n                </Button>\n              </DialogActions>\n            </>\n          )}\n        </Dialog>\n      </Box>\n    </Fade>\n  );\n};\n\nexport default ApplicationsList;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/ApplicationsReview.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'sanitizeForLogging' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":38,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'statusUpdateLoading' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchApplications'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchApplications, jobId]","fix":{"range":[1384,1391],"text":"[fetchApplications, jobId]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleStatusChange' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":122,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'statusOptions' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":197,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":22}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Button,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  Fade,\n  Tooltip,\n  IconButton,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField\n} from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport EmailIcon from '@mui/icons-material/Email';\nimport { format } from 'date-fns';\nimport axios from 'axios';\nimport { buildApiUrl } from '../../config';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\n\nconst ApplicationsReview = ({ jobId }) => {\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [selectedApplication, setSelectedApplication] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [statusUpdateLoading, setStatusUpdateLoading] = useState(false);\n  const [feedbackDialogOpen, setFeedbackDialogOpen] = useState(false);\n  const [feedback, setFeedback] = useState('');\n\n  useEffect(() => {\n    fetchApplications();\n  }, [jobId]);\n\n  const fetchApplications = async () => {\n    setLoading(true);\n    const endpoint = jobId \n      ? buildApiUrl(`/jobs/${jobId}/applications`) \n      : buildApiUrl('/applications/employer');\n    \n    try {\n      const response = await axios.get(endpoint);\n      setApplications(response.data);\n      logDev('debug', 'Applications fetched successfully', { \n        count: response.data?.length || 0,\n        forJobId: jobId || 'all'\n      });\n    } catch (err) {\n      logError('Error fetching applications', err, {\n        module: 'ApplicationsReview',\n        endpoint: endpoint,\n        jobId: jobId || 'all',\n        status: err.response?.status\n      });\n      setError('Failed to load applications. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleViewDetails = (application) => {\n    setSelectedApplication(application);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleDownloadResume = async (applicationId, resumeUrl) => {\n    try {\n      const response = await axios.get(resumeUrl, {\n        responseType: 'blob'\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `resume-${applicationId}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      \n      link.parentNode.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      logDev('debug', 'Resume downloaded successfully', { applicationId });\n    } catch (err) {\n      logError('Error downloading resume', err, {\n        module: 'ApplicationsReview',\n        function: 'handleDownloadResume',\n        applicationId,\n        status: err.response?.status\n      });\n      setError('Failed to download resume. Please try again.');\n    }\n  };\n\n  const handleStatusChange = async (applicationId, newStatus) => {\n    setStatusUpdateLoading(true);\n    try {\n      await axios.patch(buildApiUrl(`/applications/${applicationId}/status`), {\n        status: newStatus\n      });\n      \n      setApplications(prevApplications => \n        prevApplications.map(app => \n          app.id === applicationId ? { ...app, status: newStatus } : app\n        )\n      );\n      \n      if (selectedApplication && selectedApplication.id === applicationId) {\n        setSelectedApplication({ ...selectedApplication, status: newStatus });\n      }\n      logDev('debug', 'Application status updated', {\n        applicationId,\n        oldStatus: selectedApplication?.status,\n        newStatus\n      });\n    } catch (err) {\n      logError('Error updating application status', err, {\n        module: 'ApplicationsReview',\n        function: 'handleStatusChange',\n        applicationId,\n        newStatus,\n        oldStatus: selectedApplication?.status,\n        status: err.response?.status\n      });\n      setError('Failed to update application status. Please try again.');\n    } finally {\n      setStatusUpdateLoading(false);\n    }\n  };\n\n  const handleSendFeedback = async () => {\n    if (!feedback.trim() || !selectedApplication) return;\n    \n    try {\n      await axios.post(buildApiUrl(`/applications/${selectedApplication.id}/feedback`), {\n        message: feedback\n      });\n      \n      setFeedback('');\n      setFeedbackDialogOpen(false);\n      logDev('debug', 'Feedback sent successfully', {\n        applicationId: selectedApplication.id,\n        recipientId: selectedApplication.user?.id\n      });\n    } catch (err) {\n      logError('Error sending feedback', err, {\n        module: 'ApplicationsReview',\n        function: 'handleSendFeedback',\n        applicationId: selectedApplication?.id,\n        recipientId: selectedApplication?.user?.id,\n        messageLength: feedback?.length,\n        status: err.response?.status\n      });\n      setError('Failed to send feedback. Please try again.');\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return format(new Date(dateString), 'MMM dd, yyyy');\n  };\n\n  const filteredApplications = applications.filter(app => {\n    if (tabValue === 0) return true; // All applications\n    if (tabValue === 1) return ['APPLIED', 'REVIEWING'].includes(app.status); // New\n    if (tabValue === 2) return ['INTERVIEW'].includes(app.status); // In Progress\n    if (tabValue === 3) return ['OFFERED', 'REJECTED', 'WITHDRAWN'].includes(app.status); // Closed\n    return true;\n  });\n\n  const statusOptions = [\n    { value: 'APPLIED', label: 'Applied' },\n    { value: 'REVIEWING', label: 'Reviewing' },\n    { value: 'INTERVIEW', label: 'Interview' },\n    { value: 'OFFERED', label: 'Offered' },\n    { value: 'REJECTED', label: 'Rejected' }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'APPLIED':\n        return { bg: '#e3f2fd', color: '#1565c0' }; // Blue\n      case 'REVIEWING':\n        return { bg: '#fff8e1', color: '#f57f17' }; // Amber\n      case 'INTERVIEW':\n        return { bg: '#e8f5e9', color: '#2e7d32' }; // Green\n      case 'OFFERED':\n        return { bg: '#f3e5f5', color: '#7b1fa2' }; // Purple\n      case 'REJECTED':\n        return { bg: '#ffebee', color: '#c62828' }; // Red\n      case 'WITHDRAWN':\n        return { bg: '#fafafa', color: '#616161' }; // Grey\n      default:\n        return { bg: '#e0e0e0', color: '#212121' }; // Default grey\n    }\n  };\n\n  return (\n    <Fade in={true} timeout={800}>\n      <Box sx={{ width: '100%' }}>\n        <Typography \n          variant=\"h4\" \n          gutterBottom\n          sx={{ \n            fontWeight: 700, \n            color: '#2C5530',\n            mb: 3,\n            position: 'relative',\n            '&::after': {\n              content: '\"\"',\n              position: 'absolute',\n              bottom: '-10px',\n              left: 0,\n              width: '80px',\n              height: '4px',\n              background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n              borderRadius: '2px'\n            }\n          }}\n        >\n          {jobId ? 'Applications for This Job' : 'All Applications'}\n        </Typography>\n\n        {error && <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>}\n\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n          <Tabs \n            value={tabValue} \n            onChange={handleTabChange}\n            sx={{\n              '& .MuiTab-root': {\n                textTransform: 'none',\n                fontWeight: 600,\n                fontSize: '1rem'\n              },\n              '& .Mui-selected': {\n                color: '#2C5530'\n              },\n              '& .MuiTabs-indicator': {\n                backgroundColor: '#FFD700',\n                height: 3\n              }\n            }}\n          >\n            <Tab label=\"All Applications\" />\n            <Tab label=\"New\" />\n            <Tab label=\"In Progress\" />\n            <Tab label=\"Closed\" />\n          </Tabs>\n        </Box>\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress sx={{ color: '#2C5530' }} />\n          </Box>\n        ) : filteredApplications.length === 0 ? (\n          <Paper \n            elevation={1} \n            sx={{ \n              p: 4, \n              textAlign: 'center',\n              borderRadius: 2,\n              backgroundColor: '#f9f9f9'\n            }}\n          >\n            <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n              No applications found\n            </Typography>\n            <Typography variant=\"body1\" color=\"textSecondary\">\n              {tabValue === 0 \n                ? \"You don't have any applications yet.\" \n                : \"You don't have any applications in this category.\"}\n            </Typography>\n          </Paper>\n        ) : (\n          <TableContainer component={Paper} sx={{ borderRadius: 2, boxShadow: 2 }}>\n            <Table>\n              <TableHead sx={{ backgroundColor: '#f5f5f5' }}>\n                <TableRow>\n                  <TableCell sx={{ fontWeight: 700 }}>Applicant</TableCell>\n                  {!jobId && <TableCell sx={{ fontWeight: 700 }}>Job Title</TableCell>}\n                  <TableCell sx={{ fontWeight: 700 }}>Applied On</TableCell>\n                  <TableCell sx={{ fontWeight: 700 }}>Status</TableCell>\n                  <TableCell sx={{ fontWeight: 700 }}>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredApplications.map((application) => {\n                  const statusStyle = getStatusColor(application.status);\n                  return (\n                    <TableRow key={application.id} hover>\n                      <TableCell>\n                        {application.user?.firstName} {application.user?.lastName}\n                      </TableCell>\n                      {!jobId && <TableCell>{application.job.title}</TableCell>}\n                      <TableCell>{formatDate(application.createdAt)}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={application.status.replace('_', ' ')} \n                          sx={{ \n                            backgroundColor: statusStyle.bg,\n                            color: statusStyle.color,\n                            fontWeight: 600\n                          }} \n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', gap: 1 }}>\n                          <Tooltip title=\"View Details\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleViewDetails(application)}\n                              sx={{ color: '#2C5530' }}\n                            >\n                              <VisibilityIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Download Resume\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleDownloadResume(application.id, application.resumeUrl)}\n                              sx={{ color: '#2C5530' }}\n                            >\n                              <DownloadIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Contact Applicant\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => {\n                                setSelectedApplication(application);\n                                setFeedbackDialogOpen(true);\n                              }}\n                              sx={{ color: '#2C5530' }}\n                            >\n                              <EmailIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n\n        {/* Application Details Dialog */}\n        <Dialog\n          open={openDialog}\n          onClose={handleCloseDialog}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          {selectedApplication && (\n            <>\n              <DialogTitle sx={{ \n                fontWeight: 700, \n                color: '#2C5530',\n                borderBottom: '1px solid #e0e0e0',\n                pb: 2\n              }}>\n                Application Details\n              </DialogTitle>\n              <DialogContent sx={{ mt: 2 }}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Applicant</Typography>\n                    <Typography variant=\"body1\" sx={{ fontWeight: 600, mb: 2 }}>\n                      {selectedApplication.user?.firstName} {selectedApplication.user?.lastName}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">Email</Typography>\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                      {selectedApplication.user?.email}\n                    </Typography>\n                  </Grid>\n                  {/* Add more application details */}\n                </Grid>\n              </DialogContent>\n              <DialogActions sx={{ p: 2, borderTop: '1px solid #e0e0e0' }}>\n                <Button \n                  onClick={handleCloseDialog}\n                  sx={{ color: '#2C5530' }}\n                >\n                  Close\n                </Button>\n                <Button \n                  variant=\"contained\"\n                  onClick={() => handleDownloadResume(selectedApplication.id, selectedApplication.resumeUrl)}\n                  startIcon={<DownloadIcon />}\n                  sx={{\n                    background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                    color: '#000',\n                    '&:hover': {\n                      background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n                    }\n                  }}\n                >\n                  Download Resume\n                </Button>\n              </DialogActions>\n            </>\n          )}\n        </Dialog>\n\n        {/* Feedback Dialog */}\n        <Dialog\n          open={feedbackDialogOpen}\n          onClose={() => setFeedbackDialogOpen(false)}\n          maxWidth=\"md\"\n          fullWidth\n        >\n          <DialogTitle sx={{ \n            fontWeight: 700, \n            color: '#2C5530',\n            borderBottom: '1px solid #e0e0e0',\n            pb: 2\n          }}>\n            Contact Applicant\n          </DialogTitle>\n          <DialogContent sx={{ mt: 2 }}>\n            {selectedApplication && (\n              <>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Send a message to {selectedApplication.user?.firstName} {selectedApplication.user?.lastName}\n                </Typography>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={6}\n                  label=\"Message\"\n                  value={feedback}\n                  onChange={(e) => setFeedback(e.target.value)}\n                  placeholder=\"Write your message here...\"\n                  sx={{ mt: 2 }}\n                />\n              </>\n            )}\n          </DialogContent>\n          <DialogActions sx={{ p: 2, borderTop: '1px solid #e0e0e0' }}>\n            <Button \n              onClick={() => setFeedbackDialogOpen(false)}\n              sx={{ color: '#2C5530' }}\n            >\n              Cancel\n            </Button>\n            <Button \n              variant=\"contained\"\n              onClick={handleSendFeedback}\n              disabled={!feedback.trim()}\n              sx={{\n                background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                color: '#000',\n                '&:hover': {\n                  background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n                }\n              }}\n            >\n              Send Message\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Fade>\n  );\n};\n\nexport default ApplicationsReview;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/CompanyDescriptionBuilder.js","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [onChange, sections]","fix":{"range":[3741,3751],"text":"[onChange, sections]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/CompanyProfileSetup.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":66,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  styled,\n  CircularProgress,\n  Alert,\n  useTheme,\n  useMediaQuery,\n  MenuItem\n} from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { JamaicaLocationAutocomplete } from '../common/JamaicaLocationAutocomplete';\nimport api from '../../utils/axiosConfig';\nimport { logError } from '../../utils/loggingUtils';\nimport CompanyDescriptionBuilder from './CompanyDescriptionBuilder';\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  marginBottom: theme.spacing(2),\n  '& .MuiOutlinedInput-root': {\n    color: '#FFFFFF',\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.3)'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: 'rgba(255, 215, 0, 0.7)'\n  }\n}));\n\nconst ImagePreview = styled(Box)(({ theme }) => ({\n  width: '100%',\n  height: 200,\n  borderRadius: theme.shape.borderRadius,\n  border: '2px dashed rgba(255, 215, 0, 0.3)',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  marginBottom: theme.spacing(2),\n  position: 'relative',\n  overflow: 'hidden',\n  '&:hover': {\n    border: '2px dashed #FFD700',\n    '& .MuiBox-root': {\n      opacity: 1\n    }\n  }\n}));\n\nconst UploadOverlay = styled(Box)(({ theme }) => ({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  opacity: 0,\n  transition: 'opacity 0.2s ease-in-out'\n}));\n\n// Utility function to safely format location values\nconst formatLocationValue = (location) => {\n  if (!location) {\n    return null;\n  }\n\n  try {\n    // If it's already a properly formatted object, return it\n    if (location.mainText && location.name) {\n      return location;\n    }\n\n    // Handle string input\n    const locationStr = typeof location === 'string' ? location.trim() : '';\n    if (!locationStr) {\n      return null;\n    }\n\n    // Parse the location string\n    const parts = locationStr.split(',').map(part => part.trim()).filter(Boolean);\n    if (!parts.length) {\n      return null;\n    }\n\n    return {\n      mainText: parts[0],\n      secondaryText: parts.length > 1 ? parts.slice(1).join(', ') : 'Jamaica',\n      name: parts[0],\n      parish: parts.length > 1 ? parts[1] : 'Jamaica',\n      formattedAddress: parts.join(', ')\n    };\n  } catch (error) {\n    console.error('Error formatting location:', error);\n    return null;\n  }\n};\n\nconst CompanyProfileSetup = ({\n  open,\n  onClose,\n  initialData = null,\n  onSave,\n  loading: externalLoading = false,\n  error: externalError = null,\n  success: externalSuccess = false\n}) => {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n  const [formData, setFormData] = useState({\n    companyName: initialData?.companyName ?? initialData?.name ?? '',\n    industry: initialData?.industry || '',\n    location: typeof initialData?.location === 'string' ? initialData.location : '',\n    website: initialData?.website || '',\n    description: initialData?.description || '',\n    logoUrl: initialData?.logoUrl || null,\n    logo: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [message, setMessage] = useState({\n    type: null,\n    text: null\n  });\n  const [logoPreview, setLogoPreview] = useState(initialData?.logoUrl || null);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [imageLoading, setImageLoading] = useState({\n    logo: false\n  });\n\n  // Predefined list of industries for dropdown\n  const INDUSTRY_OPTIONS = [\n    'Technology',\n    'Manufacturing',\n    'Construction',\n    'Healthcare',\n    'Finance',\n    'Education',\n    'Hospitality',\n    'Retail',\n    'Transportation',\n    'Agriculture',\n    'Telecommunications',\n    'Energy',\n    'Media',\n    'Real Estate',\n    'Government',\n    'Legal',\n    'Non-Profit',\n    'Entertainment',\n    'Sports',\n    'Other'\n  ];\n\n  // Clear validation errors when dialog closes\n  useEffect(() => {\n    if (!open) {\n      setValidationErrors({});\n      setError(null);\n      setMessage({ type: null, text: null });\n    }\n  }, [open]);\n\n  // Handle external success/error states\n  useEffect(() => {\n    if (externalError) {\n      setMessage({\n        type: 'error',\n        text: externalError\n      });\n    } else if (externalSuccess) {\n      setMessage({\n        type: 'success',\n        text: 'Profile updated successfully!'\n      });\n    }\n  }, [externalError, externalSuccess]);\n\n  // Initialize form with data if editing, or empty if creating new\n  useEffect(() => {\n    if (initialData) {\n      setFormData({\n        companyName: initialData.companyName ?? initialData.name ?? '',\n        industry: initialData.industry || '',\n        location: typeof initialData.location === 'string' ? initialData.location : '',\n        website: initialData.website || '',\n        description: initialData.description || '',\n        logoUrl: initialData.logoUrl || null,\n        logo: null\n      });\n      setLogoPreview(initialData.logoUrl || null);\n    }\n  }, [initialData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear validation error for the field being changed\n    if (validationErrors[name]) {\n      setValidationErrors(prev => ({\n        ...prev,\n        [name]: null\n      }));\n    }\n  };\n\n  const handleLocationChange = (newLocation) => {\n    try {\n      // Handle null/empty case\n      if (!newLocation) {\n        setFormData(prev => ({ ...prev, location: '' }));\n        return;\n      }\n\n      // Build location string with all components\n      const locationParts = [\n        newLocation.name || newLocation.mainText,\n        newLocation.parish,\n        'Jamaica'\n      ].filter(Boolean);\n\n      const locationString = locationParts.join(', ');\n      \n      console.warn('Setting location:', {\n        newLocation,\n        locationString\n      });\n\n      setFormData(prev => ({\n        ...prev,\n        location: locationString\n      }));\n\n      // Clear any validation errors\n      if (validationErrors.location) {\n        setValidationErrors(prev => ({\n          ...prev,\n          location: null\n        }));\n      }\n    } catch (error) {\n      console.error('Error handling location change:', error);\n      setError('Invalid location format');\n      setFormData(prev => ({ ...prev, location: '' }));\n    }\n  };\n\n  const validateImageFile = (file) => {\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n    \n    if (!allowedTypes.includes(file.type)) {\n      return 'Only JPEG, PNG, and GIF images are allowed';\n    }\n    if (file.size > maxSize) {\n      return 'Image size should not exceed 5MB';\n    }\n    return null;\n  };\n\n  const handleImageUpload = async (event, type) => {\n    const file = event.target.files[0];\n    if (file) {\n      const validationError = validateImageFile(file);\n      if (validationError) {\n        setError(validationError);\n        return;\n      }\n\n      setImageLoading(prev => ({ ...prev, [type]: true }));\n      try {\n        const reader = new FileReader();\n        await new Promise((resolve, reject) => {\n          reader.onloadend = resolve;\n          reader.onerror = reject;\n          reader.readAsDataURL(file);\n        });\n\n        setLogoPreview(reader.result);\n        setFormData(prev => ({ \n          ...prev, \n          logo: file,\n          logoUrl: reader.result \n        }));\n      } catch (err) {\n        setError(`Failed to load ${type} image. Please try again.`);\n      } finally {\n        setImageLoading(prev => ({ ...prev, [type]: false }));\n      }\n    }\n  };\n\n  const handleRemoveImage = () => {\n    setLogoPreview(null);\n    setFormData(prev => ({ \n      ...prev, \n      logo: null,\n      logoUrl: null \n    }));\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    if (!formData.companyName?.trim()) {\n      errors.companyName = 'Company name is required';\n    }\n    if (!formData.industry?.trim()) {\n      errors.industry = 'Industry is required';\n    }\n    if (!formData.description?.trim()) {\n      errors.description = 'Company description is required';\n    }\n    if (formData.website?.trim() && !formData.website.trim().match(/^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([/\\w .-]*)*\\/?$/)) {\n      errors.website = 'Please enter a valid website URL (e.g., https://example.com)';\n    }\n    \n    // Validate location\n    try {\n      if (!formData.location) {\n        errors.location = 'Location is required';\n      } else if (typeof formData.location !== 'string') {\n        errors.location = 'Location must be a valid text value';\n      } else if (!formData.location.trim()) {\n        errors.location = 'Location cannot be empty';\n      } else {\n        // Validate the location format\n        const formattedLocation = formatLocationValue(formData.location);\n        if (!formattedLocation) {\n          errors.location = 'Invalid location format';\n        }\n      }\n    } catch (error) {\n      console.error('Error validating location:', error);\n      errors.location = 'Invalid location format';\n    }\n    \n    // Validate logo file if present\n    if (formData.logo instanceof File) {\n      const validationError = validateImageFile(formData.logo);\n      if (validationError) {\n        errors.logo = validationError;\n      }\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Clear any existing errors first\n    setError(null);\n    setValidationErrors({});\n\n    if (!validateForm()) {\n      setError('Please fix the validation errors before submitting.');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const formDataToSend = new FormData();\n      \n      // Validate and format all text fields\n      const sanitizedData = {\n        companyName: formData.companyName?.trim() || '',\n        industry: formData.industry?.trim() || '',\n        location: typeof formData.location === 'string' ? formData.location.trim() : '',\n        website: formData.website?.trim() || '',\n        description: formData.description?.trim() || ''\n      };\n      \n      // Append sanitized text fields\n      Object.entries(sanitizedData).forEach(([key, value]) => {\n        formDataToSend.append(key, value);\n      });\n\n      // Handle logo file upload - ensure it's a valid File object\n      if (formData.logo instanceof File) {\n        formDataToSend.append('logo', formData.logo);\n      }\n\n      // Use PUT if we have initialData (updating), POST if new profile\n      const method = initialData ? 'put' : 'post';\n      const response = await api[method]('/api/employer/profile', formDataToSend, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      if (response.data) {\n        console.warn(response.data);\n        // Extract company object from API response (supports both nested and flat)\n        const company = response.data.data?.company || response.data.company || response.data;\n        // Map the response data back to our form structure\n        const mappedData = {\n          companyName: company.name,\n          industry: company.industry,\n          location: company.location,\n          website: company.website,\n          description: company.description,\n          logoUrl: company.logoUrl,\n          logo: null\n        };\n        \n        setFormData(mappedData);\n        setLogoPreview(company.logoUrl);\n        \n        if (onSave) {\n          // Pass only the company object upwards for simplicity\n          onSave(company);\n        }\n        \n        // Show success message\n        setMessage({\n          type: 'success',\n          text: `Company profile ${initialData ? 'updated' : 'created'} successfully!`\n        });\n        \n        // Close dialog after a brief delay to show success message\n        const timer = setTimeout(() => {\n          handleCancel();\n        }, 1500);\n\n        // Cleanup timer if component unmounts\n        return () => clearTimeout(timer);\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (err) {\n      logError('Error updating company profile:', err);\n      setError(err.response?.data?.message || 'Failed to update company profile. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = useCallback(() => {\n    if (initialData) {\n      setFormData({\n        companyName: initialData.companyName ?? initialData.name ?? '',\n        industry: initialData.industry || '',\n        location: typeof initialData.location === 'string' ? initialData.location : '',\n        website: initialData.website || '',\n        description: initialData.description || '',\n        logoUrl: initialData.logoUrl || null,\n        logo: null\n      });\n      setLogoPreview(initialData.logoUrl || null);\n    } else {\n      setFormData({\n        companyName: '',\n        industry: '',\n        location: '',\n        website: '',\n        description: '',\n        logoUrl: null,\n        logo: null\n      });\n      setLogoPreview(null);\n    }\n    setError(null);\n    setMessage({ type: null, text: null });\n    setValidationErrors({});\n    setImageLoading({ logo: false });\n  }, [initialData]);\n\n  const handleCancel = () => {\n    resetForm();\n    onClose();\n  };\n\n  // Reset form when dialog opens with initial data\n  useEffect(() => {\n    if (open) {\n      resetForm();\n    }\n  }, [open, resetForm]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleCancel}\n      fullScreen={fullScreen}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          backgroundColor: 'rgba(20, 20, 20, 0.95)',\n          backgroundImage: 'none',\n          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.4)',\n          border: '1px solid rgba(255, 215, 0, 0.2)'\n        }\n      }}\n    >\n      <DialogTitle sx={{ \n        color: '#FFD700',\n        fontSize: '1.5rem',\n        fontWeight: 600,\n        borderBottom: '1px solid rgba(255, 215, 0, 0.1)',\n        pb: 2\n      }}>\n        Company Profile Setup\n      </DialogTitle>\n\n      <DialogContent sx={{ p: 3 }}>\n        {message.type && (\n          <Alert \n            severity={message.type}\n            sx={{ mb: 3 }} \n            onClose={() => setMessage({ type: null, text: null })}\n          >\n            {message.text}\n          </Alert>\n        )}\n\n        {error && !message.type && (\n          <Alert \n            severity=\"error\" \n            sx={{ mb: 3 }} \n            onClose={() => setError(null)}\n          >\n            {error}\n          </Alert>\n        )}\n\n        <form id=\"company-profile-form\" onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 1 }}>\n                Company Logo\n              </Typography>\n              <ImagePreview>\n                {logoPreview ? (\n                  <>\n                    <Box\n                      component=\"img\"\n                      src={logoPreview}\n                      alt=\"Company Logo\"\n                      sx={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'contain'\n                      }}\n                    />\n                    <UploadOverlay>\n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <input\n                          accept=\"image/*\"\n                          type=\"file\"\n                          id=\"logo-upload\"\n                          hidden\n                          onChange={(e) => handleImageUpload(e, 'logo')}\n                        />\n                        <label htmlFor=\"logo-upload\">\n                          <IconButton \n                            component=\"span\" \n                            sx={{ color: '#FFD700' }}\n                            disabled={imageLoading.logo}\n                          >\n                            {imageLoading.logo ? (\n                              <CircularProgress size={24} sx={{ color: '#FFD700' }} />\n                            ) : (\n                              <CloudUploadIcon />\n                            )}\n                          </IconButton>\n                        </label>\n                        <IconButton\n                          onClick={() => handleRemoveImage()}\n                          sx={{ color: '#FFD700' }}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Box>\n                    </UploadOverlay>\n                  </>\n                ) : (\n                  <Box sx={{ textAlign: 'center' }}>\n                    <input\n                      accept=\"image/*\"\n                      type=\"file\"\n                      id=\"logo-upload\"\n                      hidden\n                      onChange={(e) => handleImageUpload(e, 'logo')}\n                    />\n                    <label htmlFor=\"logo-upload\">\n                      <IconButton component=\"span\" sx={{ color: '#FFD700' }}>\n                        <CloudUploadIcon sx={{ fontSize: 40 }} />\n                      </IconButton>\n                    </label>\n                    <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', mt: 1 }}>\n                      Upload Company Logo\n                    </Typography>\n                  </Box>\n                )}\n              </ImagePreview>\n            </Grid>\n\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Company Name\"\n                name=\"companyName\"\n                value={formData.companyName}\n                onChange={handleChange}\n                required\n                error={!!validationErrors.companyName}\n                helperText={validationErrors.companyName}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledTextField\n                select\n                fullWidth\n                label=\"Industry\"\n                name=\"industry\"\n                value={formData.industry}\n                onChange={handleChange}\n                required\n                error={!!validationErrors.industry}\n                helperText={validationErrors.industry}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              >\n                {INDUSTRY_OPTIONS.map((option) => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </StyledTextField>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledTextField\n                fullWidth\n                label=\"Website\"\n                name=\"website\"\n                value={formData.website}\n                onChange={handleChange}\n                placeholder=\"https://example.com\"\n                error={!!validationErrors.website}\n                helperText={validationErrors.website}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <JamaicaLocationAutocomplete\n                value={formData.location ? formatLocationValue(formData.location) : null}\n                onChange={handleLocationChange}\n                error={!!validationErrors.location}\n                helperText={validationErrors.location}\n                placeholder=\"Select location\"\n                required\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle2\" sx={{ mb: 1, color: '#FFD700' }}>\n                Company Description\n              </Typography>\n              <CompanyDescriptionBuilder\n                value={formData.description}\n                onChange={(md) =>\n                  setFormData((prev) => ({ ...prev, description: md }))\n                }\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </DialogContent>\n      <DialogActions sx={{ \n        p: 3, \n        borderTop: '1px solid rgba(255, 215, 0, 0.1)',\n        gap: 2 \n      }}>\n        <Button\n          onClick={handleCancel}\n          sx={{\n            color: 'rgba(255, 255, 255, 0.7)',\n            '&:hover': {\n              color: '#FFFFFF',\n              backgroundColor: 'rgba(255, 255, 255, 0.1)'\n            }\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          form=\"company-profile-form\"\n          variant=\"contained\"\n          disabled={loading || externalLoading}\n          sx={{\n            backgroundColor: '#FFD700',\n            color: '#000000',\n            '&:hover': {\n              backgroundColor: '#FFE44D'\n            },\n            '&:disabled': {\n              backgroundColor: 'rgba(255, 215, 0, 0.3)',\n              color: 'rgba(0, 0, 0, 0.4)'\n            }\n          }}\n        >\n          {(loading || externalLoading) ? (\n            <CircularProgress size={24} sx={{ color: '#000000' }} />\n          ) : (\n            'Save Profile'\n          )}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nCompanyProfileSetup.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  initialData: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  success: PropTypes.bool\n};\n\n\n\nexport default CompanyProfileSetup;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/CreateJobListing.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":45}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Typography,\n  styled\n} from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { JamaicaLocationAutocomplete } from '../common/JamaicaLocationAutocomplete';\nimport api from '../../utils/axiosConfig';\nimport JOB_TEMPLATES from '../../constants/jobTemplates';\n\n// minimal fallback skills list if API returns none\nconst DEFAULT_SKILLS = [\n  'JavaScript','Python','React','Node.js','Project Management','Customer Service','Sales','Marketing','Accounting','AWS','SQL','Communication','Leadership','Teamwork','Problem Solving'\n];\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  backgroundColor: '#FFD700',\n  color: '#000000',\n  '&:hover': {\n    backgroundColor: '#FFC700'\n  }\n}));\n\nconst StyledDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialog-paper': {\n    backgroundColor: '#1a1a1a',\n    color: '#FFFFFF',\n    minWidth: '600px'\n  }\n}));\n\nconst StyledTextField = styled(TextField)({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&:hover fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: '#FFD700'\n  },\n  '& .MuiOutlinedInput-input': {\n    color: '#FFFFFF'\n  }\n});\n\nconst StyledFormControl = styled(FormControl)({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&:hover fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: '#FFD700'\n  },\n  '& .MuiSelect-icon': {\n    color: '#FFD700'\n  },\n  '& .MuiOutlinedInput-input': {\n    color: '#FFFFFF'\n  }\n});\n\nconst getLocationDisplay = (location) => {\n  if (!location) return '';\n  if (typeof location === 'string') return location;\n  return location.formattedAddress || location.mainText || location.name || '';\n};\n\nconst DialogCreateJobListing = ({ open, onClose, onSave }) => {\n  const [skillsOptions, setSkillsOptions] = useState([]);\n  const [jobData, setJobData] = useState({\n    title: '',\n    location: null,\n    employmentType: 'FULL_TIME',\n    description: '',\n    requirements: '',\n    responsibilities: '',\n    salaryMin: '',\n    salaryMax: '',\n    experienceLevel: 'ENTRY_LEVEL',\n    skills: [],\n    applicationDeadline: ''\n  });\n\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Handler to apply a selected template\n  const applyTemplate = (sector) => {\n    const template = JOB_TEMPLATES[sector];\n    if (template) {\n      setJobData(prev => ({\n        ...prev,\n        description: template.description,\n        requirements: template.requirements,\n        responsibilities: template.responsibilities\n      }));\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setJobData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleLocationChange = (location) => {\n    setJobData(prev => ({\n      ...prev,\n      location\n    }));\n    if (formErrors.location) {\n      setFormErrors(prev => ({\n        ...prev,\n        location: ''\n      }));\n    }\n  };\n\n  const handleSkillsChange = (newSkills) => {\n    setJobData(prev => ({\n      ...prev,\n      skills: newSkills\n    }));\n    if (formErrors.skills) {\n      setFormErrors(prev => ({\n        ...prev,\n        skills: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    if (!jobData.title.trim()) errors.title = 'Title is required';\n    if (!jobData.location) errors.location = 'Location is required';\n    if (!jobData.description.trim()) errors.description = 'Description is required';\n    if (!jobData.requirements.trim()) errors.requirements = 'Requirements are required';\n    if (!jobData.responsibilities.trim()) errors.responsibilities = 'Responsibilities are required';\n    if (!jobData.salaryMin) errors.salaryMin = 'Minimum salary is required';\n    if (!jobData.salaryMax) errors.salaryMax = 'Maximum salary is required';\n    if (Number(jobData.salaryMin) > Number(jobData.salaryMax)) {\n      errors.salaryMin = 'Minimum salary cannot be greater than maximum salary';\n    }\n    if (jobData.skills.length === 0) errors.skills = 'At least one skill is required';\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n    \n    setIsSubmitting(true);\n    try {\n      const formattedJobData = {\n        title: jobData.title,\n        description: jobData.description,\n        location: getLocationDisplay(jobData.location),\n        type: jobData.employmentType,\n        skills: jobData.skills.map(skill => (typeof skill === 'string' ? skill : skill.name || '')),\n        salary: {\n          min: parseFloat(jobData.salaryMin),\n          max: parseFloat(jobData.salaryMax)\n        },\n        experience: jobData.experienceLevel,\n        applicationDeadline: jobData.applicationDeadline\n          ? new Date(jobData.applicationDeadline).toISOString()\n          : null\n      };\n      \n      await onSave(formattedJobData);\n      onClose();\n    } catch (error) {\n      console.error('Error creating job listing:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Fetch skills list on mount for dropdown\n  useEffect(() => {\n    const fetchSkills = async () => {\n      try {\n        const res = await api.get('/api/skills');\n        const data = res.data;\n        const list = Array.isArray(data)\n          ? data\n          : Array.isArray(data?.skills)\n            ? data.skills\n            : [];\n        setSkillsOptions(list.length ? list : DEFAULT_SKILLS);\n      } catch (err) {\n        console.error('Failed to fetch skills list', err);\n      }\n    };\n    fetchSkills();\n  }, []);\n\n  return (\n    <StyledDialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n    >\n      <DialogTitle sx={{ color: '#FFD700' }}>Create New Job Listing</DialogTitle>\n      <DialogContent>\n        <Grid container spacing={3} sx={{ mt: 1 }}>\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Job Title\"\n              name=\"title\"\n              value={jobData.title}\n              onChange={handleInputChange}\n              error={!!formErrors.title}\n              helperText={formErrors.title}\n            />\n          </Grid>\n          \n          <Grid item xs={12}>\n            <JamaicaLocationAutocomplete\n              value={jobData.location}\n              onChange={handleLocationChange}\n              error={!!formErrors.location}\n              helperText={formErrors.location}\n            />\n          </Grid>\n\n          {/* Template selector to auto-fill key fields */}\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Select Job Template</InputLabel>\n              <Select\n                value=\"\"\n                label=\"Select Job Template\"\n                onChange={(e) => applyTemplate(e.target.value)}\n              >\n                {Object.keys(JOB_TEMPLATES).map((sector) => (\n                  <MenuItem key={sector} value={sector}>{sector}</MenuItem>\n                ))}\n              </Select>\n            </StyledFormControl>\n            <Typography variant=\"caption\" sx={{ color: '#FFD700' }}>\n              Choosing a template will pre-fill the description, requirements, and responsibilities. You can edit them afterwards.\n            </Typography>\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Employment Type</InputLabel>\n              <Select\n                value={jobData.employmentType}\n                label=\"Employment Type\"\n                name=\"employmentType\"\n                onChange={handleInputChange}\n              >\n                <MenuItem value=\"FULL_TIME\">Full Time</MenuItem>\n                <MenuItem value=\"PART_TIME\">Part Time</MenuItem>\n                <MenuItem value=\"CONTRACT\">Contract</MenuItem>\n                <MenuItem value=\"TEMPORARY\">Temporary</MenuItem>\n                <MenuItem value=\"INTERNSHIP\">Internship</MenuItem>\n              </Select>\n            </StyledFormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Experience Level</InputLabel>\n              <Select\n                value={jobData.experienceLevel}\n                label=\"Experience Level\"\n                name=\"experienceLevel\"\n                onChange={handleInputChange}\n              >\n                <MenuItem value=\"ENTRY_LEVEL\">Entry Level</MenuItem>\n                <MenuItem value=\"MID_LEVEL\">Mid Level</MenuItem>\n                <MenuItem value=\"SENIOR_LEVEL\">Senior Level</MenuItem>\n                <MenuItem value=\"EXECUTIVE\">Executive</MenuItem>\n              </Select>\n            </StyledFormControl>\n          </Grid>\n\n          <Grid item xs={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Minimum Salary (JMD)\"\n              name=\"salaryMin\"\n              type=\"number\"\n              value={jobData.salaryMin}\n              onChange={handleInputChange}\n              error={!!formErrors.salaryMin}\n              helperText={formErrors.salaryMin}\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Maximum Salary (JMD)\"\n              name=\"salaryMax\"\n              type=\"number\"\n              value={jobData.salaryMax}\n              onChange={handleInputChange}\n              error={!!formErrors.salaryMax}\n              helperText={formErrors.salaryMax}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Application Deadline\"\n              name=\"applicationDeadline\"\n              type=\"date\"\n              value={jobData.applicationDeadline}\n              onChange={handleInputChange}\n              InputLabelProps={{ shrink: true }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Skills (select multiple)</InputLabel>\n              <Select\n                multiple\n                name=\"skills\"\n                value={jobData.skills}\n                onChange={(e) => handleSkillsChange(e.target.value)}\n                renderValue={(selected) => selected.join(', ')}\n                label=\"Skills\"\n                error={!!formErrors.skills}\n                MenuProps={{\n                  PaperProps: {\n                    sx: {\n                      bgcolor: '#1a1a1a',\n                      color: '#FFFFFF',\n                      border: '1px solid rgba(255, 215, 0, 0.4)',\n                      maxHeight: 300\n                    }\n                  },\n                  MenuListProps: {\n                    sx: {\n                      '& .MuiMenuItem-root': {\n                        color: '#FFFFFF',\n                        '&.Mui-selected': {\n                          bgcolor: 'rgba(255, 215, 0, 0.15)'\n                        },\n                        '&.Mui-selected:hover': {\n                          bgcolor: 'rgba(255, 215, 0, 0.25)'\n                        }\n                      }\n                    }\n                  },\n                  disablePortal: true\n                }}\n              >\n                {(Array.isArray(skillsOptions) ? skillsOptions : []).map((skill) => (\n                  <MenuItem key={skill} value={skill} sx={{ color: '#FFFFFF' }}>\n                    {skill}\n                  </MenuItem>\n                ))}\n              </Select>\n            </StyledFormControl>\n            {formErrors.skills && (\n              <Typography variant=\"caption\" color=\"error\">\n                {formErrors.skills}\n              </Typography>\n            )}\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Job Description\"\n              name=\"description\"\n              multiline\n              rows={4}\n              value={jobData.description}\n              onChange={handleInputChange}\n              error={!!formErrors.description}\n              helperText={formErrors.description}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Requirements\"\n              name=\"requirements\"\n              multiline\n              rows={4}\n              value={jobData.requirements}\n              onChange={handleInputChange}\n              error={!!formErrors.requirements}\n              helperText={formErrors.requirements}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Responsibilities\"\n              name=\"responsibilities\"\n              multiline\n              rows={4}\n              value={jobData.responsibilities}\n              onChange={handleInputChange}\n              error={!!formErrors.responsibilities}\n              helperText={formErrors.responsibilities}\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n\n      <DialogActions sx={{ padding: 2 }}>\n        <Button onClick={onClose} sx={{ color: '#FFD700' }}>\n          Cancel\n        </Button>\n        <StyledButton\n          onClick={handleSubmit}\n          disabled={isSubmitting}\n          variant=\"contained\"\n        >\n          {isSubmitting ? 'Creating...' : 'Create Job Listing'}\n        </StyledButton>\n      </DialogActions>\n    </StyledDialog>\n  );\n};\n\nDialogCreateJobListing.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired\n};\n\nexport default DialogCreateJobListing;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/DialogCreateJobListing.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Typography,\n  styled\n} from '@mui/material';\nimport { JamaicaLocationAutocomplete } from '../common/JamaicaLocationAutocomplete';\nimport { SkillsAutocomplete } from '../common/SkillsAutocomplete';\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n  backgroundColor: '#FFD700',\n  color: '#000000',\n  '&:hover': {\n    backgroundColor: '#FFC700'\n  }\n}));\n\nconst StyledDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialog-paper': {\n    backgroundColor: '#1a1a1a',\n    color: '#FFFFFF',\n    minWidth: '600px'\n  }\n}));\n\nconst StyledTextField = styled(TextField)({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&:hover fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: '#FFD700'\n  },\n  '& .MuiOutlinedInput-input': {\n    color: '#FFFFFF'\n  }\n});\n\nconst StyledFormControl = styled(FormControl)({\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&:hover fieldset': {\n      borderColor: '#FFD700'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: '#FFD700'\n  },\n  '& .MuiSelect-icon': {\n    color: '#FFD700'\n  },\n  '& .MuiOutlinedInput-input': {\n    color: '#FFFFFF'\n  }\n});\n\nconst getLocationDisplay = (location) => {\n  if (!location) return '';\n  if (typeof location === 'string') return location;\n  return location.formattedAddress || location.mainText || location.name || '';\n};\n\nconst DialogCreateJobListing = ({ open, onClose, onSave }) => {\n  const [jobData, setJobData] = useState({\n    title: '',\n    location: null,\n    employmentType: 'FULL_TIME',\n    description: '',\n    requirements: '',\n    responsibilities: '',\n    salaryMin: '',\n    salaryMax: '',\n    experienceLevel: 'ENTRY_LEVEL',\n    skills: [],\n    applicationDeadline: ''\n  });\n\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setJobData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleLocationChange = (location) => {\n    setJobData(prev => ({\n      ...prev,\n      location\n    }));\n    if (formErrors.location) {\n      setFormErrors(prev => ({\n        ...prev,\n        location: ''\n      }));\n    }\n  };\n\n  const handleSkillsChange = (newSkills) => {\n    setJobData(prev => ({\n      ...prev,\n      skills: newSkills\n    }));\n    if (formErrors.skills) {\n      setFormErrors(prev => ({\n        ...prev,\n        skills: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const errors = {};\n    if (!jobData.title.trim()) errors.title = 'Title is required';\n    if (!jobData.location) errors.location = 'Location is required';\n    if (!jobData.description.trim()) errors.description = 'Description is required';\n    if (!jobData.requirements.trim()) errors.requirements = 'Requirements are required';\n    if (!jobData.responsibilities.trim()) errors.responsibilities = 'Responsibilities are required';\n    if (!jobData.salaryMin) errors.salaryMin = 'Minimum salary is required';\n    if (!jobData.salaryMax) errors.salaryMax = 'Maximum salary is required';\n    if (Number(jobData.salaryMin) > Number(jobData.salaryMax)) {\n      errors.salaryMin = 'Minimum salary cannot be greater than maximum salary';\n    }\n    if (jobData.skills.length === 0) errors.skills = 'At least one skill is required';\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n    \n    setIsSubmitting(true);\n    try {\n      const formattedJobData = {\n        ...jobData,\n        location: getLocationDisplay(jobData.location),\n        locationData: jobData.location,\n        skills: jobData.skills.map(skill => skill.name || skill),\n        salaryMin: parseFloat(jobData.salaryMin),\n        salaryMax: parseFloat(jobData.salaryMax),\n        applicationDeadline: jobData.applicationDeadline \n          ? new Date(jobData.applicationDeadline).toISOString() \n          : null\n      };\n      \n      await onSave(formattedJobData);\n      onClose();\n    } catch (error) {\n      console.error('Error creating job listing:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <StyledDialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n    >\n      <DialogTitle sx={{ color: '#FFD700' }}>Create New Job Listing</DialogTitle>\n      <DialogContent>\n        <Grid container spacing={3} sx={{ mt: 1 }}>\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Job Title\"\n              name=\"title\"\n              value={jobData.title}\n              onChange={handleInputChange}\n              error={!!formErrors.title}\n              helperText={formErrors.title}\n            />\n          </Grid>\n          \n          <Grid item xs={12}>\n            <JamaicaLocationAutocomplete\n              value={jobData.location}\n              onChange={handleLocationChange}\n              error={!!formErrors.location}\n              helperText={formErrors.location}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Employment Type</InputLabel>\n              <Select\n                value={jobData.employmentType}\n                label=\"Employment Type\"\n                name=\"employmentType\"\n                onChange={handleInputChange}\n              >\n                <MenuItem value=\"FULL_TIME\">Full Time</MenuItem>\n                <MenuItem value=\"PART_TIME\">Part Time</MenuItem>\n                <MenuItem value=\"CONTRACT\">Contract</MenuItem>\n                <MenuItem value=\"TEMPORARY\">Temporary</MenuItem>\n                <MenuItem value=\"INTERNSHIP\">Internship</MenuItem>\n              </Select>\n            </StyledFormControl>\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledFormControl fullWidth>\n              <InputLabel>Experience Level</InputLabel>\n              <Select\n                value={jobData.experienceLevel}\n                label=\"Experience Level\"\n                name=\"experienceLevel\"\n                onChange={handleInputChange}\n              >\n                <MenuItem value=\"ENTRY_LEVEL\">Entry Level</MenuItem>\n                <MenuItem value=\"MID_LEVEL\">Mid Level</MenuItem>\n                <MenuItem value=\"SENIOR_LEVEL\">Senior Level</MenuItem>\n                <MenuItem value=\"EXECUTIVE\">Executive</MenuItem>\n              </Select>\n            </StyledFormControl>\n          </Grid>\n\n          <Grid item xs={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Minimum Salary (JMD)\"\n              name=\"salaryMin\"\n              type=\"number\"\n              value={jobData.salaryMin}\n              onChange={handleInputChange}\n              error={!!formErrors.salaryMin}\n              helperText={formErrors.salaryMin}\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Maximum Salary (JMD)\"\n              name=\"salaryMax\"\n              type=\"number\"\n              value={jobData.salaryMax}\n              onChange={handleInputChange}\n              error={!!formErrors.salaryMax}\n              helperText={formErrors.salaryMax}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Application Deadline\"\n              name=\"applicationDeadline\"\n              type=\"date\"\n              value={jobData.applicationDeadline}\n              onChange={handleInputChange}\n              InputLabelProps={{ shrink: true }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <SkillsAutocomplete\n              value={jobData.skills}\n              onChange={handleSkillsChange}\n              error={!!formErrors.skills}\n              helperText={formErrors.skills}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Job Description\"\n              name=\"description\"\n              multiline\n              rows={4}\n              value={jobData.description}\n              onChange={handleInputChange}\n              error={!!formErrors.description}\n              helperText={formErrors.description}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Requirements\"\n              name=\"requirements\"\n              multiline\n              rows={4}\n              value={jobData.requirements}\n              onChange={handleInputChange}\n              error={!!formErrors.requirements}\n              helperText={formErrors.requirements}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <StyledTextField\n              fullWidth\n              label=\"Responsibilities\"\n              name=\"responsibilities\"\n              multiline\n              rows={4}\n              value={jobData.responsibilities}\n              onChange={handleInputChange}\n              error={!!formErrors.responsibilities}\n              helperText={formErrors.responsibilities}\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n\n      <DialogActions sx={{ padding: 2 }}>\n        <Button onClick={onClose} sx={{ color: '#FFD700' }}>\n          Cancel\n        </Button>\n        <StyledButton\n          onClick={handleSubmit}\n          disabled={isSubmitting}\n          variant=\"contained\"\n        >\n          {isSubmitting ? 'Creating...' : 'Create Job Listing'}\n        </StyledButton>\n      </DialogActions>\n    </StyledDialog>\n  );\n};\n\nexport default DialogCreateJobListing;\n\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/EmployerDashboard.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":27}],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":6,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Fade' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":7,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useMediaQuery' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":8,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":9,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'axios' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUploadIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":17,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":18,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DoneAllIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":23,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'logDev' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sanitizeForLogging' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'buildApiUrl' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'underlineExpand' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":47,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":69,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isEditing' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":124,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsEditing' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":124,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'needsProfileSetup' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":125,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'descriptionBuilderOpen' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":133,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setDescriptionBuilderOpen' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":133,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":59,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":2,"message":"'notificationsError' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":154,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, Typography, Grid, Paper, Container, Tabs, Tab, Button,\n  TextField, CircularProgress, Alert, styled, Chip, IconButton,\n  Dialog, DialogTitle, DialogContent, DialogActions, Fade,\n  useTheme, useMediaQuery, Avatar, Menu, MenuItem, ListItemText,\n  ListItemIcon, Divider, Badge\n} from '@mui/material';\nimport { keyframes } from '@mui/material/styles';\nimport axios from 'axios';\n\n// Import components\n// Import icons\nimport EditIcon from '@mui/icons-material/Edit';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport AddIcon from '@mui/icons-material/Add';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\nimport WorkIcon from '@mui/icons-material/Work';\nimport PeopleIcon from '@mui/icons-material/People';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\nimport api from '../../utils/axiosConfig';\nimport { buildApiUrl, buildAssetUrl } from '../../config';\nimport { useAuth } from '../../context/AuthContext';\nimport CreateJobListing from './CreateJobListing';\nimport JobDetailsDialog from './JobDetailsDialog';\nimport ApplicationsList from './ApplicationsList';\nimport CompanyProfileSetup from './CompanyProfileSetup';\n\n// Define animations\nconst fadeInUp = keyframes({\n  from: {\n    opacity: 0,\n    transform: 'translateY(30px)'\n  },\n  to: {\n    opacity: 1,\n    transform: 'translateY(0)'\n  }\n});\n\nconst underlineExpand = keyframes({\n  from: {\n    width: 0\n  },\n  to: {\n    width: '100%'\n  }\n});\n\n// Styled components\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  marginTop: theme.spacing(4),\n  animation: `${fadeInUp} 0.6s ease-out`\n}));\n\nconst DashboardWrapper = styled(Box)(({ theme }) => ({\n  position: 'relative',\n  padding: theme.spacing(3),\n  minHeight: '100vh',\n  backgroundColor: '#0A0A0A'\n}));\n\nconst BackgroundOverlay = styled(Box)(({ theme }) => ({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  opacity: 0.15,\n  zIndex: 0\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(4),\n  backgroundColor: '#FFFFFF',\n  borderRadius: theme.shape.borderRadius,\n  border: '1px solid rgba(44, 85, 48, 0.2)',\n  marginBottom: theme.spacing(3),\n  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',\n  color: '#000000',\n  '&:hover': {\n    transform: 'translateY(-2px)',\n    boxShadow: '0 8px 24px rgba(0, 0, 0, 0.15)',\n    border: '1px solid rgba(44, 85, 48, 0.4)'\n  }\n}));\n\nconst TabPanel = ({ children, value, index }) => (\n  <Box sx={{ py: 3 }} hidden={value !== index} role=\"tabpanel\" id={`tabpanel-${index}`}>\n    {value === index && children}\n  </Box>\n);\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired\n};\n\nconst EmployerDashboard = () => {\n  const theme = useTheme();\n  const [activeTab, setActiveTab] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [apiLoading, setApiLoading] = useState({\n    jobUpdate: false,\n    jobCreate: false,\n    profileUpdate: false\n  });\n  const [dataLoading, setDataLoading] = useState({\n    employer: true,\n    jobs: false,\n    notifications: false\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [needsProfileSetup, setNeedsProfileSetup] = useState(false);\n  const [message, setMessage] = useState(null);\n  const [profileUpdateStatus, setProfileUpdateStatus] = useState({\n    success: false,\n    error: null,\n    loading: false\n  });\n  const [jobListings, setJobListings] = useState([]);\n  const [descriptionBuilderOpen, setDescriptionBuilderOpen] = useState(false);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [jobDetailsOpen, setJobDetailsOpen] = useState(false);\n  const [jobEditMode, setJobEditMode] = useState(false);\n  const [createJobOpen, setCreateJobOpen] = useState(false);\n  const [companyProfile, setCompanyProfile] = useState({\n    companyName: '',\n    description: '',\n    industry: '',\n    location: '',\n    website: '',\n    logoUrl: null\n  });\n  const [profileSetupOpen, setProfileSetupOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { user } = useAuth();\n\n  const notificationsOpen = Boolean(anchorEl);\n  const [notificationsLoading, setNotificationsLoading] = useState(false);\n  const [notificationsError, setNotificationsError] = useState(null);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const fetchEmployerData = useCallback(async () => {\n    setDataLoading(prev => ({ ...prev, employer: true }));\n    try {\n      console.warn('Fetching employer data...');\n      const response = await api.get('/api/employer/profile');\n      const data = response?.data?.data ?? response?.data;\n      console.warn('Employer data response:', data);\n\n      // Validate response structure\n      if (!data) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Check if we have employer data\n      if (!data.employer) {\n        throw new Error('Invalid response format: missing employer data');\n      }\n\n      // Handle company data if it exists\n      if (data.company) {\n        // Validate company data structure\n        const company = data.company;\n        if (!company || typeof company !== 'object') {\n          throw new Error('Invalid company data structure');\n        }\n\n        // Validate required company fields\n        if (!company.name) {\n          throw new Error('Invalid company data: missing name');\n        }\n\n        // Map API response to frontend data structure\n        const companyData = {\n          companyName: company.name,\n          description: company.description || '',\n          industry: company.industry || '',\n          location: company.location || '',\n          website: company.website || '',\n          logoUrl: company.logoUrl || null\n        };\n\n        console.warn('Mapped company data:', companyData);\n\n        // Check if we have essential company data\n        if (companyData.companyName && companyData.industry) {\n          setCompanyProfile(companyData);\n          setNeedsProfileSetup(false);\n          setMessage(null);\n        } else {\n          // Company exists but missing required data\n          setCompanyProfile(companyData);\n          setNeedsProfileSetup(true);\n          setMessage({\n            type: 'info',\n            text: 'Please complete your company profile.'\n          });\n        }\n      } else {\n        // No company data found\n        console.warn('No company data found');\n        setNeedsProfileSetup(true);\n        setCompanyProfile({\n          companyName: '',\n          description: '',\n          industry: '',\n          location: '',\n          website: '',\n          logoUrl: null\n        });\n        setMessage({\n          type: 'info',\n          text: 'Welcome! Please set up your company profile to get started.'\n        });\n      }\n\n      // Only fetch job listings if company profile exists\n      if (data.company) {\n        try {\n          setDataLoading(prev => ({ ...prev, jobs: true }));\n          const jobsResponse = await api.get('/api/employer/jobs');\n          \n          // Validate jobs response\n          if (!jobsResponse?.data) {\n            throw new Error('Invalid jobs response format');\n          }\n\n          // Ensure we have an array of jobs\n          setJobListings(Array.isArray(jobsResponse.data) ? jobsResponse.data : []);\n        } catch (jobsError) {\n          console.error('Error fetching job listings:', jobsError);\n          setJobListings([]);\n        } finally {\n          setDataLoading(prev => ({ ...prev, jobs: false }));\n        }\n      } else {\n        // Clear job listings if no company profile exists\n        setJobListings([]);\n      }\n\n    } catch (error) {\n      // Log the error with full context\n      console.error('Error fetching employer data:', {\n        error: error.response || error,\n        message: error.message,\n        status: error.response?.status,\n        data: error.response?.data\n      });\n\n      // Log to error tracking service\n      logError('Error fetching employer data', error, {\n        module: 'EmployerDashboard',\n        function: 'fetchEmployerData',\n        userId: user?.id,\n        error: error.response?.data || error.message,\n        status: error.response?.status,\n        stack: error.stack\n      });\n\n      // Reset state\n      const emptyProfile = {\n        companyName: '',\n        description: '',\n        industry: '',\n        location: '',\n        website: '',\n        logoUrl: null\n      };\n      setCompanyProfile(emptyProfile);\n      setJobListings([]);\n\n      // Handle different error cases\n      if (error.message.includes('Invalid company data: missing name')) {\n        setMessage({\n          type: 'info',\n          text: 'Please set up your company profile with a valid company name.'\n        });\n        setNeedsProfileSetup(true);\n      } else if (error.message.includes('Invalid response format') || \n          error.message.includes('Invalid data format') ||\n          error.message.includes('Invalid company data structure')) {\n        setMessage({\n          type: 'error',\n          text: 'Unexpected server response format. Please try again later.'\n        });\n      } else if (error.response?.status === 404) {\n        console.warn('New employer detected - initializing empty profile');\n        setNeedsProfileSetup(true);\n        setMessage({\n          type: 'info',\n          text: 'Welcome! Please set up your company profile to get started.'\n        });\n      } else if (error.response?.status === 401) {\n        setMessage({\n          type: 'error',\n          text: 'Your session has expired. Please log in again.'\n        });\n      } else if (error.response?.status === 403) {\n        setMessage({\n          type: 'error',\n          text: 'You do not have permission to access employer features.'\n        });\n      } else if (!error.response || error.response.status >= 500) {\n        setMessage({\n          type: 'error',\n          text: 'Unable to connect to the server. Please try again later.'\n        });\n      } else {\n        setMessage({\n          type: 'error',\n          text: error.response?.data?.message || 'Failed to load employer data. Please try again.'\n        });\n      }\n\n      // Always set needs profile setup on error except for auth errors\n      if (![401, 403].includes(error.response?.status)) {\n        setNeedsProfileSetup(true);\n      }\n\n    } finally {\n      // Reset loading states\n      setDataLoading(prev => ({\n        ...prev,\n        employer: false,\n        jobs: false\n      }));\n      setLoading(false);\n    }\n  }, [user]);\n\n  const handleProfileUpdate = async (profileData) => {\n    setProfileUpdateStatus({ success: false, error: null, loading: true });\n    setApiLoading(prev => ({ ...prev, profileUpdate: true }));\n    try {\n      const response = await api.put('/api/employer/profile', profileData);\n      \n      // Extract company object from possible response shapes\n      const company = response.data?.data?.company || response.data?.company || response.data;\n      \n      // Format the response data to match our component structure\n      const formattedData = {\n        companyName: company.name || '',\n        description: company.description || '',\n        industry: company.industry || '',\n        location: company.location || '',\n        website: company.website || '',\n        logoUrl: company.logoUrl || null\n      };\n      \n      setCompanyProfile(formattedData);\n      setNeedsProfileSetup(false);\n      \n      setProfileUpdateStatus({\n        success: true,\n        error: null,\n        loading: false\n      });\n      \n      // Show success message\n      setMessage({\n        type: 'success',\n        text: 'Company profile updated successfully'\n      });\n      \n      // Close dialog after short delay to show success state\n      setTimeout(() => {\n        setProfileSetupOpen(false);\n        // Clear success message after dialog closes\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      }, 1000);\n    } catch (error) {\n      logError('Error updating company profile', error);\n      setProfileUpdateStatus({\n        success: false,\n        error: error.response?.data?.message || 'Failed to update company profile',\n        loading: false\n      });\n      setMessage({\n        type: 'error',\n        text: error.response?.data?.message || 'Failed to update company profile'\n      });\n    } finally {\n      setApiLoading(prev => ({ ...prev, profileUpdate: false }));\n    }\n  };\n  \n\n  const handleJobUpdate = async (jobData) => {\n    setApiLoading(prev => ({ ...prev, jobUpdate: true }));\n    try {\n      const response = await api.put(`/api/jobs/${selectedJob.id}`, jobData);\n      setJobListings(prevListings =>\n        prevListings.map(job =>\n          job.id === selectedJob.id ? response.data : job\n        )\n      );\n      setJobDetailsOpen(false);\n    } catch (error) {\n      logError('Error updating job', error);\n      setMessage({\n        type: 'error',\n        text: 'Failed to update job listing'\n      });\n    } finally {\n      setApiLoading(prev => ({ ...prev, jobUpdate: false }));\n    }\n  };\n\n  const handleCreateJob = async (jobData) => {\n    setApiLoading(prev => ({ ...prev, jobCreate: true }));\n    try {\n      const response = await api.post('/api/jobs', jobData);\n      setJobListings(prev => [...prev, response.data]);\n      setCreateJobOpen(false);\n    } catch (error) {\n      logError('Error creating job', error);\n      setMessage({\n        type: 'error',\n        text: 'Failed to create job listing'\n      });\n    } finally {\n      setApiLoading(prev => ({ ...prev, jobCreate: false }));\n    }\n  };\n\n  const fetchNotifications = useCallback(async () => {\n    try {\n      setDataLoading(prev => ({ ...prev, notifications: true }));\n      setNotificationsLoading(true);\n      const response = await api.get('/api/notifications');\n      // Support different response shapes e.g. { data: [...] } or []\n      const notificationsRaw = response?.data?.data ?? response?.data ?? [];\n      const notificationsData = Array.isArray(notificationsRaw) ? notificationsRaw : [];\n      setNotifications(notificationsData);\n      setUnreadCount(notificationsData.filter(n => n.status === 'UNREAD').length);\n    } catch (error) {\n      logError('Error fetching notifications', error);\n      setNotificationsError('Failed to load notifications');\n    } finally {\n      setDataLoading(prev => ({ ...prev, notifications: false }));\n      setNotificationsLoading(false);\n    }\n  }, []);\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await api.patch(`/api/notifications/${notificationId}`);\n      setNotifications(prev =>\n        prev.map(n =>\n          n.id === notificationId ? { ...n, status: 'READ' } : n\n        )\n      );\n      setUnreadCount(prev => (prev > 0 ? prev - 1 : 0));\n    } catch (error) {\n      logError('Error marking notification as read', error);\n    }\n  };\n\n  const handleNotificationsClick = (event) => {\n    // Open menu immediately for better UX\n    setAnchorEl(event.currentTarget);\n    // Fire and forget refresh\n    fetchNotifications().catch(err => {\n      console.error('Failed to refresh notifications', err);\n    });\n  };\n\n  const handleNotificationsClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleEditJob = (job) => {\n    setSelectedJob(job);\n    setJobEditMode(true);\n    setJobDetailsOpen(true);\n  };\n\n  const handleViewJob = (job) => {\n    setSelectedJob(job);\n    setJobEditMode(false);\n    setJobDetailsOpen(true);\n  };\n\n  const handleNotificationClick = (notification) => {\n    if (notification.status === 'UNREAD') {\n      markAsRead(notification.id);\n    }\n    handleNotificationsClose();\n    // Navigate based on notification type\n    if (notification.type === 'APPLICATION') {\n      setActiveTab(2);\n    }\n  };\n  \n  useEffect(() => {\n    let isMounted = true;\n    \n    const fetchData = async () => {\n      if (isMounted) {\n        try {\n          await fetchEmployerData();\n          await fetchNotifications();\n        } catch (error) {\n          console.error('Error in initial data fetch:', error);\n        }\n      }\n    };\n\n    fetchData();\n    \n    // Set up notification polling\n    const intervalId = setInterval(() => {\n      if (isMounted) {\n        fetchNotifications().catch(error => {\n          console.error('Error in notification polling:', error);\n        });\n      }\n    }, 30000);\n\n    return () => {\n      isMounted = false;\n      clearInterval(intervalId);\n    };\n  }, [fetchEmployerData, fetchNotifications]);\n\n  return (\n    <DashboardWrapper>\n      <BackgroundOverlay />\n      <StyledContainer>\n        {loading || dataLoading.employer ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '100vh' }}>\n            <CircularProgress sx={{ color: '#FFD700' }} />\n          </Box>\n        ) : (\n          <>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                  <Typography variant=\"h4\" sx={{ color: '#FFD700' }}>\n                    Employer Dashboard\n                  </Typography>\n                  <Box>\n                    <IconButton\n                      onClick={handleNotificationsClick}\n                      size=\"large\"\n                      aria-label=\"show notifications\"\n                      aria-controls=\"notifications-menu\"\n                      aria-haspopup=\"true\"\n                      sx={{\n                        color: theme.palette.mode === 'dark' ? '#FFD700' : '#2C5530',\n                        '&:hover': {\n                          backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                        }\n                      }}\n                    >\n                      <Badge badgeContent={unreadCount} color=\"error\">\n                        <NotificationsIcon />\n                      </Badge>\n                    </IconButton>\n                    <Menu\n                      id=\"notifications-menu\"\n                      anchorEl={anchorEl}\n                      open={notificationsOpen}\n                      onClose={handleNotificationsClose}\n                      PaperProps={{\n                        sx: {\n                          maxHeight: 400,\n                          width: '350px',\n                          backgroundColor: '#1A1A1A'\n                        }\n                      }}\n                    >\n                      {notificationsLoading ? (\n                        <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>\n                          <CircularProgress size={24} sx={{ color: '#FFD700' }} />\n                        </Box>\n                      ) : notifications.length === 0 ? (\n                        <MenuItem sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                          <ListItemText primary=\"No notifications\" />\n                        </MenuItem>\n                      ) : (\n                        notifications.map(notification => (\n                          <MenuItem\n                            key={notification.id}\n                            onClick={() => handleNotificationClick(notification)}\n                            sx={{\n                              borderLeft: notification.status === 'UNREAD' ? '3px solid #FFD700' : 'none',\n                              backgroundColor: notification.status === 'UNREAD' ? 'rgba(255, 215, 0, 0.1)' : 'transparent'\n                            }}\n                          >\n                            <ListItemText\n                              primary={notification.title}\n                              secondary={notification.content}\n                              secondaryTypographyProps={{\n                                sx: { color: 'rgba(255, 255, 255, 0.5)' }\n                              }}\n                            />\n                          </MenuItem>\n                        ))\n                      )}\n                    </Menu>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n\n            <Tabs value={activeTab} onChange={handleTabChange}>\n              <Tab label=\"Overview\" icon={<BusinessIcon />} />\n              <Tab label=\"Job Listings\" icon={<WorkIcon />} />\n              <Tab label=\"Applications\" icon={<PeopleIcon />} />\n            </Tabs>\n\n            {/* Tab panels */}\n            {activeTab === 0 && (\n              <TabPanel value={activeTab} index={0}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    {message && (\n                      <Box sx={{ mb: 2 }}>\n                        <Alert \n                          severity={message.type} \n                          onClose={() => setMessage(null)}\n                          sx={{\n                            '& .MuiAlert-message': {\n                              color: message.type === 'error' ? '#5F2120' : '#1E4620'\n                            }\n                          }}\n                        >\n                          {message.text}\n                        </Alert>\n                      </Box>\n                    )}\n                    <StyledPaper>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                        <Typography variant=\"h6\" sx={{ \n                          color: '#2C5530', \n                          fontWeight: 700,\n                          fontSize: '1.5rem'\n                        }}>Company Profile</Typography>\n                        <Button\n                          variant=\"contained\"\n                          startIcon={apiLoading.profileUpdate ? (\n                            <CircularProgress size={20} sx={{ color: '#FFFFFF' }} />\n                          ) : (\n                            <EditIcon />\n                          )}\n                          onClick={() => {\n                            setProfileSetupOpen(true);\n                            setApiLoading(prev => ({ ...prev, profileUpdate: false }));\n                          }}\n                          disabled={apiLoading.profileUpdate}\n                          sx={{\n                            backgroundColor: '#2C5530',\n                            color: '#FFFFFF',\n                            padding: '8px 24px',\n                            fontSize: '1rem',\n                            fontWeight: 600,\n                            textTransform: 'none',\n                            '&:hover': {\n                              backgroundColor: '#1E3D23',\n                              boxShadow: '0 4px 12px rgba(44, 85, 48, 0.2)'\n                            },\n                            '&.Mui-disabled': {\n                              backgroundColor: 'rgba(44, 85, 48, 0.5)',\n                              color: '#FFFFFF'\n                            }\n                          }}\n                        >\n                          {apiLoading.profileUpdate ? 'Updating...' : 'Edit Profile'}\n                        </Button>\n                      </Box>\n                      {profileUpdateStatus.loading ? (\n                        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n                          <CircularProgress sx={{ color: '#2C5530' }} />\n                        </Box>\n                      ) : companyProfile ? (\n                        <>\n                          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n                            {/* Company Logo Preview */}\n                            <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                              {companyProfile.logoUrl ? (\n                                <Avatar\n                                  src={buildAssetUrl(companyProfile.logoUrl)}\n                                  alt={companyProfile.companyName}\n                                  sx={{ width: 120, height: 120, border: '2px solid #FFD700', objectFit: 'contain' }}\n                                />\n                              ) : (\n                                <Avatar\n                                  sx={{ width: 120, height: 120, backgroundColor: '#2C5530' }}\n                                >\n                                  <BusinessIcon sx={{ fontSize: 60, color: '#FFD700' }} />\n                                </Avatar>\n                              )}\n                            </Box>\n                            <Box sx={{ \n                              backgroundColor: 'rgba(44, 85, 48, 0.05)', \n                              p: 2, \n                              borderRadius: 1,\n                              border: '1px solid rgba(44, 85, 48, 0.1)'\n                            }}>\n                              <Typography variant=\"body1\" sx={{ fontSize: '1.1rem', mb: 1 }}>\n                                <Box component=\"span\" sx={{ \n                                  fontWeight: 600, \n                                  color: '#2C5530',\n                                  fontSize: '1.2rem',\n                                  display: 'block',\n                                  mb: 1\n                                }}>Company Name</Box>\n                                <Box component=\"span\">{companyProfile.companyName || 'Not specified'}</Box>\n                              </Typography>\n                            </Box>\n                            <Box sx={{ \n                              backgroundColor: 'rgba(44, 85, 48, 0.05)', \n                              p: 2, \n                              borderRadius: 1,\n                              border: '1px solid rgba(44, 85, 48, 0.1)'\n                            }}>\n                              <Typography variant=\"body1\" sx={{ fontSize: '1.1rem', mb: 1 }}>\n                                <Box component=\"span\" sx={{ \n                                  fontWeight: 600, \n                                  color: '#2C5530',\n                                  fontSize: '1.2rem',\n                                  display: 'block',\n                                  mb: 1\n                                }}>Industry</Box>\n                                <Box component=\"span\">{companyProfile.industry || 'Not specified'}</Box>\n                              </Typography>\n                            </Box>\n                            <Box sx={{ \n                              backgroundColor: 'rgba(44, 85, 48, 0.05)', \n                              p: 2, \n                              borderRadius: 1,\n                              border: '1px solid rgba(44, 85, 48, 0.1)'\n                            }}>\n                              <Typography variant=\"body1\" sx={{ fontSize: '1.1rem', mb: 1 }}>\n                                <Box component=\"span\" sx={{ \n                                  fontWeight: 600, \n                                  color: '#2C5530',\n                                  fontSize: '1.2rem',\n                                  display: 'block',\n                                  mb: 1\n                                }}>Location</Box>\n                                <Box component=\"span\">{companyProfile.location || 'Not specified'}</Box>\n                              </Typography>\n                            </Box>\n                            <Box sx={{ \n                              backgroundColor: 'rgba(44, 85, 48, 0.05)', \n                              p: 2, \n                              borderRadius: 1,\n                              border: '1px solid rgba(44, 85, 48, 0.1)'\n                            }}>\n                              <Typography variant=\"body1\" sx={{ fontSize: '1.1rem' }}>\n                                <Box component=\"span\" sx={{ \n                                  fontWeight: 600, \n                                  color: '#2C5530',\n                                  fontSize: '1.2rem',\n                                  display: 'block',\n                                  mb: 1\n                                }}>Description</Box>\n                                <Box component=\"span\" sx={{ lineHeight: 1.6 }}>{companyProfile.description || 'No description provided'}</Box>\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </>\n                      ) : (\n                        <Typography \n                          variant=\"body1\" \n                          sx={{ \n                            color: '#666666',\n                            fontSize: '1.1rem',\n                            textAlign: 'center',\n                            py: 3\n                          }}\n                        >\n                          No company profile set up yet. Click Edit Profile to get started.\n                        </Typography>\n                      )}\n                    </StyledPaper>\n                  </Grid>\n                </Grid>\n              </TabPanel>\n            )}\n\n            {activeTab === 1 && (\n              <TabPanel value={activeTab} index={1}>\n                <Box sx={{ mb: 3 }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                    <Typography variant=\"h6\">Active Job Listings</Typography>\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<AddIcon />}\n                      onClick={() => setCreateJobOpen(true)}\n                      sx={{\n                        backgroundColor: '#FFD700',\n                        color: '#000',\n                        '&:hover': {\n                          backgroundColor: '#FFD700'\n                        }\n                      }}\n                    >\n                      Create New Listing\n                    </Button>\n                  </Box>\n\n                  {dataLoading.jobs ? (\n                    <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n                      <CircularProgress sx={{ color: '#FFD700' }} />\n                    </Box>\n                  ) : jobListings.length === 0 ? (\n                    <StyledPaper>\n                      <Typography variant=\"body1\" color=\"text.secondary\" align=\"center\">\n                        No job listings yet. Create your first job posting!\n                      </Typography>\n                    </StyledPaper>\n                  ) : (\n                    jobListings.map((job) => (\n                      <StyledPaper key={job.id}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12} sm={8}>\n                            <Typography variant=\"h6\" gutterBottom>\n                              {job.title}\n                            </Typography>\n                            {(() => {\n                              const locationText = job.location?.formattedAddress || job.location || '—';\n                              const employmentText = job.employmentType || job.type || '—';\n                              const descSnippet = job.shortDescription || (job.description ? job.description.substring(0, 200) : '');\n                              return (\n                                <>\n                                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                                    {locationText} • {employmentText}\n                                  </Typography>\n                                  {descSnippet && (\n                                    <Typography variant=\"body1\" paragraph>\n                                      {descSnippet}...\n                                    </Typography>\n                                  )}\n                                </>\n                              );\n                            })()}\n                          </Grid>\n                          <Grid item xs={12} sm={4} sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n                            <Button\n                              variant=\"outlined\"\n                              startIcon={<EditIcon />}\n                              onClick={() => handleEditJob(job)}\n                              sx={{\n                                mr: 1,\n                                color: '#FFD700',\n                                borderColor: '#FFD700',\n                                '&:hover': {\n                                  borderColor: '#FFD700',\n                                  backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                                }\n                              }}\n                            >\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"outlined\"\n                              startIcon={<VisibilityIcon />}\n                              onClick={() => handleViewJob(job)}\n                              sx={{\n                                color: '#2C5530',\n                                borderColor: '#2C5530',\n                                '&:hover': {\n                                  borderColor: '#2C5530',\n                                  backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                                }\n                              }}\n                            >\n                              View\n                            </Button>\n                          </Grid>\n                        </Grid>\n                      </StyledPaper>\n                    ))\n                  )}\n                </Box>\n              </TabPanel>\n            )}\n\n            {activeTab === 2 && (\n              <TabPanel value={activeTab} index={2}>\n                <ApplicationsList jobListings={jobListings} />\n              </TabPanel>\n            )}\n          </>\n        )}\n      </StyledContainer>\n\n      {/* Dialogs */}\n      <CompanyProfileSetup\n        open={profileSetupOpen}\n        onClose={() => {\n          setProfileSetupOpen(false);\n          setProfileUpdateStatus({ success: false, error: null, loading: false });\n          setMessage(null);\n        }}\n        onSave={handleProfileUpdate}\n        initialData={companyProfile}\n        loading={profileUpdateStatus.loading}\n        error={profileUpdateStatus.error}\n        success={profileUpdateStatus.success}\n      />\n\n      <JobDetailsDialog\n        open={jobDetailsOpen}\n        onClose={() => setJobDetailsOpen(false)}\n        job={selectedJob}\n        isEditing={jobEditMode}\n        onSave={handleJobUpdate}\n      />\n\n      <CreateJobListing\n        open={createJobOpen}\n        onClose={() => setCreateJobOpen(false)}\n        onSave={handleCreateJob}\n      />\n    </DashboardWrapper>\n  );\n};\n\nexport default EmployerDashboard;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/JobDescriptionBuilder.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":16,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'ContentCopyIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":17,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":51},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generatePreview'. Either include it or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [description, responsibilities, requirements, benefits, generatePreview]","fix":{"range":[4365,4420],"text":"[description, responsibilities, requirements, benefits, generatePreview]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Chip,\n  Grid,\n  Paper,\n  Divider,\n  MenuItem,\n  IconButton,\n  styled\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ShuffleIcon from '@mui/icons-material/Shuffle';\nimport AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  '& .MuiInputLabel-root': {\n    color: 'rgba(255, 215, 0, 0.7)'\n  },\n  '& .MuiOutlinedInput-root': {\n    color: 'white',\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.3)'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  }\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(2),\n  backgroundColor: 'rgba(10, 10, 10, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  position: 'relative',\n  overflow: 'hidden',\n  marginBottom: theme.spacing(2),\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n    opacity: 0.3,\n    zIndex: 0\n  }\n}));\n\n// Industry templates\nconst industryTemplates = {\n  'Technology': {\n    descriptions: [\n      'We are seeking a talented professional to join our innovative technology team. This role offers the opportunity to work on cutting-edge projects in a dynamic environment.',\n      'Join our tech team and be part of Jamaica\\'s digital transformation. We\\'re looking for someone passionate about technology who can help drive our mission forward.',\n      'Our company is at the forefront of technological innovation in Jamaica. We\\'re seeking a skilled individual to contribute to our growing team.'\n    ],\n    responsibilities: [\n      'Develop and maintain software applications',\n      'Collaborate with cross-functional teams',\n      'Debug and troubleshoot technical issues',\n      'Implement new features and functionality',\n      'Participate in code reviews and technical discussions',\n      'Write clean, maintainable, and efficient code',\n      'Stay updated with the latest industry trends'\n    ],\n    requirements: [\n      'Bachelor\\'s degree in Computer Science or related field',\n      'Experience with modern programming languages',\n      'Strong problem-solving skills',\n      'Excellent communication abilities',\n      'Ability to work in a team environment',\n      'Knowledge of software development methodologies'\n    ],\n    benefits: [\n      'Competitive salary',\n      'Health insurance',\n      'Flexible working hours',\n      'Professional development opportunities',\n      'Modern office environment',\n      'Team building activities',\n      'Performance bonuses'\n    ]\n  }\n  // Add other industry templates from the backup file\n};\n\nconst JobDescriptionBuilder = ({ initialData, onSave }) => {\n  const [industry, setIndustry] = useState('Technology');\n  const [description, setDescription] = useState('');\n  const [responsibilities, setResponsibilities] = useState([]);\n  const [requirements, setRequirements] = useState([]);\n  const [benefits, setBenefits] = useState([]);\n  const [newResponsibility, setNewResponsibility] = useState('');\n  const [newRequirement, setNewRequirement] = useState('');\n  const [newBenefit, setNewBenefit] = useState('');\n  const [preview, setPreview] = useState('');\n\n  useEffect(() => {\n    if (initialData) {\n      setDescription(initialData.description || '');\n      if (initialData.responsibilities) {\n        try {\n          if (typeof initialData.responsibilities === 'string') {\n            setResponsibilities(JSON.parse(initialData.responsibilities));\n          } else if (Array.isArray(initialData.responsibilities)) {\n            setResponsibilities(initialData.responsibilities);\n          }\n        } catch (e) {\n          setResponsibilities(initialData.responsibilities.split('\\n').filter(item => item.trim()));\n        }\n      }\n      // Similar parsing for requirements and benefits\n    }\n  }, [initialData]);\n\n  useEffect(() => {\n    generatePreview();\n  }, [description, responsibilities, requirements, benefits]);\n\n  const handleIndustryChange = (e) => {\n    setIndustry(e.target.value);\n  };\n\n  const applyTemplate = () => {\n    const template = industryTemplates[industry] || industryTemplates['Other'];\n    const randomIndex = Math.floor(Math.random() * template.descriptions.length);\n    setDescription(template.descriptions[randomIndex]);\n    setResponsibilities([...template.responsibilities]);\n    setRequirements([...template.requirements]);\n    setBenefits([...template.benefits]);\n  };\n\n  const shuffleDescription = () => {\n    const template = industryTemplates[industry] || industryTemplates['Other'];\n    const randomIndex = Math.floor(Math.random() * template.descriptions.length);\n    setDescription(template.descriptions[randomIndex]);\n  };\n\n  const addResponsibility = () => {\n    if (newResponsibility.trim()) {\n      setResponsibilities([...responsibilities, newResponsibility.trim()]);\n      setNewResponsibility('');\n    }\n  };\n\n  const removeResponsibility = (index) => {\n    setResponsibilities(responsibilities.filter((_, i) => i !== index));\n  };\n\n  const addRequirement = () => {\n    if (newRequirement.trim()) {\n      setRequirements([...requirements, newRequirement.trim()]);\n      setNewRequirement('');\n    }\n  };\n\n  const removeRequirement = (index) => {\n    setRequirements(requirements.filter((_, i) => i !== index));\n  };\n\n  const addBenefit = () => {\n    if (newBenefit.trim()) {\n      setBenefits([...benefits, newBenefit.trim()]);\n      setNewBenefit('');\n    }\n  };\n\n  const removeBenefit = (index) => {\n    setBenefits(benefits.filter((_, i) => i !== index));\n  };\n\n  const generatePreview = () => {\n    let previewText = description + '\\n\\n';\n    \n    if (responsibilities.length > 0) {\n      previewText += 'Responsibilities:\\n';\n      responsibilities.forEach(resp => {\n        previewText += `• ${resp}\\n`;\n      });\n      previewText += '\\n';\n    }\n    \n    if (requirements.length > 0) {\n      previewText += 'Requirements:\\n';\n      requirements.forEach(req => {\n        previewText += `• ${req}\\n`;\n      });\n      previewText += '\\n';\n    }\n    \n    if (benefits.length > 0) {\n      previewText += 'Benefits:\\n';\n      benefits.forEach(benefit => {\n        previewText += `• ${benefit}\\n`;\n      });\n    }\n    \n    setPreview(previewText);\n  };\n\n  const handleSave = () => {\n    const formattedData = {\n      description,\n      responsibilities,\n      requirements,\n      benefits,\n      preview\n    };\n    \n    if (onSave && typeof onSave === 'function') {\n      onSave(formattedData);\n    }\n  };\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>\n            <StyledTextField\n              select\n              label=\"Industry Template\"\n              value={industry}\n              onChange={handleIndustryChange}\n              sx={{ minWidth: 200 }}\n            >\n              {Object.keys(industryTemplates).map((ind) => (\n                <MenuItem key={ind} value={ind}>\n                  {ind}\n                </MenuItem>\n              ))}\n            </StyledTextField>\n            \n            <Button\n              variant=\"contained\"\n              onClick={applyTemplate}\n              startIcon={<AutoFixHighIcon />}\n              sx={{\n                background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                color: '#000',\n                '&:hover': {\n                  background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                  boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                }\n              }}\n            >\n              Apply Template\n            </Button>\n          </Box>\n        </Grid>\n        \n        <Grid item xs={12} md={6}>\n          <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n            Job Description Builder\n          </Typography>\n          \n          <Box sx={{ mb: 3 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n              <Typography variant=\"subtitle1\" sx={{ color: '#FFD700' }}>\n                Description\n              </Typography>\n              <IconButton \n                onClick={shuffleDescription}\n                size=\"small\"\n                sx={{ color: '#FFD700' }}\n              >\n                <ShuffleIcon />\n              </IconButton>\n            </Box>\n            <StyledTextField\n              multiline\n              rows={4}\n              fullWidth\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Enter job description or use a template\"\n            />\n          </Box>\n          \n          {/* Responsibilities Section */}\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 1 }}>\n              Responsibilities\n            </Typography>\n            <Box sx={{ display: 'flex', mb: 2 }}>\n              <StyledTextField\n                fullWidth\n                value={newResponsibility}\n                onChange={(e) => setNewResponsibility(e.target.value)}\n                placeholder=\"Add a responsibility\"\n                onKeyPress={(e) => e.key === 'Enter' && addResponsibility()}\n              />\n              <IconButton \n                onClick={addResponsibility}\n                sx={{ ml: 1, color: '#FFD700' }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Box>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n              {responsibilities.map((resp, index) => (\n                <Chip \n                  key={index}\n                  label={resp}\n                  onDelete={() => removeResponsibility(index)}\n                  sx={{ \n                    backgroundColor: 'rgba(44, 85, 48, 0.7)',\n                    color: 'white',\n                    '& .MuiChip-deleteIcon': {\n                      color: 'rgba(255, 255, 255, 0.7)'\n                    }\n                  }}\n                />\n              ))}\n            </Box>\n          </Box>\n\n          {/* Requirements Section */}\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 1 }}>\n              Requirements\n            </Typography>\n            <Box sx={{ display: 'flex', mb: 2 }}>\n              <StyledTextField\n                fullWidth\n                value={newRequirement}\n                onChange={(e) => setNewRequirement(e.target.value)}\n                placeholder=\"Add a requirement\"\n                onKeyPress={(e) => e.key === 'Enter' && addRequirement()}\n              />\n              <IconButton \n                onClick={addRequirement}\n                sx={{ ml: 1, color: '#FFD700' }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Box>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n              {requirements.map((req, index) => (\n                <Chip \n                  key={index}\n                  label={req}\n                  onDelete={() => removeRequirement(index)}\n                  sx={{ \n                    backgroundColor: 'rgba(44, 85, 48, 0.7)',\n                    color: 'white',\n                    '& .MuiChip-deleteIcon': {\n                      color: 'rgba(255, 255, 255, 0.7)'\n                    }\n                  }}\n                />\n              ))}\n            </Box>\n          </Box>\n\n          {/* Benefits Section */}\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle1\" sx={{ color: '#FFD700', mb: 1 }}>\n              Benefits\n            </Typography>\n            <Box sx={{ display: 'flex', mb: 2 }}>\n              <StyledTextField\n                fullWidth\n                value={newBenefit}\n                onChange={(e) => setNewBenefit(e.target.value)}\n                placeholder=\"Add a benefit\"\n                onKeyPress={(e) => e.key === 'Enter' && addBenefit()}\n              />\n              <IconButton \n                onClick={addBenefit}\n                sx={{ ml: 1, color: '#FFD700' }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Box>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n              {benefits.map((benefit, index) => (\n                <Chip \n                  key={index}\n                  label={benefit}\n                  onDelete={() => removeBenefit(index)}\n                  sx={{ \n                    backgroundColor: 'rgba(44, 85, 48, 0.7)',\n                    color: 'white',\n                    '& .MuiChip-deleteIcon': {\n                      color: 'rgba(255, 255, 255, 0.7)'\n                    }\n                  }}\n                />\n              ))}\n            </Box>\n          </Box>\n        </Grid>\n        \n        {/* Preview Section */}\n        <Grid item xs={12} md={6}>\n          <Box sx={{ position: 'sticky', top: 20 }}>\n            <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n              Preview\n            </Typography>\n            <StyledPaper>\n              <Typography \n                variant=\"body1\" \n                component=\"pre\"\n                sx={{ \n                  color: 'white', \n                  whiteSpace: 'pre-line',\n                  fontFamily: 'inherit'\n                }}\n              >\n                {preview}\n              </Typography>\n            </StyledPaper>\n            \n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Button\n                variant=\"contained\"\n                onClick={handleSave}\n                sx={{\n                  background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                  color: '#000',\n                  '&:hover': {\n                    background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                    boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                  }\n                }}\n              >\n                Use This Description\n              </Button>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default JobDescriptionBuilder;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/JobDetailsDialog.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/employer/JobListingForm.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'StyledChip' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":80,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCloseBuilder' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":263,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  TextField,\n  Button,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  IconButton,\n  Typography,\n  Paper,\n  styled,\n  Fade,\n  Alert,\n  FormLabel\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { JamaicaLocationAutocomplete } from '../common/JamaicaLocationAutocomplete';\nimport JobDescriptionBuilder from './JobDescriptionBuilder';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  backdropFilter: 'blur(10px)',\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  borderRadius: theme.shape.borderRadius\n}));\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  marginBottom: theme.spacing(2),\n  '& .MuiOutlinedInput-root': {\n    color: '#FFFFFF',\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.3)'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: 'rgba(255, 215, 0, 0.7)',\n    '& .MuiInputLabel-asterisk': {\n      color: '#FF5252'\n    }\n  }\n}));\n\nconst StyledFormControl = styled(FormControl)(({ theme }) => ({\n  marginBottom: theme.spacing(2),\n  '& .MuiOutlinedInput-root': {\n    color: '#FFFFFF',\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.3)'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: 'rgba(255, 215, 0, 0.7)',\n    '& .MuiInputLabel-asterisk': {\n      color: '#FF5252'\n    }\n  }\n}));\n\nconst salaryOptions = Array.from({ length: 20 }, (_, i) => (i + 2) * 10000); // 20k to 200k\n\nconst StyledChip = styled(Chip)(({ theme }) => ({\n  margin: theme.spacing(0.5),\n  backgroundColor: 'rgba(255, 215, 0, 0.1)',\n  color: '#FFD700',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  '&:hover': {\n    backgroundColor: 'rgba(255, 215, 0, 0.2)'\n  }\n}));\n\nconst JobListingForm = ({ initialData, onSubmit, onCancel }) => {\n  const [builderOpen, setBuilderOpen] = useState(false);\n  // preprocess salary if object\n  const processedInitial = useMemo(() => {\n    if (initialData && typeof initialData.salary === 'object' && initialData.salary !== null) {\n      const { min, max } = initialData.salary;\n      return {\n        ...initialData,\n        salary: `${min ?? ''}-${max ?? ''}`\n      };\n    }\n    return initialData;\n  }, [initialData]);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    location: null,\n    // Pre-fill display string for edit mode so validation passes\n    locationDisplay: processedInitial?.locationDisplay || (processedInitial?.location?.formattedAddress || (typeof processedInitial?.location === 'string' ? processedInitial.location : '')) || '',\n    type: 'FULL_TIME',\n    salaryMin: '',\n    salaryMax: '',\n    requirements: [],\n    benefits: [],\n    applicationDeadline: '',\n    responsibilities: [],\n    experienceLevel: 'ENTRY',\n    department: '',\n    ...processedInitial\n  });\n\n  // Keep form in sync if parent passes in a new job (e.g., when switching edits)\n  useEffect(() => {\n    if (initialData) {\n      setFormData(prev => ({\n        ...prev,\n        ...processedInitial,\n        locationDisplay: processedInitial?.locationDisplay || (processedInitial?.location?.formattedAddress || (typeof processedInitial?.location === 'string' ? processedInitial.location : '')) || ''\n      }));\n    }\n  }, [processedInitial, initialData]);\n\n  const [errors, setErrors] = useState({});\n  const [formErrorSummary, setFormErrorSummary] = useState('');\n\n  const handleChange = (e) => {\n    if (builderOpen) return; // prevent edits while builder active\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    // Clear error when field is edited\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n\n  const handleLocationChange = (newLocation) => {\n    setFormData(prev => ({\n      ...prev,\n      location: newLocation,\n      locationDisplay: newLocation ? newLocation.formattedAddress : ''\n    }));\n    if (errors.location) {\n      setErrors(prev => ({ ...prev, location: null }));\n    }\n  };\n\n  const handleAddRequirement = () => {\n    setFormData(prev => ({\n      ...prev,\n      requirements: [...prev.requirements, '']\n    }));\n  };\n\n  const handleAddBenefit = () => {\n    setFormData(prev => ({\n      ...prev,\n      benefits: [...prev.benefits, '']\n    }));\n  };\n\n  const handleRequirementFieldChange = (index, value) => {\n    setFormData(prev => {\n      const arr = [...prev.requirements];\n      arr[index] = value;\n      return { ...prev, requirements: arr };\n    });\n  };\n\n  const handleBenefitFieldChange = (index, value) => {\n    setFormData(prev => {\n      const arr = [...prev.benefits];\n      arr[index] = value;\n      return { ...prev, benefits: arr };\n    });\n  };\n\n  const handleRemoveRequirement = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      requirements: prev.requirements.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleRemoveBenefit = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      benefits: prev.benefits.filter((_, i) => i !== index)\n    }));\n  };\n\n  const validateForm = () => {\n    if (builderOpen) {\n      setErrors({});\n      return false;\n    }\n    const newErrors = {};\n    if (!formData.title.trim()) newErrors.title = 'Title is required';\n    if (!formData.description.trim()) newErrors.description = 'Description is required';\n    if (!formData.location || !formData.locationDisplay) newErrors.location = 'Location is required';\n    if (!formData.salaryMin || !formData.salaryMax) newErrors.salary = 'Salary range is required';\n    if (formData.requirements.length === 0) newErrors.requirements = 'At least one requirement is needed';\n    if (Object.keys(newErrors).length > 0) {\n      setFormErrorSummary('Please fill in all required fields');\n    } else {\n      setFormErrorSummary('');\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      // Create a copy of formData with locationDisplay for API submission\n      const submissionData = {\n        ...formData,\n        location: formData.locationDisplay,\n        salary: `${formData.salaryMin}-${formData.salaryMax}`\n      };\n      onSubmit(submissionData);\n    }\n  };\n\n  const handleOpenBuilder = () => {\n    setBuilderOpen(true);\n  };\n\n  const handleBuilderSave = (builderData) => {\n    // builderData contains description, responsibilities, requirements, benefits\n    if (!builderData) {\n      setBuilderOpen(false);\n      return;\n    }\n    const {\n      description = '',\n      responsibilities = [],\n      requirements = [],\n      benefits = []\n    } = builderData;\n    setFormData(prev => ({\n      ...prev,\n      description,\n      responsibilities,\n      requirements,\n      benefits\n    }));\n    setBuilderOpen(false);\n  };\n\n  const handleCloseBuilder = (description) => {\n    setBuilderOpen(false);\n    setFormData(prev => ({ ...prev, description }));\n  };\n\n  return (\n    <>\n      {formErrorSummary && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {formErrorSummary}\n        </Alert>\n      )}\n      <Fade in={true} timeout={500}>\n      <StyledPaper>\n        <Box component=\"form\" onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Job Title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleChange}\n                error={!!errors.title}\n                helperText={errors.title}\n                required\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                multiline\n                rows={4}\n                label=\"Job Description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleChange}\n                error={!!errors.description}\n                helperText={errors.description}\n                required\n              />\n              <Button variant=\"outlined\" sx={{ mt: 1 }} onClick={handleOpenBuilder}>\n                Use Template\n              </Button>\n              {builderOpen && (\n                <JobDescriptionBuilder\n                  onSave={handleBuilderSave}\n                  initialData={{\n            description: formData.description,\n            responsibilities: formData.responsibilities,\n            requirements: formData.requirements,\n            benefits: formData.benefits\n          }}\n                />\n              )}\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <JamaicaLocationAutocomplete\n                value={formData.location}\n                onChange={handleLocationChange}\n                error={!!errors.location}\n                helperText={errors.location}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledFormControl fullWidth>\n                <InputLabel>Job Type</InputLabel>\n                <Select\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleChange}\n                  required\n                >\n                  <MenuItem value=\"FULL_TIME\">Full Time</MenuItem>\n                  <MenuItem value=\"PART_TIME\">Part Time</MenuItem>\n                  <MenuItem value=\"CONTRACT\">Contract</MenuItem>\n                  <MenuItem value=\"TEMPORARY\">Temporary</MenuItem>\n                  <MenuItem value=\"INTERNSHIP\">Internship</MenuItem>\n                </Select>\n              </StyledFormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledFormControl fullWidth>\n                <InputLabel>Min Salary (JMD)</InputLabel>\n                <Select\n                  name=\"salaryMin\"\n                  value={formData.salaryMin}\n                  label=\"Min Salary (JMD)\"\n                  onChange={handleChange}\n                  required\n                >\n                  {salaryOptions.map((v) => (\n                    <MenuItem key={v} value={v}>{`$${v.toLocaleString()}`}</MenuItem>\n                  ))}\n                </Select>\n              </StyledFormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledFormControl fullWidth>\n                <InputLabel>Max Salary (JMD)</InputLabel>\n                <Select\n                  name=\"salaryMax\"\n                  value={formData.salaryMax}\n                  label=\"Max Salary (JMD)\"\n                  onChange={handleChange}\n                  required\n                >\n                  {salaryOptions.map((v) => (\n                    <MenuItem key={v} value={v}>{`$${v.toLocaleString()}`}</MenuItem>\n                  ))}\n                </Select>\n              </StyledFormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <StyledFormControl fullWidth>\n                <InputLabel>Experience Level</InputLabel>\n                <Select\n                  name=\"experienceLevel\"\n                  value={formData.experienceLevel}\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"ENTRY\">Entry Level</MenuItem>\n                  <MenuItem value=\"INTERMEDIATE\">Intermediate</MenuItem>\n                  <MenuItem value=\"SENIOR\">Senior</MenuItem>\n                  <MenuItem value=\"EXPERT\">Expert</MenuItem>\n                </Select>\n              </StyledFormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControl required fullWidth sx={{ mb: 2 }}>\n                <FormLabel sx={{ color: '#FFD700', mb: 1 }} required>Requirements</FormLabel>\n                <Box>\n                  {formData.requirements.map((req, index) => (\n                    <Box key={index} sx={{ display:'flex', gap:1, mb:1 }}>\n                      <StyledTextField\n                        fullWidth\n                        value={req}\n                        onChange={(e)=>handleRequirementFieldChange(index, e.target.value)}\n                        placeholder=\"Requirement\"\n                      />\n                      <IconButton onClick={()=>handleRemoveRequirement(index)} sx={{color:'#FFD700'}}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </Box>\n                  ))}\n                  <Button startIcon={<AddIcon />} variant=\"outlined\" sx={{color:'#FFD700', borderColor:'rgba(255,215,0,0.4)'}} onClick={handleAddRequirement}>\n                    Add Requirement\n                  </Button>\n                </Box>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n              <FormControl required fullWidth sx={{ mb: 2 }}>\n                <FormLabel sx={{ color: '#FFD700', mb: 1 }} required>Benefits</FormLabel>\n                <Box>\n                  {formData.benefits.map((b, index) => (\n                    <Box key={index} sx={{ display:'flex', gap:1, mb:1 }}>\n                      <StyledTextField\n                        fullWidth\n                        value={b}\n                        onChange={(e)=>handleBenefitFieldChange(index, e.target.value)}\n                        placeholder=\"Benefit\"\n                      />\n                      <IconButton onClick={()=>handleRemoveBenefit(index)} sx={{color:'#FFD700'}}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </Box>\n                  ))}\n                  <Button startIcon={<AddIcon />} variant=\"outlined\" sx={{color:'#FFD700', borderColor:'rgba(255,215,0,0.4)'}} onClick={handleAddBenefit}>\n                    Add Benefit\n                  </Button>\n                </Box>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>\n                <Button \n                  onClick={onCancel}\n                  sx={{ \n                    color: 'rgba(255, 255, 255, 0.7)',\n                    '&:hover': { color: '#FFFFFF' }\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  variant=\"contained\"\n                  sx={{\n                    backgroundColor: '#FFD700',\n                    color: '#000000',\n                    '&:hover': {\n                      backgroundColor: '#FFE44D'\n                    }\n                  }}\n                >\n                  {initialData ? 'Update Job' : 'Create Job'}\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </StyledPaper>\n    </Fade>\n    </>\n  );\n};\n\nexport default JobListingForm;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/home/EnhancedFeaturedJobs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/home/HomePage.js","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":27,"column":1,"nodeType":"ImportDeclaration","endLine":27,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  Card,\n  Grid,\n  Container,\n  InputAdornment,\n  useTheme as useMuiTheme,\n  useMediaQuery,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Paper\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport BusinessIcon from '@mui/icons-material/Business';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { SectionLayout } from '../layout/ResponsiveLayout';\nimport PageTemplate from '../layout/PageTemplate';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useAuth } from '../../context/AuthContext';\n\n// Phase 1 Enhanced Components\nimport QuickActionsBar from './QuickActionsBar';\nimport JobCategoriesGrid from './JobCategoriesGrid';\nimport EnhancedFeaturedJobs from './EnhancedFeaturedJobs';\n\nconst HomePage = () => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const isMobile = useMediaQuery(muiTheme.breakpoints.down('md'));\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [location, setLocation] = useState('');\n  const [userTypeModal, setUserTypeModal] = useState(false);\n  \n  // Phase 1 Enhancement: User location for personalized experience\n  const [userLocation] = useState('Kingston'); // TODO: Get from GPS/user profile\n  \n  // Featured jobs data\n  const featuredJobs = [\n    {\n      id: 1,\n      title: 'Software Developer',\n      company: 'TechFlow JA',\n      location: 'Kingston',\n      salary: 'JMD 2.5M - 3.2M',\n      type: 'Full-time',\n      skills: ['React', 'Node.js'],\n      logo: '💻'\n    },\n    {\n      id: 2,\n      title: 'Marketing Manager',\n      company: 'Caribbean Marketing',\n      location: 'Montego Bay',\n      salary: 'JMD 1.8M - 2.4M',\n      type: 'Full-time',\n      skills: ['Digital Marketing'],\n      logo: '📈'\n    },\n    {\n      id: 3,\n      title: 'Graphic Designer',\n      company: 'Creative Studios',\n      location: 'Spanish Town',\n      salary: 'JMD 1.2M - 1.8M',\n      type: 'Contract',\n      skills: ['Design'],\n      logo: '🎨'\n    }\n  ];\n\n  const handleSearch = () => {\n    const params = new URLSearchParams();\n    if (searchTerm) params.append('search', searchTerm);\n    if (location) params.append('location', location);\n    navigate(`/jobs?${params.toString()}`);\n  };\n\n  const handleGetStarted = () => {\n    if (user) {\n      navigate('/dashboard');\n    } else {\n      setUserTypeModal(true);\n    }\n  };\n\n  const handleUserTypeSelect = (type) => {\n    setUserTypeModal(false);\n    navigate(`/register?type=${type}`);\n  };\n\n  // Phase 1 Enhancement: Quick action handlers\n  const handleQuickAction = (action) => {\n    console.warn('🚀 Quick Action triggered:', action);\n    switch (action) {\n      case 'location':\n        navigate(`/jobs?location=${userLocation}`);\n        break;\n      case 'part-time':\n        navigate('/jobs?type=part-time');\n        break;\n      case 'remote':\n        navigate('/jobs?type=remote');\n        break;\n      case 'latest':\n        navigate('/jobs?sort=latest');\n        break;\n      default:\n        navigate('/jobs');\n    }\n  };\n\n  const handleCategorySelect = (category) => {\n    console.warn('🏢 Category selected:', category);\n    navigate(`/jobs?industry=${encodeURIComponent(category)}`);\n  };\n\n  const handleJobSelect = (jobId) => {\n    console.warn('💼 Job selected:', jobId);\n    navigate(`/jobs/${jobId}`);\n  };\n\n  // Hero content with prominent search and call-to-action\n  const heroContent = (\n    <Box sx={{ maxWidth: 700, mx: 'auto', width: '100%' }}>\n      {/* Welcome Message */}\n      <Typography\n        variant=\"h4\"\n        sx={{\n          mb: 2,\n          textAlign: 'center',\n          color: 'white',\n          fontWeight: 700,\n          fontSize: { xs: '1.8rem', sm: '2.2rem', md: '2.8rem' }\n        }}\n      >\n        Find Your Dream Job in Jamaica! 🇯🇲\n      </Typography>\n      \n      <Typography\n        variant=\"body1\"\n        sx={{\n          mb: 2,\n          textAlign: 'center',\n          color: 'rgba(255,255,255,0.95)',\n          fontWeight: 500,\n          fontSize: { xs: '1.1rem', sm: '1.2rem' }\n        }}\n      >\n        Where your next opportunity soon come\n      </Typography>\n      \n      {/* Phase 1 Enhancement: Quick stats for confidence building */}\n      <Typography\n        variant=\"body2\"\n        sx={{\n          mb: 4,\n          textAlign: 'center',\n          color: jamaicanColors.gold,\n          fontWeight: 600,\n          fontSize: { xs: '0.9rem', sm: '1rem' }\n        }}\n      >\n        1,000+ Jobs Available • Updated Daily • 100% Free\n      </Typography>\n\n      {/* Enhanced Mobile-First Action Buttons */}\n      <Grid container spacing={2} sx={{ mb: 4, px: { xs: 1, sm: 0 } }}>\n        <Grid item xs={12} sm={6}>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            fullWidth\n            onClick={() => navigate('/jobs')}\n            sx={{\n              py: { xs: 2.5, sm: 2 },\n              minHeight: { xs: 60, sm: 56 }, // Extra thumb-friendly\n              fontSize: { xs: '1.1rem', sm: '1.1rem' },\n              fontWeight: 700,\n              bgcolor: jamaicanColors.green,\n              color: 'white',\n              borderRadius: 3,\n              boxShadow: '0 4px 16px rgba(0,150,57,0.3)',\n              '&:hover': {\n                bgcolor: jamaicanColors.green,\n                opacity: 0.9,\n                transform: 'translateY(-3px)',\n                boxShadow: '0 6px 20px rgba(0,150,57,0.4)'\n              },\n              '&:active': {\n                transform: 'translateY(-1px)'\n              }\n            }}\n          >\n            👀 Browse All Jobs\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            fullWidth\n            onClick={handleGetStarted}\n            sx={{\n              py: { xs: 2.5, sm: 2 },\n              minHeight: { xs: 60, sm: 56 }, // Extra thumb-friendly\n              fontSize: { xs: '1.1rem', sm: '1.1rem' },\n              fontWeight: 700,\n              borderColor: 'white',\n              borderWidth: 2,\n              color: 'white',\n              borderRadius: 3,\n              '&:hover': {\n                borderColor: jamaicanColors.gold,\n                backgroundColor: 'rgba(255,215,0,0.1)',\n                color: jamaicanColors.gold,\n                transform: 'translateY(-3px)',\n                boxShadow: '0 6px 20px rgba(255,215,0,0.2)'\n              },\n              '&:active': {\n                transform: 'translateY(-1px)'\n              }\n            }}\n          >\n            🚀 Get Started Now\n          </Button>\n        </Grid>\n      </Grid>\n\n      {/* Enhanced Mobile-First Search Section */}\n      <Paper\n        elevation={3}\n        sx={{\n          p: { xs: 2.5, sm: 3 },\n          backgroundColor: 'rgba(255,255,255,0.95)',\n          backdropFilter: 'blur(10px)',\n          borderRadius: 3\n        }}\n      >\n        <Typography\n          variant=\"h6\"\n          sx={{\n            mb: 2.5,\n            textAlign: 'center',\n            color: 'text.primary',\n            fontWeight: 600,\n            fontSize: { xs: '1.1rem', sm: '1.25rem' }\n          }}\n        >\n          🔍 Quick Job Search\n        </Typography>\n      \n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', sm: 'row' },\n            gap: { xs: 2, sm: 1.5 },\n            mb: 3\n          }}\n        >\n          <TextField\n            fullWidth\n            placeholder=\"What job? (Teacher, Driver, Nurse...)\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon sx={{ color: jamaicanColors.green }} />\n                </InputAdornment>\n              )\n            }}\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                backgroundColor: 'white',\n                minHeight: { xs: 52, sm: 48 }, // Touch-friendly\n                borderRadius: 2,\n                '& fieldset': { borderColor: 'rgba(0,0,0,0.2)' },\n                '&:hover fieldset': { borderColor: jamaicanColors.green },\n                '&.Mui-focused fieldset': { \n                  borderColor: jamaicanColors.green,\n                  borderWidth: 2\n                }\n              }\n            }}\n          />\n          <TextField\n            fullWidth={isMobile}\n            placeholder=\"Where? (Kingston, Spanish Town...)\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <LocationOnIcon sx={{ color: jamaicanColors.green }} />\n                </InputAdornment>\n              )\n            }}\n            sx={{\n              minWidth: { sm: 250 },\n              '& .MuiOutlinedInput-root': {\n                backgroundColor: 'white',\n                minHeight: { xs: 52, sm: 48 }, // Touch-friendly\n                borderRadius: 2,\n                '& fieldset': { borderColor: 'rgba(0,0,0,0.2)' },\n                '&:hover fieldset': { borderColor: jamaicanColors.green },\n                '&.Mui-focused fieldset': { \n                  borderColor: jamaicanColors.green,\n                  borderWidth: 2\n                }\n              }\n            }}\n          />\n        </Box>\n        \n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleSearch}\n          fullWidth\n          sx={{\n            py: { xs: 2, sm: 1.5 },\n            minHeight: { xs: 56, sm: 48 }, // Extra touch-friendly\n            fontSize: { xs: '1.1rem', sm: '1.1rem' },\n            fontWeight: 600,\n            bgcolor: jamaicanColors.green,\n            color: 'white',\n            borderRadius: 2,\n            boxShadow: '0 4px 12px rgba(0,150,57,0.3)',\n            '&:hover': {\n              bgcolor: jamaicanColors.green,\n              opacity: 0.9,\n              transform: 'translateY(-2px)',\n              boxShadow: '0 6px 16px rgba(0,150,57,0.4)'\n            },\n            '&:active': {\n              transform: 'translateY(0px)'\n            }\n          }}\n        >\n          Search Jobs 🔍\n        </Button>\n      </Paper>\n\n      {/* Quick Category Browse - Mobile-First Job Discovery */}\n      <Box sx={{ mt: 3, textAlign: 'center' }}>\n        <Typography\n          variant=\"body2\"\n          sx={{\n            mb: 2,\n            color: 'rgba(255,255,255,0.9)',\n            fontWeight: 500,\n            fontSize: { xs: '0.95rem', sm: '1rem' }\n          }}\n        >\n          Or browse by popular categories:\n        </Typography>\n        <Box\n          sx={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 1.5,\n            justifyContent: 'center',\n            maxWidth: 600,\n            mx: 'auto'\n          }}\n        >\n          {[\n            { name: 'Tourism', icon: '🏖️', count: '200+' },\n            { name: 'Healthcare', icon: '🏥', count: '150+' },\n            { name: 'Education', icon: '📚', count: '120+' },\n            { name: 'Banking', icon: '🏦', count: '80+' },\n            { name: 'Tech', icon: '💻', count: '60+' },\n            { name: 'Retail', icon: '🛍️', count: '180+' }\n          ].map((category) => (\n            <Button\n              key={category.name}\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => {\n                console.warn('Category selected:', category.name);\n                navigate(`/jobs?category=${category.name.toLowerCase()}`);\n              }}\n              sx={{\n                minHeight: 44, // Touch-friendly\n                px: 2,\n                py: 1,\n                borderColor: 'rgba(255,255,255,0.3)',\n                color: 'white',\n                fontSize: '0.85rem',\n                fontWeight: 500,\n                borderRadius: 20,\n                '&:hover': {\n                  borderColor: jamaicanColors.gold,\n                  backgroundColor: 'rgba(255,215,0,0.1)',\n                  color: jamaicanColors.gold\n                }\n              }}\n            >\n              {category.icon} {category.name} ({category.count})\n            </Button>\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  );\n\n  return (\n    <PageTemplate\n      title=\"🇯🇲 JamDung Jobs\"\n      subtitle=\"Where your next opportunity soon come\"\n      heroContent={heroContent}\n      showHero={true}\n      maxWidth=\"lg\"\n    >\n      {/* Phase 1 Enhancement: Quick Actions Bar */}\n      <SectionLayout>\n        <QuickActionsBar \n          onQuickAction={handleQuickAction}\n          userLocation={userLocation}\n        />\n      </SectionLayout>\n\n      {/* Phase 1 Enhancement: Job Categories Grid */}\n      <SectionLayout>\n        <JobCategoriesGrid \n          onCategorySelect={handleCategorySelect}\n        />\n      </SectionLayout>\n\n      {/* Phase 1 Enhancement: Enhanced Featured Jobs Section */}\n      <SectionLayout>\n        <EnhancedFeaturedJobs \n          featuredJobs={featuredJobs}\n          onJobSelect={handleJobSelect}\n        />\n      </SectionLayout>\n\n      {/* Quick Actions for Non-Logged Users */}\n      {!user && (\n        <Container maxWidth=\"md\" sx={{ py: 5 }}>\n          <Typography\n            variant=\"h5\"\n            component=\"h2\"\n            sx={{\n              textAlign: 'center',\n              mb: 4,\n              fontWeight: 600,\n              background: `linear-gradient(45deg, ${jamaicanColors.green}, ${jamaicanColors.gold})`,\n              backgroundClip: 'text',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent'\n            }}\n          >\n            Ready to start your journey?\n          </Typography>\n          <Grid container spacing={3} justifyContent=\"center\">\n            <Grid item xs={12} sm={6} md={4}>\n              <Card\n                sx={{\n                  textAlign: 'center',\n                  p: 3,\n                  cursor: 'pointer',\n                  transition: 'all 0.3s ease',\n                  '&:hover': {\n                    transform: 'translateY(-4px)',\n                    boxShadow: 4\n                  }\n                }}\n                onClick={() => navigate('/register')}\n              >\n                <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600 }}>\n                  Find Your Dream Job\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Join thousands of Jamaicans finding great opportunities\n                </Typography>\n              </Card>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Card\n                sx={{\n                  textAlign: 'center',\n                  p: 3,\n                  cursor: 'pointer',\n                  transition: 'all 0.3s ease',\n                  '&:hover': {\n                    transform: 'translateY(-4px)',\n                    boxShadow: 4\n                  }\n                }}\n                onClick={() => navigate('/jobs')}\n              >\n                <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600 }}>\n                  Browse All Jobs\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Explore opportunities across Jamaica\n                </Typography>\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      )}\n\n      {/* User Type Selection Modal */}\n      <Dialog\n        open={userTypeModal}\n        onClose={() => setUserTypeModal(false)}\n        maxWidth=\"sm\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            borderRadius: 3,\n            p: 2\n          }\n        }}\n      >\n        <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\n          <Typography variant=\"h5\" sx={{ fontWeight: 700, color: jamaicanColors.green }}>\n            Welcome to JamDung Jobs! 🇯🇲\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Tell us who you are to get started\n          </Typography>\n        </DialogTitle>\n        \n        <DialogContent sx={{ pt: 2 }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <Card\n                sx={{\n                  p: 3,\n                  textAlign: 'center',\n                  cursor: 'pointer',\n                  border: '2px solid transparent',\n                  transition: 'all 0.3s ease',\n                  '&:hover': {\n                    border: `2px solid ${jamaicanColors.green}`,\n                    transform: 'translateY(-4px)',\n                    boxShadow: 4\n                  }\n                }}\n                onClick={() => handleUserTypeSelect('jobseeker')}\n              >\n                <PersonIcon sx={{ fontSize: 48, color: jamaicanColors.green, mb: 2 }} />\n                <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 1 }}>\n                  I'm Looking for Work\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Find jobs, apply to positions, and build your career in Jamaica\n                </Typography>\n              </Card>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <Card\n                sx={{\n                  p: 3,\n                  textAlign: 'center',\n                  cursor: 'pointer',\n                  border: '2px solid transparent',\n                  transition: 'all 0.3s ease',\n                  '&:hover': {\n                    border: `2px solid ${jamaicanColors.gold}`,\n                    transform: 'translateY(-4px)',\n                    boxShadow: 4\n                  }\n                }}\n                onClick={() => handleUserTypeSelect('employer')}\n              >\n                <BusinessIcon sx={{ fontSize: 48, color: jamaicanColors.gold, mb: 2 }} />\n                <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 1 }}>\n                  I'm Hiring Talent\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Post jobs, find candidates, and grow your business with top talent\n                </Typography>\n              </Card>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions sx={{ justifyContent: 'center', pt: 2 }}>\n          <Button\n            onClick={() => setUserTypeModal(false)}\n            sx={{ color: 'text.secondary' }}\n          >\n            Maybe Later\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Footer */}\n      <Box\n        sx={{\n          bgcolor: isDarkMode ? 'grey.900' : 'grey.100',\n          py: 4,\n          mt: 4,\n          textAlign: 'center'\n        }}\n      >\n        <Container maxWidth=\"md\">\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            © {new Date().getFullYear()} JamDung Jobs - A BinGiTech Company\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Connecting Jamaica's workforce - \"Where your next opportunity soon come\"\n          </Typography>\n        </Container>\n      </Box>\n    </PageTemplate>\n  );\n};\n\nexport default HomePage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/home/JobCategoriesGrid.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/home/QuickActionsBar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/jobs/JobListings.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":31,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":14}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Chip,\n  TextField,\n  InputAdornment,\n  Button,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Slider,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  useTheme,\n  useMediaQuery\n} from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport WorkIcon from '@mui/icons-material/Work';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport FilterListIcon from '@mui/icons-material/FilterList';\n\nconst JobCard = ({ job }) => {\n  const theme = useTheme();\n  \n  return (\n    <Card \n      sx={{ \n        mb: 2,\n        border: '1px solid',\n        borderColor: 'divider',\n        '&:hover': {\n          borderColor: 'primary.main',\n          transform: 'translateY(-4px)',\n          transition: 'all 0.2s ease-in-out'\n        }\n      }}\n    >\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <Box\n            component=\"img\"\n            src={job.companyLogo}\n            alt={job.companyName}\n            sx={{ \n              width: 50, \n              height: 50, \n              borderRadius: 1,\n              mr: 2,\n              border: '1px solid',\n              borderColor: 'divider'\n            }}\n          />\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              {job.title}\n            </Typography>\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\n              {job.companyName}\n            </Typography>\n          </Box>\n        </Box>\n        \n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n          <Chip\n            icon={<LocationOnIcon />}\n            label={job.location}\n            size=\"small\"\n            sx={{ bgcolor: 'primary.light' }}\n          />\n          <Chip\n            icon={<WorkIcon />}\n            label={job.type}\n            size=\"small\"\n            sx={{ bgcolor: 'secondary.light' }}\n          />\n          <Chip\n            icon={<AttachMoneyIcon />}\n            label={job.salary}\n            size=\"small\"\n            sx={{ bgcolor: 'success.light' }}\n          />\n        </Box>\n\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          {job.description}\n        </Typography>\n\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          {job.skills.map((skill) => (\n            <Chip\n              key={skill}\n              label={skill}\n              size=\"small\"\n              variant=\"outlined\"\n              sx={{ \n                borderColor: 'primary.main',\n                color: 'primary.main'\n              }}\n            />\n          ))}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst JobListings = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const [filterDrawerOpen, setFilterDrawerOpen] = useState(false);\n  const [salaryRange, setSalaryRange] = useState([30000, 150000]);\n\n  // Mock data\n  const jobs = [\n    {\n      id: 1,\n      title: 'Senior Software Developer',\n      companyName: 'Tech Jamaica Ltd',\n      companyLogo: '/images/company1.png',\n      location: 'Kingston',\n      type: 'Full-time',\n      salary: '$80,000 - $120,000',\n      description: 'Looking for an experienced developer to join our growing team...',\n      skills: ['React', 'Node.js', 'PostgreSQL']\n    }\n    // Add more mock jobs...\n  ];\n\n  const FilterSection = () => (\n    <Box sx={{ p: isMobile ? 2 : 0 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Filters\n      </Typography>\n      \n      <Box sx={{ mb: 3 }}>\n        <Typography gutterBottom>Salary Range</Typography>\n        <Slider\n          value={salaryRange}\n          onChange={(e, newValue) => setSalaryRange(newValue)}\n          valueLabelDisplay=\"auto\"\n          min={0}\n          max={200000}\n          valueLabelFormat={(value) => `$${value.toLocaleString()}`}\n        />\n      </Box>\n\n      <Box sx={{ mb: 3 }}>\n        <Typography gutterBottom>Job Type</Typography>\n        <FormGroup>\n          <FormControlLabel control={<Checkbox />} label=\"Full-time\" />\n          <FormControlLabel control={<Checkbox />} label=\"Part-time\" />\n          <FormControlLabel control={<Checkbox />} label=\"Contract\" />\n          <FormControlLabel control={<Checkbox />} label=\"Remote\" />\n        </FormGroup>\n      </Box>\n\n      <Box sx={{ mb: 3 }}>\n        <Typography gutterBottom>Experience Level</Typography>\n        <FormGroup>\n          <FormControlLabel control={<Checkbox />} label=\"Entry Level\" />\n          <FormControlLabel control={<Checkbox />} label=\"Mid Level\" />\n          <FormControlLabel control={<Checkbox />} label=\"Senior Level\" />\n        </FormGroup>\n      </Box>\n    </Box>\n  );\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Find Your Next Opportunity\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <TextField\n              fullWidth\n              placeholder=\"Search jobs...\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                )\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <TextField\n              fullWidth\n              placeholder=\"Location...\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LocationOnIcon />\n                  </InputAdornment>\n                )\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} md={2}>\n            {isMobile ? (\n              <Button\n                fullWidth\n                variant=\"contained\"\n                startIcon={<FilterListIcon />}\n                onClick={() => setFilterDrawerOpen(true)}\n              >\n                Filters\n              </Button>\n            ) : (\n              <Button fullWidth variant=\"contained\">\n                Search\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Grid container spacing={4}>\n        {!isMobile && (\n          <Grid item xs={12} md={3}>\n            <FilterSection />\n          </Grid>\n        )}\n        <Grid item xs={12} md={9}>\n          {jobs.map((job) => (\n            <JobCard key={job.id} job={job} />\n          ))}\n        </Grid>\n      </Grid>\n\n      <Drawer\n        anchor=\"right\"\n        open={filterDrawerOpen}\n        onClose={() => setFilterDrawerOpen(false)}\n      >\n        <Box sx={{ width: 280 }}>\n          <FilterSection />\n        </Box>\n      </Drawer>\n    </Container>\n  );\n};\n\nexport default JobListings;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/jobseeker/ApplicationsList.js","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":159,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":159,"endColumn":108}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Button,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  Fade,\n  Tooltip,\n  IconButton,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid\n} from '@mui/material';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport axios from 'axios';\nimport { format } from 'date-fns';\nimport { buildApiUrl } from '../../config';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\n\nconst ApplicationsList = () => {\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [selectedApplication, setSelectedApplication] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n\n  useEffect(() => {\n    fetchApplications();\n  }, []);\n\n  const fetchApplications = async () => {\n    setLoading(true);\n    try {\n      // Get the token directly from localStorage\n      const token = localStorage.getItem('jamdung_auth_token');\n      \n      // Log the token presence (not the actual token)\n      logDev('debug', 'Fetching applications - pre request', { \n        hasToken: !!token,\n        tokenLength: token ? token.length : 0,\n        endpoint: '/api/jobseeker/applications' \n      });\n      \n      // If no token is available, throw an error to be handled\n      if (!token) {\n        throw new Error('Authentication token not found. Please log in again.');\n      }\n      \n      // Create a specific instance with the token for this request\n      const headers = {\n        'Authorization': `Bearer ${token}`\n      };\n      \n      // Make the request with explicit headers\n      const response = await axios.get(buildApiUrl('/api/jobseeker/applications'), { headers });\n      \n      // Add more detailed response logging\n      logDev('debug', 'Applications fetched successfully', { \n        count: response.data?.applications?.length || 0,\n        hasApplications: Array.isArray(response.data?.applications),\n        responseStatus: response.status,\n        contentType: response.headers?.['content-type']\n      });\n      \n      // Log the full response structure (sanitized)\n      logDev('debug', 'Applications response structure', {\n        dataKeys: Object.keys(response.data || {}),\n        isApplicationsArray: Array.isArray(response.data?.applications),\n        firstApplication: response.data?.applications?.[0] ? \n          { id: response.data.applications[0].id, status: response.data.applications[0].status } : null\n      });\n      \n      setApplications(response.data.applications || []);\n      // Clear any previous errors\n      setError(null);\n    } catch (err) {\n      // Add more detailed error logging\n      logError('Error fetching applications', err, {\n        module: 'ApplicationsList',\n        function: 'fetchApplications',\n        endpoint: '/api/jobseeker/applications',\n        errorStatus: err.response?.status,\n        errorData: sanitizeForLogging(err.response?.data),\n        errorMessage: err.message,\n        hasResponse: !!err.response\n      });\n      \n      // Handle different error cases\n      if (err.message === 'Authentication token not found. Please log in again.') {\n        setError('Please log in to view your applications.');\n      } else if (err.response && err.response.status === 401) {\n        setError('Your session has expired. Please log in again.');\n      } else if (err.response && err.response.status !== 404) {\n        setError('Failed to load your applications. Please try again later.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleViewDetails = (application) => {\n    setSelectedApplication(application);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleDownloadResume = async (applicationId, resumeUrl) => {\n    try {\n      const response = await axios.get(resumeUrl, {\n        responseType: 'blob'\n      });\n      \n      // Create a blob link to download\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `resume-${applicationId}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      link.parentNode.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      logError('Error downloading resume', err, sanitizeForLogging({\n        module: 'ApplicationsList',\n        function: 'handleDownloadResume',\n        applicationId,\n        errorStatus: err.response?.status\n      }));\n      setError('Failed to download resume. Please try again.');\n    }\n  };\n\n  const handleDeleteApplication = async (applicationId) => {\n    if (window.confirm('Are you sure you want to withdraw this application? This action cannot be undone.')) {\n      try {\n        await axios.delete(buildApiUrl(`/applications/${applicationId}`));\n        // Remove from state\n        setApplications(prev => prev.filter(app => app.id !== applicationId));\n        logDev('debug', 'Application withdrawn successfully', sanitizeForLogging({ \n          applicationId,\n          action: 'withdraw'\n        }));\n      } catch (err) {\n        logError('Error withdrawing application', err, sanitizeForLogging({\n          module: 'ApplicationsList',\n          function: 'handleDeleteApplication',\n          applicationId,\n          errorStatus: err.response?.status,\n          action: 'withdraw'\n        }));\n        setError('Failed to withdraw application. Please try again.');\n      }\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'APPLIED':\n        return { bg: 'rgba(21, 101, 192, 0.2)', color: '#64b5f6' }; // Blue\n      case 'PENDING':\n        return { bg: 'rgba(21, 101, 192, 0.2)', color: '#64b5f6' }; // Blue\n      case 'REVIEWING':\n        return { bg: 'rgba(245, 127, 23, 0.2)', color: '#ffd54f' }; // Amber\n      case 'INTERVIEW':\n        return { bg: 'rgba(46, 125, 50, 0.2)', color: '#81c784' }; // Green\n      case 'OFFERED':\n        return { bg: 'rgba(123, 31, 162, 0.2)', color: '#ce93d8' }; // Purple\n      case 'REJECTED':\n        return { bg: 'rgba(198, 40, 40, 0.2)', color: '#ef9a9a' }; // Red\n      case 'WITHDRAWN':\n        return { bg: 'rgba(97, 97, 97, 0.2)', color: '#bdbdbd' }; // Grey\n      default:\n        return { bg: 'rgba(33, 33, 33, 0.2)', color: '#e0e0e0' }; // Default grey\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return format(new Date(dateString), 'MMM dd, yyyy');\n  };\n\n  const filteredApplications = applications.filter(app => {\n    if (tabValue === 0) return true; // All applications\n    if (tabValue === 1) return ['PENDING', 'APPLIED', 'REVIEWING', 'INTERVIEW'].includes(app.status); // Active\n    if (tabValue === 2) return ['OFFERED'].includes(app.status); // Offered\n    if (tabValue === 3) return ['REJECTED', 'WITHDRAWN'].includes(app.status); // Closed\n    return true;\n  });\n\n  return (\n    <Fade in={true} timeout={800}>\n      <Box sx={{ color: 'white' }}>\n        {/* Title moved to parent ApplicationsPage component */}\n\n        {error && <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>}\n\n        <Box sx={{ borderBottom: 1, borderColor: 'rgba(255, 215, 0, 0.3)', mb: 3 }}>\n          <Tabs\n            value={tabValue}\n            onChange={handleTabChange}\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            sx={{\n              '& .MuiTabs-indicator': {\n                backgroundColor: '#FFD700'\n              }\n            }}\n          >\n            <Tab label=\"All Applications\" sx={{ color: 'rgba(255, 255, 255, 0.7)', '&.Mui-selected': { color: '#FFD700' } }} />\n            <Tab label=\"Active\" sx={{ color: 'rgba(255, 255, 255, 0.7)', '&.Mui-selected': { color: '#FFD700' } }} />\n            <Tab label=\"Offered\" sx={{ color: 'rgba(255, 255, 255, 0.7)', '&.Mui-selected': { color: '#FFD700' } }} />\n            <Tab label=\"Closed\" sx={{ color: 'rgba(255, 255, 255, 0.7)', '&.Mui-selected': { color: '#FFD700' } }} />\n          </Tabs>\n        </Box>\n\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress sx={{ color: '#FFD700' }} />\n          </Box>\n        ) : error ? (\n          <Alert severity=\"error\" sx={{ \n            mb: 3,\n            backgroundColor: 'rgba(30, 30, 30, 0.9)',\n            color: '#ff6b6b',\n            border: '1px solid #ff6b6b'\n          }}>\n            {error}\n          </Alert>\n        ) : filteredApplications.length === 0 ? (\n          <Paper \n            elevation={1} \n            sx={{ \n              p: 4, \n              textAlign: 'center',\n              borderRadius: 2,\n              backgroundColor: 'rgba(249, 249, 249, 0.9)',\n              border: '1px solid rgba(255, 215, 0, 0.1)',\n              backdropFilter: 'blur(5px)'\n            }}\n          >\n            <Box sx={{ mb: 3 }}>\n              <img \n                src=\"/images/icons/application-empty.svg\" \n                alt=\"No applications\" \n                style={{ width: '100px', height: '100px', opacity: 0.7 }} \n                onError={(e) => {\n                  e.target.src = 'https://img.icons8.com/fluency/96/null/document.png';\n                }}\n              />\n            </Box>\n            <Typography variant=\"h6\" sx={{ color: '#2C5530', fontWeight: 600 }} gutterBottom>\n              {tabValue === 0 ? 'Ready to start your career journey?' : 'Nothing here yet'}\n            </Typography>\n            <Typography variant=\"body1\" color=\"textSecondary\" paragraph sx={{ maxWidth: '500px', mx: 'auto' }}>\n              {tabValue === 0 \n                ? 'Your job applications will appear here once you start applying. Browse available jobs to find your perfect match in Jamaica.' \n                : \"You don't have any applications in this category yet. Keep applying to see updates here.\"}\n            </Typography>\n            <Button \n              variant=\"contained\"\n              href=\"/jobs\"\n              sx={{\n                mt: 2,\n                background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                color: '#000',\n                '&:hover': {\n                  background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                  transform: 'translateY(-2px)',\n                  boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                },\n                transition: 'all 0.3s ease',\n                textTransform: 'none',\n                fontWeight: 600,\n                px: 3,\n                py: 1.2\n              }}\n            >\n              Explore Jobs\n            </Button>\n          </Paper>\n        ) : (\n          <TableContainer component={Paper} sx={{ \n            mb: 4, \n            backgroundColor: 'rgba(20, 20, 20, 0.85)',\n            border: '1px solid rgba(255, 215, 0, 0.3)',\n            backdropFilter: 'blur(10px)',\n            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n          }}>\n            <Table sx={{ '& .MuiTableCell-root': { borderColor: 'rgba(255, 215, 0, 0.1)' } }}>\n              <TableHead sx={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}>\n                <TableRow>\n                  <TableCell sx={{ color: '#FFD700', fontWeight: 600 }}>Job Title</TableCell>\n                  <TableCell sx={{ color: '#FFD700', fontWeight: 600 }}>Company</TableCell>\n                  <TableCell sx={{ color: '#FFD700', fontWeight: 600 }}>Applied On</TableCell>\n                  <TableCell sx={{ color: '#FFD700', fontWeight: 600 }}>Status</TableCell>\n                  <TableCell align=\"right\" sx={{ color: '#FFD700', fontWeight: 600 }}>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredApplications.map((application) => {\n                  const statusStyle = getStatusColor(application.status);\n                  return (\n                    <TableRow key={application.id} hover>\n                      <TableCell sx={{ color: 'white' }}>{application.job.title}</TableCell>\n                      <TableCell sx={{ color: 'white' }}>{application.job.company.name}</TableCell>\n                      <TableCell sx={{ color: 'white' }}>{formatDate(application.createdAt)}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={application.status.replace('_', ' ')} \n                          sx={{ \n                            backgroundColor: statusStyle.bg,\n                            color: statusStyle.color,\n                            fontWeight: 600\n                          }} \n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', gap: 1 }}>\n                          <Tooltip title=\"View Details\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleViewDetails(application)}\n                              sx={{ color: '#FFD700' }}\n                            >\n                              <VisibilityIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Download Resume\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleDownloadResume(application.id, application.resumeUrl)}\n                              sx={{ color: '#007E1B' }}\n                            >\n                              <DownloadIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          {['PENDING', 'APPLIED', 'REVIEWING'].includes(application.status) && (\n                            <Tooltip title=\"Withdraw Application\">\n                              <IconButton \n                                size=\"small\" \n                                onClick={() => handleDeleteApplication(application.id)}\n                                sx={{ color: '#ff6b6b' }}\n                              >\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          )}\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n\n        {/* Application Details Dialog */}\n        <Dialog\n          open={openDialog}\n          onClose={handleCloseDialog}\n          maxWidth=\"md\"\n          fullWidth\n          PaperProps={{\n            style: {\n              backgroundColor: 'rgba(20, 20, 20, 0.95)',\n              border: '1px solid rgba(255, 215, 0, 0.3)',\n              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',\n              color: 'white'\n            }\n          }}\n        >\n          {selectedApplication && (\n            <>\n              <DialogTitle sx={{ \n                fontWeight: 700, \n                borderBottom: '1px solid rgba(255, 215, 0, 0.3)',\n                pb: 2,\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                color: '#FFD700'\n              }}>\n                Application Details\n              </DialogTitle>\n              <DialogContent sx={{ mt: 2 }}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Job Title</Typography>\n                    <Typography variant=\"body1\" sx={{ fontWeight: 600, mb: 2, color: 'white' }}>\n                      {selectedApplication.job.title}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Company</Typography>\n                    <Typography variant=\"body1\" sx={{ fontWeight: 600, mb: 2, color: 'white' }}>\n                      {selectedApplication.job.company.name}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Applied On</Typography>\n                    <Typography variant=\"body1\" sx={{ mb: 2, color: 'white' }}>\n                      {formatDate(selectedApplication.createdAt)}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Status</Typography>\n                    <Chip \n                      label={selectedApplication.status.replace('_', ' ')} \n                      sx={{ \n                        backgroundColor: getStatusColor(selectedApplication.status).bg,\n                        color: getStatusColor(selectedApplication.status).color,\n                        fontWeight: 600,\n                        mb: 2\n                      }} \n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Cover Letter</Typography>\n                    <Paper variant=\"outlined\" sx={{ p: 2, mb: 2, backgroundColor: 'rgba(30, 30, 30, 0.7)', border: '1px solid rgba(255, 215, 0, 0.2)' }}>\n                      <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line', color: 'white' }}>\n                        {selectedApplication.coverLetter || 'No cover letter provided'}\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                  {selectedApplication.additionalInfo && (\n                    <Grid item xs={12}>\n                      <Typography variant=\"subtitle2\" sx={{ color: 'rgba(255, 215, 0, 0.7)' }}>Additional Information</Typography>\n                      <Paper variant=\"outlined\" sx={{ p: 2, mb: 2, backgroundColor: 'rgba(30, 30, 30, 0.7)', border: '1px solid rgba(255, 215, 0, 0.2)' }}>\n                        <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line', color: 'white' }}>\n                          {selectedApplication.additionalInfo}\n                        </Typography>\n                      </Paper>\n                    </Grid>\n                  )}\n                </Grid>\n              </DialogContent>\n              <DialogActions sx={{ p: 2, borderTop: '1px solid rgba(255, 215, 0, 0.3)' }}>\n                <Button \n                  onClick={handleCloseDialog}\n                  sx={{\n                    color: '#FFD700',\n                    borderColor: '#FFD700',\n                    border: '1px solid',\n                    '&:hover': {\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                    }\n                  }}\n                >\n                  Close\n                </Button>\n                <Button \n                  variant=\"contained\"\n                  onClick={() => handleDownloadResume(selectedApplication.id, selectedApplication.resumeUrl)}\n                  startIcon={<DownloadIcon />}\n                  sx={{\n                    background: 'linear-gradient(45deg, #007E1B 30%, #009921 90%)',\n                    color: 'white',\n                    boxShadow: '0 2px 8px rgba(0, 126, 27, 0.5)',\n                    '&:hover': {\n                      background: 'linear-gradient(45deg, #005714 30%, #007E1B 90%)',\n                      boxShadow: '0 4px 12px rgba(0, 126, 27, 0.7)'\n                    },\n                    textTransform: 'none'\n                  }}\n                >\n                  Download Resume\n                </Button>\n              </DialogActions>\n            </>\n          )}\n        </Dialog>\n      </Box>\n    </Fade>\n  );\n};\n\nexport default ApplicationsList;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/jobseeker/JobApplicationForm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/jobseeker/QuickApplyModal.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'buildApiUrl' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfileData'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfileData, open]","fix":{"range":[1547,1553],"text":"[fetchProfileData, open]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  TextField,\n  CircularProgress,\n  Divider,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  LinearProgress\n} from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport InfoIcon from '@mui/icons-material/Info';\nimport api from '../../utils/api';\nimport { buildApiUrl } from '../../config';\nimport { useAuth } from '../../context/AuthContext';\nimport { logDev, logError, sanitizeForLogging } from '../../utils/loggingUtils';\n\nconst QuickApplyModal = ({ open, onClose, job, onSuccess }) => {\n  const { currentUser } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [alreadyApplied, setAlreadyApplied] = useState(false);\n  const [profileData, setProfileData] = useState(null);\n  const [applicationData, setApplicationData] = useState({\n    coverLetter: '',\n    resumeId: '',\n    phoneNumber: '',\n    availability: 'IMMEDIATE',\n    salary: '',\n    additionalInfo: ''\n  });\n  const [profileCompleteness, setProfileCompleteness] = useState({\n    percentage: 0,\n    missingFields: []\n  });\n\n  // Fetch profile data whenever the modal is opened\n  useEffect(() => {\n    if (open) {\n      fetchProfileData();\n    }\n  }, [open]);\n\n  // Reset transient UI states whenever the modal is reopened\n  useEffect(() => {\n    if (open) {\n      setError(null);\n      setSuccess(false);\n      setAlreadyApplied(false);\n    }\n  }, [open]);\n\n  const fetchProfileData = async () => {\n    setLoading(true);\n    try {\n      // Fetch jobseeker profile (uniform with CandidateDashboard)\n      const response = await api.get('/api/jobseeker/profile');\n\n      // Backend may return { success, data } wrapper or raw object – normalise it\n      const userData = response.data?.data || response.data || {};\n      const candidateData = userData.candidateProfile || userData.candidate_profile || {};\n\n      // Normalise resumes – backend currently stores single resumeUrl/resumeFileName, but may use snake_case keys\n      let resumes = [];\n      if (Array.isArray(candidateData.resumes) && candidateData.resumes.length) {\n        resumes = candidateData.resumes;\n      } else {\n        // support both camelCase and snake_case single-resume fields\n        const singleResumeUrl = candidateData.resumeUrl || candidateData.resume_url;\n        const singleResumeName = candidateData.resumeFileName || candidateData.resume_file_name;\n        if (singleResumeUrl) {\n          resumes = [{\n            id: 'default',\n            name: singleResumeName || 'Resume',\n            uploadDate: candidateData.updatedAt || candidateData.updated_at || new Date().toISOString(),\n            url: singleResumeUrl\n          }];\n        }\n      }\n\n      // Merge and normalise important fields for completeness check\n      const mergedProfile = {\n        ...candidateData,\n        resumes,\n        // Normalised phone number field\n        phoneNumber: candidateData.phoneNumber || candidateData.phone_number || userData.phoneNumber || userData.phone_number || '',\n        // Normalised experience array – backend may use experience, workExperience, work_experience, experiences\n        experience: \n          candidateData.experience || \n          candidateData.experiences || \n          candidateData.workExperience || \n          candidateData.work_experience || \n          userData.experience || \n          userData.workExperience || \n          userData.work_experience || []\n      };\n\n      setProfileData(mergedProfile);\n\n      // Pre-fill application data from profile\n      setApplicationData(prev => ({\n        ...prev,\n        phoneNumber: mergedProfile.phoneNumber,\n        resumeId: resumes.length > 0 ? resumes[0].id : ''\n      }));\n\n      // Calculate profile completeness based on merged profile\n      calculateProfileCompleteness(mergedProfile);\n      \n      // Log normalised profile data in development\n      logDev('debug', 'Jobseeker profile fetched for quick apply', {\n        resumeCount: resumes.length,\n        hasPhone: !!(candidateData.phoneNumber || candidateData.phone_number || userData.phoneNumber || userData.phone_number),\n        userId: currentUser?.id\n      });\n    } catch (error) {\n      logError('Error fetching profile data for quick apply', error, {\n        module: 'QuickApplyModal',\n        function: 'fetchProfileData',\n        userId: currentUser?.id,\n        status: error.response?.status\n      });\n      setError('Failed to load your profile data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateProfileCompleteness = (profile) => {\n    const missingFields = [];\n    let completedFields = 0;\n    let totalFields = 0;\n\n    // Check required fields – support snake_case too\n    const requiredFields = [\n      { name: 'resume', value: profile.resumes && profile.resumes.length > 0 },\n      { name: 'phoneNumber', value: profile.phoneNumber },\n      { name: 'skills', value: profile.skills && profile.skills.length > 0 },\n      { name: 'education', value: profile.education && profile.education.length > 0 },\n      { \n        name: 'experience', \n        value: Array.isArray(profile.experience) \n          ? profile.experience.length > 0 \n          : (typeof profile.experience === 'string' && profile.experience.trim().length > 0) \n      }\n    ];\n\n    requiredFields.forEach(field => {\n      totalFields++;\n      if (field.value) {\n        completedFields++;\n      } else {\n        missingFields.push(field.name);\n      }\n    });\n\n    const percentage = Math.round((completedFields / totalFields) * 100);\n    setProfileCompleteness({\n      percentage,\n      missingFields\n    });\n    \n    // Log profile completeness in development\n    logDev('debug', 'Profile completeness calculated', {\n      percentage,\n      missingFields,\n      userId: currentUser?.id\n    });\n  };\n\n  const handleChange = (field) => (event) => {\n    setApplicationData(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n    \n    // Log field changes in development\n    logDev('debug', 'Application form field changed', {\n      field,\n      fieldType: typeof event.target.value,\n      valueLength: typeof event.target.value === 'string' ? event.target.value.length : 'N/A'\n    });\n  };\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    setError(null);\n    \n    // Log submission attempt in development\n    logDev('debug', 'Validating application before submission', sanitizeForLogging({\n      jobId: job?.id,\n      resumeProvided: !!applicationData.resumeId,\n      phoneProvided: !!applicationData.phoneNumber,\n      coverLetterLength: applicationData.coverLetter?.length || 0,\n      profileCompleteness: profileCompleteness.percentage\n    }));\n\n    try {\n      // Create application data\n      const payload = {\n        jobId: job.id,\n        coverLetter: applicationData.coverLetter,\n        resumeId: applicationData.resumeId,\n        phoneNumber: applicationData.phoneNumber,\n        availability: applicationData.availability,\n        salary: applicationData.salary,\n        additionalInfo: applicationData.additionalInfo\n      };\n      \n      // Log application payload in development (sanitized)\n      logDev('debug', 'Submitting application', sanitizeForLogging(payload));\n\n      // Submit application to backend\n      const response = await api.post(`/api/jobs/${job.id}/apply`, payload);\n      \n      if (response.status === 201) {\n        setSuccess(true);\n        \n        // Log successful submission\n        logDev('info', 'Application submitted successfully', {\n          jobId: job?.id,\n          applicationId: response.data?.id,\n          userId: currentUser?.id\n        });\n        \n        // Call onSuccess after a delay to allow user to see success message\n        setTimeout(() => {\n          onSuccess(response.data);\n        }, 2000);\n      }\n    } catch (err) {\n      // Log submission error with context\n      logError('Application submission failed', err, {\n        module: 'QuickApplyModal',\n        function: 'handleSubmit',\n        jobId: job?.id,\n        userId: currentUser?.id,\n        status: err.response?.status,\n        errorMessage: err.response?.data?.message\n      });\n      \n      // Determine specific error type for better user feedback\n      let errorMessage = 'Failed to submit application. Please try again.';\n      if (err.response?.status === 400) {\n        errorMessage = err.response.data?.message || 'Missing required information for application.';\n      } else if (err.response?.status === 409) {\n        // User has already applied – show informational dialog instead of error\n        setAlreadyApplied(true);\n        return; // Skip setting generic error/UI flow\n      } else if (err.response?.status === 403) {\n        errorMessage = 'You do not have permission to apply for this job.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const availabilityOptions = [\n    { value: 'IMMEDIATE', label: 'Immediately' },\n    { value: 'ONE_WEEK', label: 'One week notice' },\n    { value: 'TWO_WEEKS', label: 'Two weeks notice' },\n    { value: 'ONE_MONTH', label: 'One month notice' },\n    { value: 'NEGOTIABLE', label: 'Negotiable' }\n  ];\n\n  const formatMissingFieldName = (fieldName) => {\n    switch (fieldName) {\n      case 'resume':\n        return 'Resume';\n      case 'phoneNumber':\n        return 'Phone Number';\n      case 'skills':\n        return 'Skills';\n      case 'education':\n        return 'Education';\n      case 'experience':\n        return 'Work Experience';\n      default:\n        return fieldName;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n        <DialogContent>\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n            <CircularProgress sx={{ color: '#2C5530' }} />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (success) {\n    return (\n      <Dialog \n        open={open} \n        onClose={() => {\n          logDev('debug', 'Success dialog closed');\n          onClose();\n        }} \n        maxWidth=\"sm\" \n        fullWidth\n      >\n        <DialogContent>\n          <Box sx={{ py: 2, textAlign: 'center' }}>\n            <CheckCircleIcon sx={{ fontSize: 60, color: '#4caf50', mb: 2 }} />\n            <Typography variant=\"h5\" gutterBottom>\n              Thank you for applying!\n            </Typography>\n            <Typography variant=\"body1\" sx={{ mb: 3 }}>\n              Thank you for applying, your employer should be getting a notification.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              onClick={() => onClose()}\n              sx={{\n                background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                color: '#000',\n                '&:hover': {\n                  background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n                }\n              }}\n            >\n              Close\n            </Button>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  // Show dedicated message if the user has already applied for this job\n  if (alreadyApplied) {\n    return (\n      <Dialog\n        open={open}\n        onClose={() => {\n          logDev('debug', 'Already-applied dialog closed');\n          onClose();\n        }}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogContent>\n          <Box sx={{ py: 2, textAlign: 'center' }}>\n            <InfoIcon sx={{ fontSize: 60, color: '#2196f3', mb: 2 }} />\n            <Typography variant=\"h5\" gutterBottom>\n              You have already applied!\n            </Typography>\n            <Typography variant=\"body1\" sx={{ mb: 3 }}>\n              Our records show you already submitted an application for this position. The employer has been notified.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              onClick={() => onClose()}\n              sx={{\n                background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                color: '#000',\n                '&:hover': {\n                  background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n                }\n              }}\n            >\n              Close\n            </Button>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog \n      open={open} \n      onClose={() => {\n        logDev('debug', 'Application form closed without submission', {\n          jobId: job?.id,\n          formState: Object.keys(applicationData).length > 0 ? 'partially_filled' : 'empty' \n        });\n        onClose();\n      }} \n      maxWidth=\"md\" \n      fullWidth\n    >\n      <DialogTitle sx={{ \n        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n        background: 'linear-gradient(90deg, rgba(44, 85, 48, 0.1), rgba(255, 215, 0, 0.1))'\n      }}>\n        <Typography variant=\"h6\">Quick Apply: {job.title}</Typography>\n        <Typography variant=\"subtitle2\" color=\"text.secondary\">\n          {job.company?.name} • {job.location}\n        </Typography>\n      </DialogTitle>\n\n      <DialogContent sx={{ pt: 3 }}>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {profileCompleteness.percentage < 100 && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n              Your profile is {profileCompleteness.percentage}% complete\n            </Typography>\n            <LinearProgress \n              variant=\"determinate\" \n              value={profileCompleteness.percentage} \n              sx={{ \n                mb: 2, \n                height: 8, \n                borderRadius: 4,\n                backgroundColor: 'rgba(255, 215, 0, 0.2)',\n                '& .MuiLinearProgress-bar': {\n                  backgroundColor: profileCompleteness.percentage < 50 ? '#f44336' : \n                                  profileCompleteness.percentage < 80 ? '#ff9800' : '#4caf50'\n                }\n              }} \n            />\n            <Typography variant=\"body2\">\n              Complete these fields in your profile for better application success:\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\n              {profileCompleteness.missingFields.map(field => (\n                <Chip \n                  key={field}\n                  label={formatMissingFieldName(field)}\n                  size=\"small\"\n                  icon={<WarningIcon />}\n                  sx={{ \n                    backgroundColor: 'rgba(255, 152, 0, 0.1)', \n                    borderColor: 'rgba(255, 152, 0, 0.5)',\n                    color: '#ff9800'\n                  }}\n                />\n              ))}\n            </Box>\n          </Alert>\n        )}\n\n        <Grid container spacing={3}>\n          {/* Resume Selection */}\n          <Grid item xs={12}>\n            <FormControl fullWidth error={!applicationData.resumeId}>\n              <InputLabel>Select Resume</InputLabel>\n              <Select\n                value={applicationData.resumeId}\n              onChange={(e) => {\n                handleChange('resumeId')(e);\n                logDev('debug', 'Resume selected', { \n                  resumeId: e.target.value,\n                  available: profileData?.resumes?.length || 0\n                });\n              }}\n              label=\"Select Resume\"\n            >\n                {profileData?.resumes?.length > 0 ? (\n                  profileData.resumes.map(resume => (\n                    <MenuItem key={resume.id} value={resume.id}>\n                      {resume.name || 'Resume'} (Uploaded {new Date(resume.uploadDate).toLocaleDateString()})\n                    </MenuItem>\n                  ))\n                ) : (\n                  <MenuItem disabled value=\"\">\n                    No resumes uploaded\n                  </MenuItem>\n                )}\n              </Select>\n              {!applicationData.resumeId && (\n                <Typography variant=\"caption\" color=\"error\">\n                  A resume is required to apply\n                </Typography>\n              )}\n            </FormControl>\n          </Grid>\n\n          {/* Cover Letter */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Cover Letter (Optional)\"\n              value={applicationData.coverLetter}\n              onChange={handleChange('coverLetter')}\n              placeholder=\"Introduce yourself and explain why you're a good fit for this position...\"\n            />\n          </Grid>\n\n          {/* Phone Number */}\n          <Grid item xs={12} md={6}>\n            <TextField\n              fullWidth\n              label=\"Phone Number\"\n              value={applicationData.phoneNumber}\n              onChange={handleChange('phoneNumber')}\n              placeholder=\"+1 (876) 123-4567\"\n            />\n          </Grid>\n\n          {/* Availability */}\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth>\n              <InputLabel>Availability</InputLabel>\n              <Select\n                value={applicationData.availability}\n                onChange={handleChange('availability')}\n                label=\"Availability\"\n              >\n                {availabilityOptions.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Expected Salary */}\n          <Grid item xs={12} md={6}>\n            <TextField\n              fullWidth\n              label=\"Expected Salary (Optional)\"\n              value={applicationData.salary}\n              onChange={handleChange('salary')}\n              placeholder=\"e.g., $60,000 - $70,000\"\n            />\n          </Grid>\n\n          {/* Additional Info */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={2}\n              label=\"Additional Information (Optional)\"\n              value={applicationData.additionalInfo}\n              onChange={handleChange('additionalInfo')}\n              placeholder=\"Any other information you'd like to share with the employer...\"\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n\n      <DialogActions sx={{ px: 3, py: 2, borderTop: '1px solid rgba(0, 0, 0, 0.12)' }}>\n        <Button \n          onClick={onClose}\n          sx={{ color: '#2C5530' }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            logDev('debug', 'Submit button clicked', {\n              profileCompleteness: profileCompleteness.percentage,\n              hasResume: !!applicationData.resumeId,\n              hasPhone: !!applicationData.phoneNumber\n            });\n            handleSubmit();\n          }}\n          disabled={submitting || !applicationData.resumeId || profileCompleteness.percentage < 50}\n          sx={{\n            background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n            color: '#000',\n            '&:hover': {\n              background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n            }\n          }}\n        >\n          {submitting ? (\n            <>\n              <CircularProgress size={20} sx={{ mr: 1, color: '#000' }} />\n              Submitting...\n            </>\n          ) : 'Submit Application'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default QuickApplyModal;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/layout/PageTemplate.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Container' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'slideDirection' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'jamaicanColors' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":109,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  useTheme as useMuiTheme,\n  useMediaQuery,\n  Slide\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport { HeroLayout, PageLayout, SectionLayout, CardLayout } from './ResponsiveLayout';\n\nconst PageTemplate = ({\n  title,\n  subtitle,\n  heroContent,\n  children,\n  showHero = true,\n  heroHeight = 'auto',\n  maxWidth = 'lg',\n  fadeIn = true,\n  slideDirection = 'up',\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const isMobile = useMediaQuery(muiTheme.breakpoints.down('md'));\n\n  const heroSection = showHero && (\n    <HeroLayout\n      sx={{\n        minHeight: heroHeight === 'auto' \n          ? { xs: '50vh', sm: '60vh', md: '70vh' }\n          : heroHeight,\n        display: 'flex',\n        alignItems: 'center',\n        textAlign: 'center'\n      }}\n    >\n      <Box sx={{ width: '100%' }}>\n        {title && (\n          <Typography\n            variant=\"h1\"\n            component=\"h1\"\n            sx={{\n              mb: subtitle ? 2 : 4,\n              fontWeight: 800,\n              textShadow: '2px 2px 4px rgba(0,0,0,0.3)',\n              fontSize: { xs: '2.2rem', sm: '3rem', md: '3.5rem', lg: '4rem' }\n            }}\n          >\n            {title}\n          </Typography>\n        )}\n        \n        {subtitle && (\n          <Typography\n            variant=\"h5\"\n            component=\"p\"\n            sx={{\n              mb: 4,\n              opacity: 0.9,\n              fontWeight: 500,\n              maxWidth: 600,\n              mx: 'auto',\n              lineHeight: 1.6,\n              fontSize: { xs: '1.1rem', sm: '1.3rem', md: '1.5rem' }\n            }}\n          >\n            {subtitle}\n          </Typography>\n        )}\n        \n        {heroContent && (\n          <Slide direction=\"up\" in timeout={1200}>\n            <Box>{heroContent}</Box>\n          </Slide>\n        )}\n      </Box>\n    </HeroLayout>\n  );\n\n  const mainContent = (\n    <PageLayout maxWidth={maxWidth} {...props}>\n      {children}\n    </PageLayout>\n  );\n\n  if (fadeIn) {\n    return (\n      <Box>\n        {heroSection}\n        {mainContent}\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {heroSection}\n      {mainContent}\n    </Box>\n  );\n};\n\n// Specialized page templates for common use cases\nexport const DashboardTemplate = ({ children, title, subtitle, actions, ...props }) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode } = useTheme();\n  \n  return (\n    <PageLayout {...props}>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: { xs: 'flex-start', sm: 'center' },\n          flexDirection: { xs: 'column', sm: 'row' },\n          mb: 4,\n          gap: 2\n        }}\n      >\n        <Box>\n          {title && (\n            <Typography\n              variant=\"h3\"\n              component=\"h1\"\n              sx={{\n                mb: subtitle ? 1 : 0,\n                fontWeight: 700,\n                background: `linear-gradient(45deg, ${muiTheme.palette.primary.main}, ${muiTheme.palette.secondary.main})`,\n                backgroundClip: 'text',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent'\n              }}\n            >\n              {title}\n            </Typography>\n          )}\n          {subtitle && (\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              {subtitle}\n            </Typography>\n          )}\n        </Box>\n        {actions && (\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n            {actions}\n          </Box>\n        )}\n      </Box>\n      {children}\n    </PageLayout>\n  );\n};\n\nexport const FormTemplate = ({ \n  children, \n  title, \n  subtitle, \n  maxWidth = 'sm',\n  showCard = true,\n  ...props \n}) => {\n  const content = (\n    <Box sx={{ textAlign: 'center', mb: 4 }}>\n      {title && (\n        <Typography\n          variant=\"h4\"\n          component=\"h1\"\n          sx={{ mb: subtitle ? 2 : 0, fontWeight: 700 }}\n        >\n          {title}\n        </Typography>\n      )}\n      {subtitle && (\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {subtitle}\n        </Typography>\n      )}\n    </Box>\n  );\n\n  if (showCard) {\n    return (\n      <PageLayout maxWidth={maxWidth} {...props}>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            minHeight: '80vh'\n          }}\n        >\n          <CardLayout sx={{ width: '100%', maxWidth: 500 }}>\n            {content}\n            {children}\n          </CardLayout>\n        </Box>\n      </PageLayout>\n    );\n  }\n\n  return (\n    <PageLayout maxWidth={maxWidth} {...props}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          minHeight: '80vh'\n        }}\n      >\n        {content}\n        {children}\n      </Box>\n    </PageLayout>\n  );\n};\n\nexport const ListTemplate = ({ \n  children, \n  title, \n  subtitle, \n  filters,\n  actions,\n  emptyState,\n  loading = false,\n  ...props \n}) => {\n  return (\n    <PageLayout {...props}>\n      <SectionLayout title={title} subtitle={subtitle}>\n        {(filters || actions) && (\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: { xs: 'flex-start', sm: 'center' },\n              flexDirection: { xs: 'column', sm: 'row' },\n              mb: 4,\n              gap: 2\n            }}\n          >\n            {filters && <Box sx={{ flex: 1 }}>{filters}</Box>}\n            {actions && (\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                {actions}\n              </Box>\n            )}\n          </Box>\n        )}\n        \n        {loading ? (\n          <Box sx={{ textAlign: 'center', py: 8 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              Loading...\n            </Typography>\n          </Box>\n        ) : children ? (\n          children\n        ) : emptyState ? (\n          emptyState\n        ) : (\n          <Box sx={{ textAlign: 'center', py: 8 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              No items found\n            </Typography>\n          </Box>\n        )}\n      </SectionLayout>\n    </PageLayout>\n  );\n};\n\nexport default PageTemplate;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/layout/ResponsiveLayout.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'jamaicanColors' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":24,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'isTablet' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":26,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'isDesktop' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  useTheme as useMuiTheme,\n  useMediaQuery,\n  Fade,\n  Paper\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\n\nconst ResponsiveLayout = ({ \n  children, \n  maxWidth = 'lg',\n  disableGutters = false,\n  sx = {},\n  containerSx = {},\n  enableFade = true,\n  backgroundPattern = false,\n  ...props \n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const isMobile = useMediaQuery(muiTheme.breakpoints.down('md'));\n  const isTablet = useMediaQuery(muiTheme.breakpoints.between('md', 'lg'));\n  const isDesktop = useMediaQuery(muiTheme.breakpoints.up('lg'));\n\n  const getBackgroundPattern = () => {\n    if (!backgroundPattern) return {};\n    \n    return {\n      '&::before': {\n        content: '\"\"',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        background: isDarkMode \n          ? 'url(\"data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.02\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"2\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")'\n          : 'url(\"data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23000000\" fill-opacity=\"0.02\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"2\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")',\n        opacity: 0.5,\n        zIndex: -1,\n        pointerEvents: 'none'\n      }\n    };\n  };\n\n  const layoutStyles = {\n    minHeight: '100vh',\n    backgroundColor: muiTheme.palette.background.default,\n    transition: 'all 0.3s ease-in-out',\n    position: 'relative',\n    ...getBackgroundPattern(),\n    ...sx\n  };\n\n  const containerStyles = {\n    py: { xs: 2, sm: 3, md: 4 },\n    px: disableGutters ? 0 : { xs: 2, sm: 3, md: 4 },\n    position: 'relative',\n    zIndex: 1,\n    ...containerSx\n  };\n\n  const content = (\n    <Box sx={layoutStyles} {...props}>\n      <Container \n        maxWidth={maxWidth} \n        sx={containerStyles}\n        disableGutters={disableGutters}\n      >\n        {children}\n      </Container>\n    </Box>\n  );\n\n  if (enableFade) {\n    return (\n      <Fade in timeout={600}>\n        {content}\n      </Fade>\n    );\n  }\n\n  return content;\n};\n\n// Specialized layout components for common use cases\nexport const PageLayout = ({ children, ...props }) => (\n  <ResponsiveLayout \n    maxWidth=\"lg\" \n    backgroundPattern \n    enableFade \n    {...props}\n  >\n    {children}\n  </ResponsiveLayout>\n);\n\nexport const HeroLayout = ({ children, ...props }) => {\n  const { isDarkMode, jamaicanColors } = useTheme();\n  \n  return (\n    <Box\n      sx={{\n        background: isDarkMode \n          ? `linear-gradient(135deg, ${jamaicanColors.darkGreen} 0%, ${jamaicanColors.goldDark} 100%)`\n          : `linear-gradient(135deg, ${jamaicanColors.green} 0%, ${jamaicanColors.gold} 100%)`,\n        color: 'white',\n        position: 'relative',\n        overflow: 'hidden',\n        '&::before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          background: isDarkMode \n            ? 'url(\"data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.03\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"4\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")'\n            : 'url(\"data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.05\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"4\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")',\n          opacity: 0.3\n        },\n        ...props.sx\n      }}\n      {...props}\n    >\n      <Container \n        maxWidth=\"lg\" \n        sx={{ \n          position: 'relative', \n          zIndex: 2,\n          py: { xs: 6, sm: 8, md: 10, lg: 12 },\n          px: { xs: 2, sm: 3, md: 4 }\n        }}\n      >\n        {children}\n      </Container>\n    </Box>\n  );\n};\n\nexport const CardLayout = ({ children, elevation = 2, ...props }) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode } = useTheme();\n  \n  return (\n    <Paper\n      elevation={elevation}\n      sx={{\n        borderRadius: { xs: 2, sm: 3 },\n        p: { xs: 2, sm: 3, md: 4 },\n        transition: 'all 0.3s ease-in-out',\n        backgroundColor: isDarkMode \n          ? muiTheme.palette.background.paper \n          : muiTheme.palette.background.paper,\n        border: isDarkMode ? '1px solid rgba(255,255,255,0.1)' : 'none',\n        '&:hover': {\n          transform: 'translateY(-2px)',\n          boxShadow: isDarkMode \n            ? '0 4px 20px rgba(0,0,0,0.4)' \n            : '0 4px 20px rgba(0,0,0,0.12)'\n        },\n        ...props.sx\n      }}\n      {...props}\n    >\n      {children}\n    </Paper>\n  );\n};\n\nexport const SectionLayout = ({ children, title, subtitle, ...props }) => {\n  const muiTheme = useMuiTheme();\n  \n  return (\n    <Box\n      sx={{\n        py: { xs: 4, sm: 6, md: 8 },\n        ...props.sx\n      }}\n      {...props}\n    >\n      {title && (\n        <Box sx={{ textAlign: 'center', mb: { xs: 3, sm: 4, md: 6 } }}>\n          <Typography\n            variant=\"h2\"\n            component=\"h2\"\n            sx={{\n              mb: subtitle ? 2 : 0,\n              fontWeight: 700,\n              background: `linear-gradient(45deg, ${muiTheme.palette.primary.main}, ${muiTheme.palette.secondary.main})`,\n              backgroundClip: 'text',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent'\n            }}\n          >\n            {title}\n          </Typography>\n          {subtitle && (\n            <Typography\n              variant=\"h6\"\n              color=\"text.secondary\"\n              sx={{ maxWidth: 600, mx: 'auto' }}\n            >\n              {subtitle}\n            </Typography>\n          )}\n        </Box>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nexport default ResponsiveLayout;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/navigation/MobileNavigation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/navigation/SimpleMobileNav.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/AdminAnalytics.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'Legend' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'subDays' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":50,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'startOfDay' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":50,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'endOfDay' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":50,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":47}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useContext, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Alert,\n  CircularProgress,\n  Button,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon\n} from '@mui/material';\nimport {\n  Analytics as AnalyticsIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  AttachMoney as MoneyIcon,\n  People as PeopleIcon,\n  Receipt as ReceiptIcon,\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  Verified as VerifiedIcon\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\nimport { ThemeContext } from '../../context/ThemeContext';\nimport { useAnalytics } from '../../hooks/usePayment';\nimport { formatCurrency } from '../../config/stripe.config';\n\nconst AdminAnalytics = () => {\n  const { jamaicanColors } = useContext(ThemeContext);\n  const [timeRange, setTimeRange] = useState('30d');\n  const [refreshing, setRefreshing] = useState(false);\n  \n  const { \n    analytics, \n    loading, \n    error, \n    refreshAnalytics,\n    exportAnalytics \n  } = useAnalytics(timeRange);\n\n  const timeRangeOptions = [\n    { value: '7d', label: 'Last 7 Days' },\n    { value: '30d', label: 'Last 30 Days' },\n    { value: '90d', label: 'Last 3 Months' },\n    { value: '1y', label: 'Last Year' }\n  ];\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await refreshAnalytics();\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  const handleExport = async () => {\n    try {\n      await exportAnalytics(timeRange);\n    } catch (err) {\n      console.error('Export failed:', err);\n    }\n  };\n\n  // KPI Card Component\n  const KPICard = ({ title, value, change, icon, color, format = 'number' }) => {\n    const isPositive = change >= 0;\n    const formattedValue = format === 'currency' ? \n      formatCurrency(value * 100, 'USD') : \n      value.toLocaleString();\n\n    return (\n      <Card>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                {title}\n              </Typography>\n              <Typography variant=\"h4\" sx={{ color, fontWeight: 'bold' }}>\n                {formattedValue}\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 1 }}>\n                {isPositive ? (\n                  <TrendingUpIcon sx={{ color: 'success.main', fontSize: 16 }} />\n                ) : (\n                  <TrendingDownIcon sx={{ color: 'error.main', fontSize: 16 }} />\n                )}\n                <Typography \n                  variant=\"body2\" \n                  sx={{ color: isPositive ? 'success.main' : 'error.main' }}\n                >\n                  {Math.abs(change).toFixed(1)}%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  vs previous period\n                </Typography>\n              </Box>\n            </Box>\n            <Box sx={{ \n              bgcolor: `${color}20`, \n              p: 1.5, \n              borderRadius: 2,\n              display: 'flex',\n              alignItems: 'center'\n            }}>\n              {icon}\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading && !analytics) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ m: 2 }}>\n        Failed to load analytics: {error.message}\n      </Alert>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <Alert severity=\"info\" sx={{ m: 2 }}>\n        No analytics data available\n      </Alert>\n    );\n  }\n\n  const chartColors = [\n    jamaicanColors.green,\n    jamaicanColors.gold,\n    jamaicanColors.red,\n    '#2196F3',\n    '#FF9800',\n    '#9C27B0'\n  ];\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <AnalyticsIcon sx={{ color: jamaicanColors.green }} />\n          <Typography variant=\"h5\">Payment Analytics</Typography>\n        </Box>\n        \n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              label=\"Time Range\"\n              onChange={(e) => setTimeRange(e.target.value)}\n            >\n              {timeRangeOptions.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<RefreshIcon />}\n            onClick={handleRefresh}\n            disabled={refreshing}\n            size=\"small\"\n          >\n            {refreshing ? 'Refreshing...' : 'Refresh'}\n          </Button>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n            onClick={handleExport}\n            size=\"small\"\n          >\n            Export\n          </Button>\n        </Box>\n      </Box>\n\n      {/* KPI Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <KPICard\n            title=\"Total Revenue\"\n            value={analytics.totalRevenue}\n            change={analytics.revenueChange}\n            icon={<MoneyIcon sx={{ color: jamaicanColors.green }} />}\n            color={jamaicanColors.green}\n            format=\"currency\"\n          />\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <KPICard\n            title=\"Total Payments\"\n            value={analytics.totalPayments}\n            change={analytics.paymentsChange}\n            icon={<ReceiptIcon sx={{ color: jamaicanColors.gold }} />}\n            color={jamaicanColors.gold}\n          />\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <KPICard\n            title=\"Active Subscriptions\"\n            value={analytics.activeSubscriptions}\n            change={analytics.subscriptionsChange}\n            icon={<PeopleIcon sx={{ color: jamaicanColors.red }} />}\n            color={jamaicanColors.red}\n          />\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <KPICard\n            title=\"HEART Revenue Share\"\n            value={analytics.heartRevenueShare}\n            change={analytics.heartRevenueChange}\n            icon={<VerifiedIcon sx={{ color: jamaicanColors.green }} />}\n            color={jamaicanColors.green}\n            format=\"currency\"\n          />\n        </Grid>\n      </Grid>\n\n      {/* Charts Row 1 */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        {/* Revenue Trend */}\n        <Grid item xs={12} md={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Revenue Trend\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={analytics.revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    tickFormatter={(date) => format(new Date(date), 'MMM dd')}\n                  />\n                  <YAxis tickFormatter={(value) => `$${value}`} />\n                  <Tooltip \n                    labelFormatter={(date) => format(new Date(date), 'MMM dd, yyyy')}\n                    formatter={(value) => [`$${value}`, 'Revenue']}\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke={jamaicanColors.green}\n                    fill={`${jamaicanColors.green}30`}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Payment Status Distribution */}\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Payment Status\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={analytics.paymentStatusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {analytics.paymentStatusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={chartColors[index % chartColors.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Charts Row 2 */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        {/* Payment Methods */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Payment Methods\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <BarChart data={analytics.paymentMethodData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"method\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill={jamaicanColors.gold} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Subscription Plans */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Subscription Plans\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <BarChart data={analytics.subscriptionPlanData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"plan\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"subscribers\" fill={jamaicanColors.green} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Additional Metrics */}\n      <Grid container spacing={3}>\n        {/* Top Performing Job Types */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Top Job Posting Types\n              </Typography>\n              <List>\n                {analytics.topJobTypes?.map((jobType, index) => (\n                  <ListItem key={index}>\n                    <ListItemIcon>\n                      <Chip \n                        label={index + 1} \n                        size=\"small\" \n                        sx={{ bgcolor: jamaicanColors.green, color: 'white' }}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={jobType.type}\n                      secondary={`${jobType.count} payments • ${formatCurrency(jobType.revenue * 100, 'USD')}`}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* HEART Partnership Impact */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                <VerifiedIcon sx={{ color: jamaicanColors.green }} />\n                <Typography variant=\"h6\">\n                  HEART Partnership Impact\n                </Typography>\n              </Box>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Contribution\n                  </Typography>\n                  <Typography variant=\"h5\" sx={{ color: jamaicanColors.green, fontWeight: 'bold' }}>\n                    {formatCurrency((analytics.heartRevenueShare || 0) * 100, 'USD')}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={6}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Beneficiary Jobs\n                  </Typography>\n                  <Typography variant=\"h5\" sx={{ color: jamaicanColors.gold, fontWeight: 'bold' }}>\n                    {analytics.heartBeneficiaryJobs || 0}\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              <Divider sx={{ my: 2 }} />\n\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center' }}>\n                Supporting Jamaica's workforce development through automated revenue sharing\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default AdminAnalytics;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/JobPostingPayment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/PaymentDashboard.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'SubscriptionsIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":16,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useContext } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tabs,\n  Tab,\n  Paper,\n  Alert,\n  Breadcrumbs,\n  Link\n} from '@mui/material';\nimport {\n  Dashboard as DashboardIcon,\n  Payment as PaymentIcon,\n  Subscriptions as SubscriptionsIcon,\n  History as HistoryIcon,\n  CreditCard as CreditCardIcon,\n  Analytics as AnalyticsIcon,\n  Home as HomeIcon\n} from '@mui/icons-material';\nimport { ThemeContext } from '../../context/ThemeContext';\nimport { AuthContext } from '../../context/AuthContext';\nimport SubscriptionDashboard from './SubscriptionDashboard';\nimport PaymentHistory from './PaymentHistory';\nimport PaymentMethods from './PaymentMethods';\nimport AdminAnalytics from './AdminAnalytics';\nimport JobPostingPayment from './JobPostingPayment';\n\n// Tab Panel Component\nconst TabPanel = ({ children, value, index, ...other }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`payment-tabpanel-${index}`}\n      aria-labelledby={`payment-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ py: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n};\n\nconst PaymentDashboard = ({ initialTab = 0, jobId = null }) => {\n  const { jamaicanColors } = useContext(ThemeContext);\n  const { user } = useContext(AuthContext);\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'super_admin';\n  const customerId = user?.stripeCustomerId;\n\n  // If jobId is provided, show job posting payment directly\n  if (jobId) {\n    return (\n      <Container maxWidth=\"md\" sx={{ py: 4 }}>\n        <Breadcrumbs sx={{ mb: 3 }}>\n          <Link color=\"inherit\" href=\"/\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <HomeIcon fontSize=\"small\" />\n            Home\n          </Link>\n          <Link color=\"inherit\" href=\"/jobs\">\n            Jobs\n          </Link>\n          <Typography color=\"text.primary\">Payment</Typography>\n        </Breadcrumbs>\n        \n        <JobPostingPayment jobId={jobId} />\n      </Container>\n    );\n  }\n\n  const tabs = [\n    {\n      label: 'Overview',\n      icon: <DashboardIcon />,\n      component: <SubscriptionDashboard customerId={customerId} />,\n      show: true\n    },\n    {\n      label: 'Payment History',\n      icon: <HistoryIcon />,\n      component: <PaymentHistory customerId={customerId} />,\n      show: true\n    },\n    {\n      label: 'Payment Methods',\n      icon: <CreditCardIcon />,\n      component: <PaymentMethods customerId={customerId} />,\n      show: true\n    },\n    {\n      label: 'Analytics',\n      icon: <AnalyticsIcon />,\n      component: <AdminAnalytics />,\n      show: isAdmin\n    }\n  ].filter(tab => tab.show);\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Breadcrumbs sx={{ mb: 2 }}>\n          <Link color=\"inherit\" href=\"/\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <HomeIcon fontSize=\"small\" />\n            Home\n          </Link>\n          <Typography color=\"text.primary\">Payment Dashboard</Typography>\n        </Breadcrumbs>\n        \n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n          <PaymentIcon sx={{ color: jamaicanColors.green, fontSize: 32 }} />\n          <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: jamaicanColors.green }}>\n            Payment Dashboard\n          </Typography>\n        </Box>\n        \n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage your payments, subscriptions, and billing information\n        </Typography>\n      </Box>\n\n      {/* User Authentication Check */}\n      {!user && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          Please log in to access your payment dashboard.\n        </Alert>\n      )}\n\n      {user && !customerId && (\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Setting up your payment profile...\n        </Alert>\n      )}\n\n      {/* Main Content */}\n      {user && (\n        <Paper sx={{ width: '100%' }}>\n          {/* Tabs */}\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs\n              value={activeTab}\n              onChange={handleTabChange}\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n              sx={{\n                '& .MuiTab-root': {\n                  minHeight: 64,\n                  textTransform: 'none',\n                  fontSize: '1rem',\n                  fontWeight: 500\n                },\n                '& .Mui-selected': {\n                  color: jamaicanColors.green\n                },\n                '& .MuiTabs-indicator': {\n                  backgroundColor: jamaicanColors.green\n                }\n              }}\n            >\n              {tabs.map((tab, index) => (\n                <Tab\n                  key={index}\n                  label={tab.label}\n                  icon={tab.icon}\n                  iconPosition=\"start\"\n                  sx={{ gap: 1 }}\n                />\n              ))}\n            </Tabs>\n          </Box>\n\n          {/* Tab Panels */}\n          {tabs.map((tab, index) => (\n            <TabPanel key={index} value={activeTab} index={index}>\n              {tab.component}\n            </TabPanel>\n          ))}\n        </Paper>\n      )}\n\n      {/* HEART Partnership Notice */}\n      <Box sx={{ \n        mt: 4, \n        p: 3, \n        bgcolor: `${jamaicanColors.green}10`,\n        borderRadius: 2,\n        border: `1px solid ${jamaicanColors.green}30`\n      }}>\n        <Typography variant=\"h6\" sx={{ color: jamaicanColors.green, mb: 1 }}>\n          🤝 Supporting Jamaica's Workforce Development\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          20% of all payment proceeds automatically support HEART/NSTA Trust workforce development programs, \n          helping to train and empower Jamaica's next generation of skilled workers.\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default PaymentDashboard;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/PaymentForm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/PaymentHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/PaymentMethodForm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/PaymentMethods.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EditIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":27,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'updatePaymentMethod' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useContext } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Chip,\n  Divider\n} from '@mui/material';\nimport {\n  CreditCard as CreditCardIcon,\n  Add as AddIcon,\n  Delete as DeleteIcon,\n  Edit as EditIcon,\n  Star as StarIcon,\n  StarBorder as StarBorderIcon,\n  Security as SecurityIcon\n} from '@mui/icons-material';\nimport { ThemeContext } from '../../context/ThemeContext';\nimport { usePaymentMethods } from '../../hooks/usePayment';\nimport { getPaymentMethodIcon } from '../../config/stripe.config';\nimport StripeProvider from './StripeProvider';\nimport PaymentMethodForm from './PaymentMethodForm';\n\nconst PaymentMethods = ({ customerId }) => {\n  const { jamaicanColors } = useContext(ThemeContext);\n  const { \n    paymentMethods, \n    loading, \n    error, \n    addPaymentMethod,\n    updatePaymentMethod,\n    deletePaymentMethod,\n    setDefaultPaymentMethod\n  } = usePaymentMethods(customerId);\n\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [selectedMethod, setSelectedMethod] = useState(null);\n  const [actionLoading, setActionLoading] = useState(false);\n\n  const handleAddPaymentMethod = async (paymentMethodData) => {\n    setActionLoading(true);\n    try {\n      await addPaymentMethod(paymentMethodData);\n      setShowAddDialog(false);\n    } catch (err) {\n      console.error('Failed to add payment method:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleDeletePaymentMethod = async () => {\n    if (!selectedMethod) return;\n    \n    setActionLoading(true);\n    try {\n      await deletePaymentMethod(selectedMethod.id);\n      setShowDeleteDialog(false);\n      setSelectedMethod(null);\n    } catch (err) {\n      console.error('Failed to delete payment method:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleSetDefault = async (paymentMethodId) => {\n    setActionLoading(true);\n    try {\n      await setDefaultPaymentMethod(paymentMethodId);\n    } catch (err) {\n      console.error('Failed to set default payment method:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const formatCardNumber = (last4) => {\n    return `•••• •••• •••• ${last4}`;\n  };\n\n  const getCardBrand = (brand) => {\n    return brand.charAt(0).toUpperCase() + brand.slice(1);\n  };\n\n  if (loading && paymentMethods.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          {/* Header */}\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <CreditCardIcon sx={{ color: jamaicanColors.green }} />\n              <Typography variant=\"h6\">Payment Methods</Typography>\n            </Box>\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={() => setShowAddDialog(true)}\n              sx={{ bgcolor: jamaicanColors.green }}\n            >\n              Add Payment Method\n            </Button>\n          </Box>\n\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error.message}\n            </Alert>\n          )}\n\n          {/* Payment Methods List */}\n          {paymentMethods.length === 0 ? (\n            <Box sx={{ textAlign: 'center', py: 4 }}>\n              <CreditCardIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n                No Payment Methods\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                Add a payment method to make purchases and manage subscriptions\n              </Typography>\n              <Button\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                onClick={() => setShowAddDialog(true)}\n                sx={{ bgcolor: jamaicanColors.green }}\n              >\n                Add Your First Payment Method\n              </Button>\n            </Box>\n          ) : (\n            <List>\n              {paymentMethods.map((method, index) => (\n                <React.Fragment key={method.id}>\n                  <ListItem\n                    sx={{\n                      border: method.is_default ? `2px solid ${jamaicanColors.green}` : '1px solid #e0e0e0',\n                      borderRadius: 2,\n                      mb: 1,\n                      bgcolor: method.is_default ? `${jamaicanColors.green}05` : 'transparent'\n                    }}\n                  >\n                    <ListItemIcon>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <span style={{ fontSize: '24px' }}>\n                          {getPaymentMethodIcon(method.type)}\n                        </span>\n                        {method.is_default && (\n                          <StarIcon sx={{ color: jamaicanColors.gold, fontSize: 20 }} />\n                        )}\n                      </Box>\n                    </ListItemIcon>\n\n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                            {method.type === 'card' ? \n                              `${getCardBrand(method.card.brand)} ${formatCardNumber(method.card.last4)}` :\n                              method.type.replace('_', ' ').toUpperCase()\n                            }\n                          </Typography>\n                          {method.is_default && (\n                            <Chip \n                              label=\"Default\" \n                              size=\"small\" \n                              sx={{ \n                                bgcolor: jamaicanColors.green, \n                                color: 'white',\n                                height: 20,\n                                fontSize: '0.75rem'\n                              }} \n                            />\n                          )}\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          {method.type === 'card' && (\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Expires {method.card.exp_month.toString().padStart(2, '0')}/{method.card.exp_year}\n                            </Typography>\n                          )}\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Added {new Date(method.created * 1000).toLocaleDateString()}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n\n                    <ListItemSecondaryAction>\n                      <Box sx={{ display: 'flex', gap: 0.5 }}>\n                        {!method.is_default && (\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleSetDefault(method.id)}\n                            disabled={actionLoading}\n                            title=\"Set as default\"\n                          >\n                            <StarBorderIcon />\n                          </IconButton>\n                        )}\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedMethod(method);\n                            setShowDeleteDialog(true);\n                          }}\n                          disabled={actionLoading}\n                          color=\"error\"\n                          title=\"Delete payment method\"\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Box>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  {index < paymentMethods.length - 1 && <Divider sx={{ my: 1 }} />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n\n          {/* Security Notice */}\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 1, \n            mt: 3, \n            p: 2,\n            bgcolor: '#f5f5f5',\n            borderRadius: 1\n          }}>\n            <SecurityIcon sx={{ color: jamaicanColors.green }} />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Your payment information is securely encrypted and stored by Stripe. \n              We never store your full card details on our servers.\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n\n      {/* Add Payment Method Dialog */}\n      <Dialog \n        open={showAddDialog} \n        onClose={() => setShowAddDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <AddIcon sx={{ color: jamaicanColors.green }} />\n            Add Payment Method\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <StripeProvider>\n            <PaymentMethodForm\n              onSubmit={handleAddPaymentMethod}\n              loading={actionLoading}\n              onCancel={() => setShowAddDialog(false)}\n            />\n          </StripeProvider>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={showDeleteDialog} onClose={() => setShowDeleteDialog(false)}>\n        <DialogTitle>Delete Payment Method</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this payment method? This action cannot be undone.\n          </Typography>\n          {selectedMethod?.is_default && (\n            <Alert severity=\"warning\" sx={{ mt: 2 }}>\n              This is your default payment method. You'll need to set another payment method \n              as default before deleting this one.\n            </Alert>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowDeleteDialog(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={handleDeletePaymentMethod}\n            disabled={actionLoading || selectedMethod?.is_default}\n          >\n            {actionLoading ? 'Deleting...' : 'Delete Payment Method'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default PaymentMethods;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/StripeProvider.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/SubscriptionDashboard.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'ScheduleIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":28,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'PaymentIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":29,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'addMonths' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":33,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'getAvailableUpgrades' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":117,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":29}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useContext, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Chip,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  LinearProgress\n} from '@mui/material';\nimport {\n  Subscriptions as SubscriptionsIcon,\n  CheckCircle as CheckIcon,\n  Cancel as CancelIcon,\n  Upgrade as UpgradeIcon,\n  Schedule as ScheduleIcon,\n  Payment as PaymentIcon,\n  Star as StarIcon,\n  Verified as VerifiedIcon\n} from '@mui/icons-material';\nimport { format, fromUnixTime, addMonths } from 'date-fns';\nimport { ThemeContext } from '../../context/ThemeContext';\nimport { useSubscription } from '../../hooks/usePayment';\nimport { formatCurrency, SUBSCRIPTION_PLANS, SUBSCRIPTION_STATUS } from '../../config/stripe.config';\n\nconst SubscriptionDashboard = ({ customerId }) => {\n  const { jamaicanColors } = useContext(ThemeContext);\n  const { \n    subscription, \n    updateSubscription, \n    cancelSubscription, \n    reactivateSubscription,\n    loading, \n    error \n  } = useSubscription(customerId);\n\n  const [showUpgradeDialog, setShowUpgradeDialog] = useState(false);\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState(null);\n  const [actionLoading, setActionLoading] = useState(false);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case SUBSCRIPTION_STATUS.ACTIVE: return 'success';\n      case SUBSCRIPTION_STATUS.TRIALING: return 'info';\n      case SUBSCRIPTION_STATUS.PAST_DUE: return 'warning';\n      case SUBSCRIPTION_STATUS.CANCELED: return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getStatusText = (status) => {\n    switch (status) {\n      case SUBSCRIPTION_STATUS.ACTIVE: return 'Active';\n      case SUBSCRIPTION_STATUS.TRIALING: return 'Trial';\n      case SUBSCRIPTION_STATUS.PAST_DUE: return 'Past Due';\n      case SUBSCRIPTION_STATUS.CANCELED: return 'Canceled';\n      case SUBSCRIPTION_STATUS.UNPAID: return 'Unpaid';\n      default: return status;\n    }\n  };\n\n  const handlePlanUpgrade = async (planId) => {\n    setActionLoading(true);\n    try {\n      await updateSubscription(subscription.id, planId);\n      setShowUpgradeDialog(false);\n    } catch (err) {\n      console.error('Upgrade failed:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleCancelSubscription = async () => {\n    setActionLoading(true);\n    try {\n      await cancelSubscription(subscription.id);\n      setShowCancelDialog(false);\n    } catch (err) {\n      console.error('Cancellation failed:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const handleReactivateSubscription = async () => {\n    setActionLoading(true);\n    try {\n      await reactivateSubscription(subscription.id);\n    } catch (err) {\n      console.error('Reactivation failed:', err);\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  const getCurrentPlan = () => {\n    if (!subscription?.plan) return null;\n    return Object.values(SUBSCRIPTION_PLANS).find(plan => \n      plan.id === subscription.plan.id\n    );\n  };\n\n  const getAvailableUpgrades = () => {\n    const currentPlan = getCurrentPlan();\n    if (!currentPlan) return [];\n    \n    return Object.values(SUBSCRIPTION_PLANS).filter(plan => \n      plan.prices.USD > currentPlan.prices.USD\n    );\n  };\n\n  const calculateDaysRemaining = () => {\n    if (!subscription?.current_period_end) return 0;\n    const endDate = fromUnixTime(subscription.current_period_end);\n    const now = new Date();\n    const diffTime = endDate - now;\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!subscription) {\n    return (\n      <Card>\n        <CardContent sx={{ textAlign: 'center', p: 4 }}>\n          <SubscriptionsIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            No Active Subscription\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n            Subscribe to unlock premium features and HEART partnership benefits\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<UpgradeIcon />}\n            sx={{ bgcolor: jamaicanColors.green }}\n            onClick={() => setShowUpgradeDialog(true)}\n          >\n            View Plans\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const currentPlan = getCurrentPlan();\n  const daysRemaining = calculateDaysRemaining();\n  const progressPercentage = subscription.current_period_start && subscription.current_period_end ?\n    ((Date.now() / 1000 - subscription.current_period_start) / \n     (subscription.current_period_end - subscription.current_period_start)) * 100 : 0;\n\n  return (\n    <Box>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error.message}\n        </Alert>\n      )}\n\n      {/* Main Subscription Card */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <SubscriptionsIcon sx={{ color: jamaicanColors.green }} />\n              <Typography variant=\"h6\">\n                {currentPlan?.name || 'Subscription'}\n              </Typography>\n              {currentPlan?.heartBenefits && (\n                <VerifiedIcon sx={{ color: jamaicanColors.gold, ml: 1 }} />\n              )}\n            </Box>\n            <Chip \n              label={getStatusText(subscription.status)}\n              color={getStatusColor(subscription.status)}\n              variant=\"outlined\"\n            />\n          </Box>\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Current Plan\n              </Typography>\n              <Typography variant=\"h4\" sx={{ color: jamaicanColors.green, fontWeight: 'bold' }}>\n                {formatCurrency((currentPlan?.prices.USD || 0) * 100, 'USD')}\n                <Typography component=\"span\" variant=\"body1\" color=\"text.secondary\">\n                  /month\n                </Typography>\n              </Typography>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Next Billing Date\n              </Typography>\n              <Typography variant=\"h6\">\n                {subscription.current_period_end ? \n                  format(fromUnixTime(subscription.current_period_end), 'MMM dd, yyyy') :\n                  'N/A'\n                }\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {daysRemaining > 0 ? `${daysRemaining} days remaining` : 'Expired'}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          {/* Billing Cycle Progress */}\n          {subscription.status === SUBSCRIPTION_STATUS.ACTIVE && (\n            <Box sx={{ mt: 3 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Billing Cycle Progress\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {Math.round(progressPercentage)}%\n                </Typography>\n              </Box>\n              <LinearProgress \n                variant=\"determinate\" \n                value={Math.min(progressPercentage, 100)}\n                sx={{\n                  height: 8,\n                  borderRadius: 4,\n                  bgcolor: '#f0f0f0',\n                  '& .MuiLinearProgress-bar': {\n                    bgcolor: jamaicanColors.green\n                  }\n                }}\n              />\n            </Box>\n          )}\n\n          {/* Plan Features */}\n          {currentPlan && (\n            <Box sx={{ mt: 3 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                Plan Features\n              </Typography>\n              <List dense>\n                {currentPlan.features.map((feature, index) => (\n                  <ListItem key={index} sx={{ py: 0.5 }}>\n                    <ListItemIcon sx={{ minWidth: 32 }}>\n                      <CheckIcon sx={{ color: jamaicanColors.green, fontSize: 20 }} />\n                    </ListItemIcon>\n                    <ListItemText \n                      primary={feature}\n                      primaryTypographyProps={{ variant: 'body2' }}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n\n          <Divider sx={{ my: 3 }} />\n\n          {/* Action Buttons */}\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n            {subscription.status === SUBSCRIPTION_STATUS.ACTIVE && !subscription.cancel_at_period_end && (\n              <>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<UpgradeIcon />}\n                  onClick={() => setShowUpgradeDialog(true)}\n                  sx={{ bgcolor: jamaicanColors.green }}\n                >\n                  Upgrade Plan\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => setShowCancelDialog(true)}\n                  color=\"error\"\n                >\n                  Cancel Subscription\n                </Button>\n              </>\n            )}\n\n            {subscription.cancel_at_period_end && (\n              <Button\n                variant=\"contained\"\n                startIcon={<CheckIcon />}\n                onClick={handleReactivateSubscription}\n                disabled={actionLoading}\n                sx={{ bgcolor: jamaicanColors.green }}\n              >\n                {actionLoading ? 'Reactivating...' : 'Reactivate Subscription'}\n              </Button>\n            )}\n\n            {subscription.status === SUBSCRIPTION_STATUS.CANCELED && (\n              <Button\n                variant=\"contained\"\n                startIcon={<UpgradeIcon />}\n                onClick={() => setShowUpgradeDialog(true)}\n                sx={{ bgcolor: jamaicanColors.green }}\n              >\n                Subscribe Again\n              </Button>\n            )}\n          </Box>\n\n          {subscription.cancel_at_period_end && (\n            <Alert severity=\"warning\" sx={{ mt: 2 }}>\n              Your subscription will be canceled at the end of the current billing period on{' '}\n              {format(fromUnixTime(subscription.current_period_end), 'MMM dd, yyyy')}.\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Upgrade Dialog */}\n      <Dialog \n        open={showUpgradeDialog} \n        onClose={() => setShowUpgradeDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <UpgradeIcon sx={{ color: jamaicanColors.green }} />\n            Choose Your Plan\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2}>\n            {Object.values(SUBSCRIPTION_PLANS).map((plan) => (\n              <Grid item xs={12} md={6} key={plan.id}>\n                <Card \n                  variant=\"outlined\"\n                  sx={{ \n                    cursor: 'pointer',\n                    border: selectedPlan?.id === plan.id ? \n                      `2px solid ${jamaicanColors.green}` : '1px solid #e0e0e0',\n                    '&:hover': { boxShadow: 2 }\n                  }}\n                  onClick={() => setSelectedPlan(plan)}\n                >\n                  <CardContent>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                      {plan.popular && <StarIcon sx={{ color: jamaicanColors.gold }} />}\n                      <Typography variant=\"h6\">{plan.name}</Typography>\n                      {plan.heartBenefits && (\n                        <VerifiedIcon sx={{ color: jamaicanColors.green }} />\n                      )}\n                    </Box>\n                    \n                    <Typography variant=\"h4\" sx={{ color: jamaicanColors.green, mb: 1 }}>\n                      {formatCurrency(plan.prices.USD * 100, 'USD')}\n                      <Typography component=\"span\" variant=\"body1\" color=\"text.secondary\">\n                        /month\n                      </Typography>\n                    </Typography>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {plan.description}\n                    </Typography>\n                    \n                    <List dense>\n                      {plan.features.slice(0, 4).map((feature, index) => (\n                        <ListItem key={index} sx={{ py: 0.25 }}>\n                          <ListItemIcon sx={{ minWidth: 24 }}>\n                            <CheckIcon sx={{ color: jamaicanColors.green, fontSize: 16 }} />\n                          </ListItemIcon>\n                          <ListItemText \n                            primary={feature}\n                            primaryTypographyProps={{ variant: 'body2' }}\n                          />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowUpgradeDialog(false)}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => selectedPlan && handlePlanUpgrade(selectedPlan.id)}\n            disabled={!selectedPlan || actionLoading}\n            sx={{ bgcolor: jamaicanColors.green }}\n          >\n            {actionLoading ? 'Updating...' : 'Update Plan'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Cancel Confirmation Dialog */}\n      <Dialog open={showCancelDialog} onClose={() => setShowCancelDialog(false)}>\n        <DialogTitle>Cancel Subscription</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to cancel your subscription? You'll continue to have access \n            until the end of your current billing period.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowCancelDialog(false)}>\n            Keep Subscription\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            onClick={handleCancelSubscription}\n            disabled={actionLoading}\n          >\n            {actionLoading ? 'Canceling...' : 'Cancel Subscription'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default SubscriptionDashboard;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/payments/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/profile/ProfilePage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/AdvancedFilters/ExperienceFilter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/AdvancedFilters/JobTypeChips.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Job Type Multi-Select Chips Component\n * Chip-based selection with visual feedback and \"Clear all\" functionality\n */\n\nimport React, { useCallback } from 'react';\nimport {\n  Box,\n  Typography,\n  Chip,\n  Stack,\n  Button,\n  Grid,\n  Paper,\n  Divider\n} from '@mui/material';\nimport { \n  Work,\n  Schedule,\n  Assignment,\n  Home,\n  Business,\n  AccessTime,\n  Clear,\n  CheckCircle\n} from '@mui/icons-material';\nimport { useTheme } from '../../../context/ThemeContext';\n\nconst jobTypeOptions = [\n  {\n    value: 'full-time',\n    label: 'Full-time',\n    icon: Work,\n    color: '#4CAF50',\n    description: '40+ hours per week',\n    popular: true\n  },\n  {\n    value: 'part-time',\n    label: 'Part-time',\n    icon: Schedule,\n    color: '#FF9800',\n    description: 'Less than 40 hours',\n    popular: true\n  },\n  {\n    value: 'contract',\n    label: 'Contract',\n    icon: Assignment,\n    color: '#2196F3',\n    description: 'Fixed-term project',\n    popular: true\n  },\n  {\n    value: 'remote',\n    label: 'Remote',\n    icon: Home,\n    color: '#9C27B0',\n    description: 'Work from anywhere',\n    popular: true\n  },\n  {\n    value: 'hybrid',\n    label: 'Hybrid',\n    icon: Business,\n    color: '#607D8B',\n    description: 'Office + remote mix',\n    popular: false\n  },\n  {\n    value: 'temporary',\n    label: 'Temporary',\n    icon: AccessTime,\n    color: '#795548',\n    description: 'Short-term position',\n    popular: false\n  }\n];\n\nconst JobTypeChips = ({ \n  value = [],\n  onChange,\n  disabled = false,\n  maxSelections = 4,\n  showDescriptions = true,\n  compact = false \n}) => {\n  const { jamaicanColors } = useTheme();\n\n  /**\n   * Handle job type selection/deselection\n   */\n  const handleToggle = useCallback((jobType) => {\n    if (disabled) return;\n    \n    let newSelection;\n    \n    if (value.includes(jobType)) {\n      // Remove from selection\n      newSelection = value.filter(type => type !== jobType);\n    } else {\n      // Add to selection (check max limit)\n      if (value.length >= maxSelections) {\n        console.warn(`Maximum ${maxSelections} job types can be selected`);\n        return;\n      }\n      newSelection = [...value, jobType];\n    }\n    \n    onChange?.(newSelection);\n    console.warn('💼 Job types selected:', newSelection);\n  }, [value, onChange, disabled, maxSelections]);\n\n  /**\n   * Clear all selections\n   */\n  const handleClearAll = useCallback(() => {\n    if (disabled) return;\n    \n    onChange?.([]);\n    console.warn('💼 All job types cleared');\n  }, [onChange, disabled]);\n\n  /**\n   * Select popular job types\n   */\n  const handleSelectPopular = useCallback(() => {\n    if (disabled) return;\n    \n    const popularTypes = jobTypeOptions\n      .filter(option => option.popular)\n      .map(option => option.value)\n      .slice(0, maxSelections);\n    \n    onChange?.(popularTypes);\n    console.warn('💼 Popular job types selected:', popularTypes);\n  }, [onChange, disabled, maxSelections]);\n\n  if (compact) {\n    // Compact layout for mobile\n    return (\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <Work sx={{ color: jamaicanColors.green, mr: 1 }} />\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            Job Type\n          </Typography>\n          {value.length > 0 && (\n            <Chip\n              size=\"small\"\n              label={`${value.length} selected`}\n              sx={{ ml: 1, bgcolor: jamaicanColors.green, color: 'white' }}\n            />\n          )}\n        </Box>\n\n        <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\n          {jobTypeOptions.map((option) => {\n            const IconComponent = option.icon;\n            const isSelected = value.includes(option.value);\n            \n            return (\n              <Chip\n                key={option.value}\n                icon={<IconComponent sx={{ fontSize: '1rem' }} />}\n                label={option.label}\n                onClick={() => handleToggle(option.value)}\n                variant={isSelected ? 'filled' : 'outlined'}\n                sx={{\n                  minHeight: 44, // Touch-friendly\n                  px: 2,\n                  borderColor: option.color,\n                  color: isSelected ? 'white' : option.color,\n                  bgcolor: isSelected ? option.color : 'transparent',\n                  '&:hover': {\n                    bgcolor: `${option.color}20`\n                  },\n                  '& .MuiChip-icon': {\n                    color: isSelected ? 'white' : option.color\n                  }\n                }}\n                disabled={disabled}\n              />\n            );\n          })}\n        </Stack>\n\n        {value.length > 0 && (\n          <Button\n            startIcon={<Clear />}\n            onClick={handleClearAll}\n            size=\"small\"\n            sx={{ \n              mt: 2,\n              color: 'text.secondary',\n              '&:hover': {\n                bgcolor: 'action.hover'\n              }\n            }}\n            disabled={disabled}\n          >\n            Clear All\n          </Button>\n        )}\n      </Box>\n    );\n  }\n\n  // Full layout with descriptions\n  return (\n    <Box sx={{ width: '100%' }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Work sx={{ color: jamaicanColors.green, mr: 1 }} />\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            Job Type\n          </Typography>\n          {value.length > 0 && (\n            <Chip\n              size=\"small\"\n              label={`${value.length}/${maxSelections} selected`}\n              sx={{ \n                ml: 2, \n                bgcolor: jamaicanColors.green, \n                color: 'white',\n                fontSize: '0.75rem'\n              }}\n            />\n          )}\n        </Box>\n\n        {/* Quick Actions */}\n        <Stack direction=\"row\" spacing={1}>\n          {value.length === 0 && (\n            <Button\n              size=\"small\"\n              onClick={handleSelectPopular}\n              sx={{ \n                color: jamaicanColors.green,\n                '&:hover': {\n                  bgcolor: `${jamaicanColors.green}10`\n                }\n              }}\n              disabled={disabled}\n            >\n              Select Popular\n            </Button>\n          )}\n          \n          {value.length > 0 && (\n            <Button\n              startIcon={<Clear />}\n              size=\"small\"\n              onClick={handleClearAll}\n              sx={{ \n                color: 'text.secondary',\n                '&:hover': {\n                  bgcolor: 'action.hover'\n                }\n              }}\n              disabled={disabled}\n            >\n              Clear All\n            </Button>\n          )}\n        </Stack>\n      </Box>\n\n      {/* Job Type Options */}\n      <Grid container spacing={2}>\n        {jobTypeOptions.map((option) => {\n          const IconComponent = option.icon;\n          const isSelected = value.includes(option.value);\n          const isDisabled = disabled || (!isSelected && value.length >= maxSelections);\n          \n          return (\n            <Grid item xs={12} sm={6} md={4} key={option.value}>\n              <Paper\n                elevation={isSelected ? 3 : 1}\n                sx={{\n                  p: 2,\n                  cursor: isDisabled ? 'not-allowed' : 'pointer',\n                  border: `2px solid ${isSelected ? option.color : 'transparent'}`,\n                  bgcolor: isSelected ? `${option.color}10` : 'background.paper',\n                  opacity: isDisabled ? 0.6 : 1,\n                  transition: 'all 0.2s ease-in-out',\n                  '&:hover': isDisabled ? {} : {\n                    elevation: 2,\n                    border: `2px solid ${option.color}50`,\n                    bgcolor: `${option.color}05`\n                  },\n                  minHeight: showDescriptions ? 100 : 80,\n                  position: 'relative'\n                }}\n                onClick={isDisabled ? undefined : () => handleToggle(option.value)}\n              >\n                {/* Selection Indicator */}\n                {isSelected && (\n                  <CheckCircle\n                    sx={{\n                      position: 'absolute',\n                      top: 8,\n                      right: 8,\n                      color: option.color,\n                      fontSize: '1.2rem'\n                    }}\n                  />\n                )}\n\n                {/* Content */}\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <IconComponent \n                    sx={{ \n                      color: option.color, \n                      mr: 1,\n                      fontSize: '1.5rem' \n                    }} \n                  />\n                  <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                    {option.label}\n                  </Typography>\n                  {option.popular && (\n                    <Chip\n                      label=\"Popular\"\n                      size=\"small\"\n                      sx={{\n                        ml: 1,\n                        height: 16,\n                        fontSize: '0.6rem',\n                        bgcolor: jamaicanColors.gold,\n                        color: 'white'\n                      }}\n                    />\n                  )}\n                </Box>\n                \n                {showDescriptions && (\n                  <Typography \n                    variant=\"body2\" \n                    color=\"text.secondary\"\n                    sx={{ fontSize: '0.85rem' }}\n                  >\n                    {option.description}\n                  </Typography>\n                )}\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      {/* Selection Limit Warning */}\n      {value.length >= maxSelections && (\n        <Box sx={{ \n          mt: 2, \n          p: 2, \n          bgcolor: 'warning.light', \n          borderRadius: 2,\n          border: '1px solid',\n          borderColor: 'warning.main'\n        }}>\n          <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n            Maximum Selection Reached\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            You can select up to {maxSelections} job types. Remove some to add others.\n          </Typography>\n        </Box>\n      )}\n\n      {/* Helpful Info */}\n      <Box sx={{ \n        mt: 3, \n        p: 2, \n        bgcolor: `${jamaicanColors.green}10`, \n        borderRadius: 2,\n        border: `1px solid ${jamaicanColors.green}30`\n      }}>\n        <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 1 }}>\n          💡 Job Type Tips\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Select multiple types to see more opportunities. Many jobs offer flexible \n          arrangements that might fit your needs.\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default JobTypeChips;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/AdvancedFilters/LocationSelector.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/AdvancedFilters/SalaryRangeFilter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/GPS/LocationButton.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/GPS/LocationPermission.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/GPS/useGeolocation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/Recommendations/RecommendedJobs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/Recommendations/SmartSuggestions.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'activeTab' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":53,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'setActiveTab' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":53,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'type' is not defined.","line":59,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'type' is not defined.","line":62,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'getSuggestionIcon' is not defined.","line":113,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":116,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'handleSuggestionClick' is not defined.","line":128,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":51},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'IconComponent' is not defined.","line":132,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":132,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'getSuggestionIcon' is not defined.","line":208,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":208,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":211,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'handleSuggestionClick' is not defined.","line":212,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":212,"endColumn":53},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'IconComponent' is not defined.","line":222,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'getSuggestionIcon' is not defined.","line":265,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":265,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'index' is not defined.","line":267,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":267,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'handleSuggestionClick' is not defined.","line":281,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":281,"endColumn":53},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'IconComponent' is not defined.","line":295,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":295,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'handleSuggestionClick' is not defined.","line":351,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":351,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'renderQuickActions' is not defined.","line":400,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":400,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'handleSuggestionClick' is not defined.","line":413,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":413,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'renderTrendingSearches' is not defined.","line":461,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":461,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'renderRecentSearches' is not defined.","line":472,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":472,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'renderQuickActions' is not defined.","line":484,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":484,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'renderSmartSuggestions' is not defined.","line":497,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":497,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'SmartSuggestions' is not defined.","line":505,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":505,"endColumn":32}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Smart Suggestions Component\n * Trending searches, quick actions, and personalized suggestions\n */\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  Typography,\n  Chip,\n  Paper,\n  Grid,\n  Stack,\n  Button,\n  List,\n  ListItemIcon,\n  ListItemText,\n  ListItemButton,\n  Divider,\n  Skeleton,\n  Badge,\n  Tooltip\n} from '@mui/material';\nimport {\n  TrendingUp,\n  Search,\n  History,\n  Star,\n  LocationOn,\n  Work,\n  Schedule,\n  MonetizationOn,\n  Lightbulb,\n  Clear,\n  Refresh\n} from '@mui/icons-material';\nimport { useTheme } from '../../../context/ThemeContext';\n\nconst _SmartSuggestions = ({\n  trendingSearches = [],\n  recentSearches = [],\n  quickActions = [],\n  smartSuggestions = [],\n  loading = false,\n  onSearchSuggestion,\n  onQuickAction,\n  onClearHistory,\n  onRefresh,\n  compact = false,\n  maxItems = 5\n}) => {\n  const { jamaicanColors } = useTheme();\n  const [activeTab, setActiveTab] = useState('trending');\n\n  /**\n   * Handle suggestion click\n   */\n  const _handleSuggestionClick = useCallback((suggestion, _type) => {\n    if (type === 'search') {\n      onSearchSuggestion?.(suggestion);\n      console.warn('🔍 Search suggestion clicked:', suggestion);\n    } else if (type === 'action') {\n      onQuickAction?.(suggestion);\n      console.warn('⚡ Quick action clicked:', suggestion);\n    }\n  }, [onSearchSuggestion, onQuickAction]);\n\n  /**\n   * Get icon for suggestion type\n   */\n  const _getSuggestionIcon = (type, _category) => {\n    switch (type) {\n      case 'location':\n        return LocationOn;\n      case 'industry':\n        return Work;\n      case 'jobType':\n        return Schedule;\n      case 'salary':\n        return MonetizationOn;\n      case 'search':\n        return Search;\n      default:\n        return Lightbulb;\n    }\n  };\n\n  /**\n   * Render trending searches\n   */\n  const _renderTrendingSearches = () => {\n    if (loading) {\n      return (\n        <Stack spacing={1}>\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Skeleton key={index} variant=\"rectangular\" height={40} sx={{ borderRadius: 1 }} />\n          ))}\n        </Stack>\n      );\n    }\n\n    if (!trendingSearches.length) {\n      return (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', py: 2 }}>\n          No trending searches available\n        </Typography>\n      );\n    }\n\n    return (\n      <Stack spacing={1}>\n        {trendingSearches.slice(0, maxItems).map((search, _index) => {\n          const _IconComponent = getSuggestionIcon(search.type);\n          return (\n            <Paper\n              key={index}\n              sx={{\n                p: 2,\n                cursor: 'pointer',\n                transition: 'all 0.2s ease-in-out',\n                border: '1px solid transparent',\n                '&:hover': {\n                  border: `1px solid ${jamaicanColors.green}50`,\n                  bgcolor: `${jamaicanColors.green}05`,\n                  transform: 'translateX(4px)'\n                }\n              }}\n              onClick={() => handleSuggestionClick(search, 'search')}\n            >\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <IconComponent sx={{ color: jamaicanColors.green, mr: 1.5, fontSize: '1.2rem' }} />\n                  <Box>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n                      {search.query}\n                    </Typography>\n                    {search.category && (\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {search.category}\n                      </Typography>\n                    )}\n                  </Box>\n                </Box>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  {search.count && (\n                    <Chip\n                      label={`${search.count} searches`}\n                      size=\"small\"\n                      sx={{\n                        bgcolor: `${jamaicanColors.green}20`,\n                        color: jamaicanColors.green,\n                        fontSize: '0.7rem',\n                        mr: 1\n                      }}\n                    />\n                  )}\n                  <TrendingUp sx={{ color: jamaicanColors.green, fontSize: '1rem' }} />\n                </Box>\n              </Box>\n            </Paper>\n          );\n        })}\n      </Stack>\n    );\n  };\n\n  /**\n   * Render recent searches\n   */\n  const _renderRecentSearches = () => {\n    if (loading) {\n      return (\n        <Stack spacing={1}>\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Skeleton key={index} variant=\"rectangular\" height={40} sx={{ borderRadius: 1 }} />\n          ))}\n        </Stack>\n      );\n    }\n\n    if (!recentSearches.length) {\n      return (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', py: 2 }}>\n          No recent searches\n        </Typography>\n      );\n    }\n\n    return (\n      <Box>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 600 }}>\n            Recent Searches\n          </Typography>\n          <Button\n            size=\"small\"\n            startIcon={<Clear />}\n            onClick={onClearHistory}\n            sx={{ color: 'text.secondary' }}\n          >\n            Clear\n          </Button>\n        </Box>\n        \n        <List dense>\n          {recentSearches.slice(0, maxItems).map((search, _index) => {\n            const _IconComponent = getSuggestionIcon(search.type);\n            return (\n              <ListItemButton\n                key={index}\n                onClick={() => handleSuggestionClick(search, 'search')}\n                sx={{\n                  borderRadius: 1,\n                  mb: 0.5,\n                  '&:hover': {\n                    bgcolor: `${jamaicanColors.green}10`\n                  }\n                }}\n              >\n                <ListItemIcon sx={{ minWidth: 36 }}>\n                  <IconComponent sx={{ fontSize: '1rem', color: 'text.secondary' }} />\n                </ListItemIcon>\n                <ListItemText\n                  primary={search.query}\n                  secondary={search.timestamp ? new Date(search.timestamp).toLocaleDateString() : null}\n                  primaryTypographyProps={{ variant: 'body2' }}\n                  secondaryTypographyProps={{ variant: 'caption' }}\n                />\n              </ListItemButton>\n            );\n          })}\n        </List>\n      </Box>\n    );\n  };\n\n  /**\n   * Render quick actions\n   */\n  const _renderQuickActions = () => {\n    if (loading) {\n      return (\n        <Grid container spacing={1}>\n          {Array.from({ length: 6 }).map((_, index) => (\n            <Grid item xs={6} key={index}>\n              <Skeleton variant=\"rectangular\" height={60} sx={{ borderRadius: 2 }} />\n            </Grid>\n          ))}\n        </Grid>\n      );\n    }\n\n    if (!quickActions.length) {\n      return (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', py: 2 }}>\n          No quick actions available\n        </Typography>\n      );\n    }\n\n    return (\n      <Grid container spacing={2}>\n        {quickActions.slice(0, 6).map((action, _index) => {\n          const _IconComponent = getSuggestionIcon(action.type);\n          return (\n            <Grid item xs={6} sm={4} key={index}>\n              <Paper\n                sx={{\n                  p: 2,\n                  textAlign: 'center',\n                  cursor: 'pointer',\n                  transition: 'all 0.2s ease-in-out',\n                  border: '1px solid transparent',\n                  '&:hover': {\n                    border: `1px solid ${jamaicanColors.green}50`,\n                    bgcolor: `${jamaicanColors.green}05`,\n                    transform: 'translateY(-2px)'\n                  }\n                }}\n                onClick={() => handleSuggestionClick(action, 'action')}\n              >\n                <Badge\n                  badgeContent={action.count}\n                  color=\"secondary\"\n                  sx={{\n                    '& .MuiBadge-badge': {\n                      bgcolor: jamaicanColors.green,\n                      color: 'white',\n                      fontSize: '0.7rem'\n                    }\n                  }}\n                  invisible={!action.count}\n                >\n                  <IconComponent sx={{ color: jamaicanColors.green, fontSize: '1.5rem', mb: 1 }} />\n                </Badge>\n                <Typography variant=\"body2\" sx={{ fontWeight: 600, fontSize: '0.8rem' }}>\n                  {action.label}\n                </Typography>\n                {action.description && (\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {action.description}\n                  </Typography>\n                )}\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  /**\n   * Render smart suggestions\n   */\n  const _renderSmartSuggestions = () => {\n    if (loading) {\n      return (\n        <Stack spacing={1}>\n          {Array.from({ length: 3 }).map((_, index) => (\n            <Skeleton key={index} variant=\"rectangular\" height={60} sx={{ borderRadius: 2 }} />\n          ))}\n        </Stack>\n      );\n    }\n\n    if (!smartSuggestions.length) {\n      return (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', py: 2 }}>\n          No smart suggestions available\n        </Typography>\n      );\n    }\n\n    return (\n      <Stack spacing={2}>\n        {smartSuggestions.slice(0, 3).map((suggestion, index) => (\n          <Paper\n            key={index}\n            sx={{\n              p: 2,\n              cursor: 'pointer',\n              transition: 'all 0.2s ease-in-out',\n              border: `1px solid ${jamaicanColors.green}30`,\n              bgcolor: `${jamaicanColors.green}05`,\n              '&:hover': {\n                bgcolor: `${jamaicanColors.green}10`,\n                transform: 'translateX(4px)'\n              }\n            }}\n            onClick={() => handleSuggestionClick(suggestion, 'search')}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <Lightbulb sx={{ color: jamaicanColors.green, mr: 1.5, mt: 0.5 }} />\n              <Box sx={{ flex: 1 }}>\n                <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 0.5 }}>\n                  {suggestion.title}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                  {suggestion.description}\n                </Typography>\n                <Chip\n                  label={suggestion.action}\n                  size=\"small\"\n                  sx={{\n                    bgcolor: jamaicanColors.green,\n                    color: 'white',\n                    fontSize: '0.7rem'\n                  }}\n                />\n              </Box>\n            </Box>\n          </Paper>\n        ))}\n      </Stack>\n    );\n  };\n\n  if (compact) {\n    // Compact layout for mobile\n    return (\n      <Box>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            Quick Suggestions\n          </Typography>\n          {onRefresh && (\n            <Button\n              size=\"small\"\n              startIcon={<Refresh />}\n              onClick={onRefresh}\n              sx={{ color: jamaicanColors.green }}\n            >\n              Refresh\n            </Button>\n          )}\n        </Box>\n\n        {/* Quick Actions Grid */}\n        {renderQuickActions()}\n\n        {/* Trending Searches */}\n        {trendingSearches.length > 0 && (\n          <Box sx={{ mt: 3 }}>\n            <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 2 }}>\n              🔥 Trending Now\n            </Typography>\n            <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\n              {trendingSearches.slice(0, 5).map((search, index) => (\n                <Chip\n                  key={index}\n                  label={search.query}\n                  onClick={() => handleSuggestionClick(search, 'search')}\n                  sx={{\n                    bgcolor: `${jamaicanColors.green}20`,\n                    color: jamaicanColors.green,\n                    '&:hover': {\n                      bgcolor: `${jamaicanColors.green}30`\n                    }\n                  }}\n                />\n              ))}\n            </Stack>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n\n  // Full layout\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n        <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n          Smart Suggestions\n        </Typography>\n        {onRefresh && (\n          <Button\n            startIcon={<Refresh />}\n            onClick={onRefresh}\n            size=\"small\"\n            sx={{\n              color: jamaicanColors.green,\n              '&:hover': { bgcolor: `${jamaicanColors.green}10` }\n            }}\n          >\n            Refresh\n          </Button>\n        )}\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Trending Searches */}\n        <Grid item xs={12} md={6}>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <TrendingUp sx={{ color: jamaicanColors.green, mr: 1 }} />\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n              Trending Searches\n            </Typography>\n          </Box>\n          {renderTrendingSearches()}\n        </Grid>\n\n        {/* Recent Searches */}\n        <Grid item xs={12} md={6}>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <History sx={{ color: 'text.secondary', mr: 1 }} />\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n              Recent Activity\n            </Typography>\n          </Box>\n          {renderRecentSearches()}\n        </Grid>\n\n        {/* Quick Actions */}\n        <Grid item xs={12}>\n          <Divider sx={{ my: 2 }} />\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <Star sx={{ color: jamaicanColors.green, mr: 1 }} />\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n              Quick Actions\n            </Typography>\n          </Box>\n          {renderQuickActions()}\n        </Grid>\n\n        {/* Smart Suggestions */}\n        {smartSuggestions.length > 0 && (\n          <Grid item xs={12}>\n            <Divider sx={{ my: 2 }} />\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n              <Lightbulb sx={{ color: jamaicanColors.green, mr: 1 }} />\n              <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                Personalized for You\n              </Typography>\n            </Box>\n            {renderSmartSuggestions()}\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default SmartSuggestions;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/Recommendations/usePersonalization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/SmartJobDiscovery.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/utils/behaviorTracker.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":308,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":316,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User behavior tracking utilities for personalized job recommendations\n * Stores user preferences and search patterns in localStorage\n */\n\nconst STORAGE_KEYS = {\n  USER_BEHAVIOR: 'jamdung_user_behavior',\n  SEARCH_HISTORY: 'jamdung_search_history',\n  VIEWED_JOBS: 'jamdung_viewed_jobs',\n  PREFERENCES: 'jamdung_preferences'\n};\n\n/**\n * Get user behavior data from localStorage\n * @returns {Object} User behavior data\n */\nexport const getUserBehavior = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.USER_BEHAVIOR);\n    return stored ? JSON.parse(stored) : getDefaultBehavior();\n  } catch (error) {\n    console.warn('Error reading user behavior:', error);\n    return getDefaultBehavior();\n  }\n};\n\n/**\n * Get default behavior structure\n * @returns {Object} Default behavior object\n */\nconst getDefaultBehavior = () => ({\n  viewedJobs: [],\n  searchHistory: [],\n  preferredIndustries: [],\n  locationHistory: [],\n  jobTypePreferences: [],\n  salaryRangeHistory: [],\n  lastActivity: null,\n  totalSearches: 0,\n  totalJobViews: 0,\n  createdAt: new Date().toISOString()\n});\n\n/**\n * Save user behavior data to localStorage\n * @param {Object} behaviorData - Behavior data to save\n */\nexport const saveBehaviorData = (behaviorData) => {\n  try {\n    const dataToSave = {\n      ...behaviorData,\n      lastActivity: new Date().toISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.USER_BEHAVIOR, JSON.stringify(dataToSave));\n  } catch (error) {\n    console.warn('Error saving user behavior:', error);\n  }\n};\n\n/**\n * Track a job search\n * @param {Object} searchFilters - Search filters used\n */\nexport const trackSearch = (searchFilters) => {\n  const behavior = getUserBehavior();\n  \n  // Add to search history (keep last 50)\n  const searchEntry = {\n    filters: searchFilters,\n    timestamp: new Date().toISOString()\n  };\n  \n  behavior.searchHistory = [searchEntry, ...behavior.searchHistory].slice(0, 50);\n  behavior.totalSearches += 1;\n  \n  // Track industry preferences\n  if (searchFilters.industry && searchFilters.industry !== '') {\n    trackIndustryPreference(behavior, searchFilters.industry);\n  }\n  \n  // Track location preferences\n  if (searchFilters.location && searchFilters.location !== '') {\n    trackLocationPreference(behavior, searchFilters.location);\n  }\n  \n  // Track job type preferences\n  if (searchFilters.jobTypes && searchFilters.jobTypes.length > 0) {\n    trackJobTypePreferences(behavior, searchFilters.jobTypes);\n  }\n  \n  // Track salary range preferences\n  if (searchFilters.salary && searchFilters.salary.min && searchFilters.salary.max) {\n    trackSalaryRangePreference(behavior, searchFilters.salary);\n  }\n  \n  saveBehaviorData(behavior);\n  \n  console.warn('🔍 Search tracked:', searchFilters);\n};\n\n/**\n * Track a job view\n * @param {Object} job - Job object that was viewed\n */\nexport const trackJobView = (job) => {\n  const behavior = getUserBehavior();\n  \n  const viewEntry = {\n    jobId: job.id,\n    title: job.title,\n    company: job.company,\n    industry: job.industry,\n    location: job.location,\n    timestamp: new Date().toISOString()\n  };\n  \n  // Add to viewed jobs (keep last 100)\n  behavior.viewedJobs = [viewEntry, ...behavior.viewedJobs].slice(0, 100);\n  behavior.totalJobViews += 1;\n  \n  // Track industry preference from job views\n  if (job.industry) {\n    trackIndustryPreference(behavior, job.industry);\n  }\n  \n  saveBehaviorData(behavior);\n  \n  console.warn('👀 Job view tracked:', job.title);\n};\n\n/**\n * Track industry preference\n * @param {Object} behavior - Current behavior data\n * @param {string} industry - Industry to track\n */\nconst trackIndustryPreference = (behavior, industry) => {\n  const existing = behavior.preferredIndustries.find(p => p.industry === industry);\n  \n  if (existing) {\n    existing.count += 1;\n    existing.lastUsed = new Date().toISOString();\n  } else {\n    behavior.preferredIndustries.push({\n      industry,\n      count: 1,\n      lastUsed: new Date().toISOString()\n    });\n  }\n  \n  // Sort by count and keep top 10\n  behavior.preferredIndustries = behavior.preferredIndustries\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n};\n\n/**\n * Track location preference\n * @param {Object} behavior - Current behavior data\n * @param {string} location - Location to track\n */\nconst trackLocationPreference = (behavior, location) => {\n  const existing = behavior.locationHistory.find(l => l.location === location);\n  \n  if (existing) {\n    existing.count += 1;\n    existing.lastUsed = new Date().toISOString();\n  } else {\n    behavior.locationHistory.push({\n      location,\n      count: 1,\n      lastUsed: new Date().toISOString()\n    });\n  }\n  \n  // Sort by count and keep top 10\n  behavior.locationHistory = behavior.locationHistory\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n};\n\n/**\n * Track job type preferences\n * @param {Object} behavior - Current behavior data\n * @param {Array} jobTypes - Job types to track\n */\nconst trackJobTypePreferences = (behavior, jobTypes) => {\n  jobTypes.forEach(jobType => {\n    const existing = behavior.jobTypePreferences.find(j => j.type === jobType);\n    \n    if (existing) {\n      existing.count += 1;\n      existing.lastUsed = new Date().toISOString();\n    } else {\n      behavior.jobTypePreferences.push({\n        type: jobType,\n        count: 1,\n        lastUsed: new Date().toISOString()\n      });\n    }\n  });\n  \n  // Sort by count and keep top 10\n  behavior.jobTypePreferences = behavior.jobTypePreferences\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n};\n\n/**\n * Track salary range preference\n * @param {Object} behavior - Current behavior data\n * @param {Object} salaryRange - Salary range to track\n */\nconst trackSalaryRangePreference = (behavior, salaryRange) => {\n  const rangeEntry = {\n    min: salaryRange.min,\n    max: salaryRange.max,\n    timestamp: new Date().toISOString()\n  };\n  \n  behavior.salaryRangeHistory = [rangeEntry, ...behavior.salaryRangeHistory].slice(0, 20);\n};\n\n/**\n * Get personalized recommendations based on user behavior\n * @returns {Object} Recommendation data\n */\nexport const getPersonalizedRecommendations = () => {\n  const behavior = getUserBehavior();\n  \n  return {\n    preferredIndustries: behavior.preferredIndustries.slice(0, 5),\n    frequentLocations: behavior.locationHistory.slice(0, 5),\n    preferredJobTypes: behavior.jobTypePreferences.slice(0, 3),\n    recentSearches: behavior.searchHistory.slice(0, 5),\n    suggestedKeywords: extractKeywordsFromHistory(behavior.searchHistory),\n    activityLevel: getActivityLevel(behavior)\n  };\n};\n\n/**\n * Extract popular keywords from search history\n * @param {Array} searchHistory - Array of search entries\n * @returns {Array} Popular keywords\n */\nconst extractKeywordsFromHistory = (searchHistory) => {\n  const keywordCounts = {};\n  \n  searchHistory.forEach(search => {\n    if (search.filters.keywords) {\n      const keywords = search.filters.keywords.toLowerCase().split(/[\\s,]+/);\n      keywords.forEach(keyword => {\n        if (keyword.length > 2) { // Ignore very short words\n          keywordCounts[keyword] = (keywordCounts[keyword] || 0) + 1;\n        }\n      });\n    }\n  });\n  \n  return Object.entries(keywordCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 10)\n    .map(([keyword]) => keyword);\n};\n\n/**\n * Get user activity level\n * @param {Object} behavior - User behavior data\n * @returns {string} Activity level (new, casual, active, power)\n */\nconst getActivityLevel = (behavior) => {\n  const totalActivity = behavior.totalSearches + behavior.totalJobViews;\n  \n  if (totalActivity === 0) return 'new';\n  if (totalActivity < 10) return 'casual';\n  if (totalActivity < 50) return 'active';\n  return 'power';\n};\n\n/**\n * Clear all user behavior data\n */\nexport const clearBehaviorData = () => {\n  try {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n    console.warn('🧹 User behavior data cleared');\n  } catch (error) {\n    console.warn('Error clearing behavior data:', error);\n  }\n};\n\n/**\n * Get trending searches (mock data for Phase 2)\n * In production, this would come from analytics\n */\nexport const getTrendingSearches = () => [\n  { term: 'teacher', count: 245 },\n  { term: 'nurse', count: 189 },\n  { term: 'driver', count: 156 },\n  { term: 'security guard', count: 134 },\n  { term: 'customer service', count: 123 },\n  { term: 'sales representative', count: 98 },\n  { term: 'receptionist', count: 87 },\n  { term: 'accountant', count: 76 }\n];\n\nexport default {\n  getUserBehavior,\n  saveBehaviorData,\n  trackSearch,\n  trackJobView,\n  getPersonalizedRecommendations,\n  clearBehaviorData,\n  getTrendingSearches\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/utils/currencyFormatter.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":99,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":105,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Currency formatting utilities for Jamaican Dollar (JMD)\n * Handles salary ranges and formatting for job search filters\n */\n\n/**\n * Format JMD currency with proper comma separation\n * @param {number} amount - The amount to format\n * @param {boolean} showCurrency - Whether to show JMD prefix\n * @returns {string} Formatted currency string\n */\nexport const formatJMD = (amount, showCurrency = true) => {\n  if (!amount || isNaN(amount)) return showCurrency ? 'JMD 0' : '0';\n  \n  const formatted = new Intl.NumberFormat('en-JM', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n  \n  return showCurrency ? `JMD ${formatted}` : formatted;\n};\n\n/**\n * Parse JMD string back to number\n * @param {string} jmdString - JMD formatted string\n * @returns {number} Parsed number\n */\nexport const parseJMD = (jmdString) => {\n  if (!jmdString) return 0;\n  \n  // Remove JMD prefix and commas\n  const cleanString = jmdString.replace(/JMD\\s?|,/g, '');\n  const parsed = parseInt(cleanString, 10);\n  \n  return isNaN(parsed) ? 0 : parsed;\n};\n\n/**\n * Format salary range for display\n * @param {number} min - Minimum salary\n * @param {number} max - Maximum salary\n * @param {boolean} showUnspecified - Whether to show \"Not specified\" option\n * @returns {string} Formatted salary range\n */\nexport const formatSalaryRange = (min, max, showUnspecified = false) => {\n  if (showUnspecified) {\n    return 'Salary not specified';\n  }\n  \n  if (min === max) {\n    return formatJMD(min);\n  }\n  \n  if (max >= 1000000) {\n    return `${formatJMD(min)} - ${formatJMD(1000000)}+`;\n  }\n  \n  return `${formatJMD(min)} - ${formatJMD(max)}`;\n};\n\n/**\n * Get salary range presets for quick selection\n * @returns {Array} Array of salary range objects\n */\nexport const getSalaryPresets = () => [\n  { label: 'Entry Level', min: 30000, max: 80000 },\n  { label: 'Mid Level', min: 80000, max: 200000 },\n  { label: 'Senior Level', min: 200000, max: 500000 },\n  { label: 'Executive', min: 500000, max: 1000000 },\n  { label: 'All Salaries', min: 30000, max: 1000000 }\n];\n\n/**\n * Validate salary range input\n * @param {number} min - Minimum salary\n * @param {number} max - Maximum salary\n * @returns {Object} Validation result with isValid and error message\n */\nexport const validateSalaryRange = (min, max) => {\n  if (min < 0 || max < 0) {\n    return { isValid: false, error: 'Salary cannot be negative' };\n  }\n  \n  if (min > max) {\n    return { isValid: false, error: 'Minimum salary cannot be greater than maximum' };\n  }\n  \n  if (min < 10000) {\n    return { isValid: false, error: 'Minimum salary seems too low for Jamaica' };\n  }\n  \n  if (max > 10000000) {\n    return { isValid: false, error: 'Maximum salary seems unrealistic' };\n  }\n  \n  return { isValid: true, error: null };\n};\n\nexport default {\n  formatJMD,\n  parseJMD,\n  formatSalaryRange,\n  getSalaryPresets,\n  validateSalaryRange\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/search/utils/distanceCalculator.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":151,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":159,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Distance calculation utilities for GPS-based job search\n * Handles geolocation and distance calculations in Jamaica\n */\n\n/**\n * Calculate distance between two coordinates using Haversine formula\n * @param {number} lat1 - Latitude of first point\n * @param {number} lon1 - Longitude of first point\n * @param {number} lat2 - Latitude of second point\n * @param {number} lon2 - Longitude of second point\n * @returns {number} Distance in kilometers\n */\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = toRadians(lat2 - lat1);\n  const dLon = toRadians(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  \n  return Math.round(distance * 10) / 10; // Round to 1 decimal place\n};\n\n/**\n * Convert degrees to radians\n * @param {number} degrees - Degrees to convert\n * @returns {number} Radians\n */\nconst toRadians = (degrees) => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Format distance for display\n * @param {number} distance - Distance in kilometers\n * @returns {string} Formatted distance string\n */\nexport const formatDistance = (distance) => {\n  if (distance < 1) {\n    return `${Math.round(distance * 1000)}m away`;\n  }\n  \n  if (distance < 10) {\n    return `${distance}km away`;\n  }\n  \n  return `${Math.round(distance)}km away`;\n};\n\n/**\n * Get distance radius options for filtering\n * @returns {Array} Array of radius options\n */\nexport const getRadiusOptions = () => [\n  { value: 5, label: '5km radius' },\n  { value: 10, label: '10km radius' },\n  { value: 25, label: '25km radius' },\n  { value: 50, label: '50km radius' },\n  { value: 100, label: 'Anywhere in Jamaica' }\n];\n\n/**\n * Check if a job is within the specified radius\n * @param {Object} userLocation - User's coordinates {lat, lng}\n * @param {Object} jobLocation - Job's coordinates {lat, lng}\n * @param {number} radius - Search radius in kilometers\n * @returns {boolean} Whether job is within radius\n */\nexport const isWithinRadius = (userLocation, jobLocation, radius) => {\n  if (!userLocation || !jobLocation) return false;\n  \n  const distance = calculateDistance(\n    userLocation.lat,\n    userLocation.lng,\n    jobLocation.lat,\n    jobLocation.lng\n  );\n  \n  return distance <= radius;\n};\n\n/**\n * Sort jobs by distance from user location\n * @param {Array} jobs - Array of job objects with location data\n * @param {Object} userLocation - User's coordinates {lat, lng}\n * @returns {Array} Jobs sorted by distance (closest first)\n */\nexport const sortJobsByDistance = (jobs, userLocation) => {\n  if (!userLocation || !jobs.length) return jobs;\n  \n  return jobs\n    .map(job => ({\n      ...job,\n      distance: job.location ? calculateDistance(\n        userLocation.lat,\n        userLocation.lng,\n        job.location.lat,\n        job.location.lng\n      ) : Infinity\n    }))\n    .sort((a, b) => a.distance - b.distance);\n};\n\n/**\n * Get approximate coordinates for Jamaican parishes (for demo purposes)\n * In production, this would come from a proper geocoding service\n */\nexport const getParishCoordinates = () => ({\n  'Kingston': { lat: 17.9970, lng: -76.7936 },\n  'St. Andrew': { lat: 18.0179, lng: -76.8099 },\n  'St. Thomas': { lat: 17.9058, lng: -76.3619 },\n  'Portland': { lat: 18.1745, lng: -76.4591 },\n  'St. Mary': { lat: 18.3745, lng: -76.9693 },\n  'St. Ann': { lat: 18.4347, lng: -77.1969 },\n  'Trelawny': { lat: 18.3487, lng: -77.6040 },\n  'St. James': { lat: 18.4762, lng: -77.9189 },\n  'Hanover': { lat: 18.4204, lng: -78.1305 },\n  'Westmoreland': { lat: 18.3070, lng: -78.1421 },\n  'St. Elizabeth': { lat: 17.9058, lng: -77.7539 },\n  'Manchester': { lat: 18.0456, lng: -77.5114 },\n  'Clarendon': { lat: 17.8648, lng: -77.2370 },\n  'St. Catherine': { lat: 17.9712, lng: -76.9525 }\n});\n\n/**\n * Get major towns/cities for each parish\n */\nexport const getParishTowns = () => ({\n  'Kingston': ['Downtown Kingston', 'New Kingston', 'Half Way Tree', 'Cross Roads'],\n  'St. Andrew': ['Half Way Tree', 'Liguanea', 'Papine', 'Constant Spring'],\n  'St. Thomas': ['Morant Bay', 'Port Morant', 'Yallahs', 'Bath'],\n  'Portland': ['Port Antonio', 'Buff Bay', 'Hope Bay', 'Boston Bay'],\n  'St. Mary': ['Port Maria', 'Oracabessa', 'Annotto Bay', 'Highgate'],\n  'St. Ann': ['Ocho Rios', 'St. Ann\\'s Bay', 'Brown\\'s Town', 'Runaway Bay'],\n  'Trelawny': ['Falmouth', 'Martha Brae', 'Clark\\'s Town', 'Duncans'],\n  'St. James': ['Montego Bay', 'Rose Hall', 'Ironshore', 'Cambridge'],\n  'Hanover': ['Lucea', 'Green Island', 'Sandy Bay', 'Hopewell'],\n  'Westmoreland': ['Savanna-la-Mar', 'Negril', 'Little London', 'Bluefields'],\n  'St. Elizabeth': ['Black River', 'Santa Cruz', 'Junction', 'Treasure Beach'],\n  'Manchester': ['Mandeville', 'Christiana', 'Porus', 'Mile Gully'],\n  'Clarendon': ['May Pen', 'Spanish Town', 'Lionel Town', 'Chapelton'],\n  'St. Catherine': ['Spanish Town', 'Portmore', 'Old Harbour', 'Linstead']\n});\n\nexport default {\n  calculateDistance,\n  formatDistance,\n  getRadiusOptions,\n  isWithinRadius,\n  sortJobsByDistance,\n  getParishCoordinates,\n  getParishTowns\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/test/ResponsiveTest.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getTouchTargetSize' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":8,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Responsive Architecture Test Component\n * Validates that all responsive utilities work correctly\n */\n\nimport React from 'react';\nimport { Box, Grid, Typography } from '@mui/material';\nimport { useResponsive, TOUCH_TARGETS, getTouchTargetSize } from '../../utils/responsive';\nimport Button from '../ui/Button';\nimport Input from '../ui/Input';\nimport Card from '../ui/Card';\n\nconst ResponsiveTest = () => {\n  const { isMobile, isTablet, isDesktop, theme } = useResponsive();\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        🧪 Responsive Architecture Test\n      </Typography>\n\n      {/* Breakpoint Test */}\n      <Card padding=\"medium\" sx={{ mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          📱 Breakpoint Detection\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n          <Typography variant=\"body2\" color={isMobile ? 'primary' : 'text.secondary'}>\n            Mobile: {isMobile ? '✅' : '❌'}\n          </Typography>\n          <Typography variant=\"body2\" color={isTablet ? 'primary' : 'text.secondary'}>\n            Tablet: {isTablet ? '✅' : '❌'}\n          </Typography>\n          <Typography variant=\"body2\" color={isDesktop ? 'primary' : 'text.secondary'}>\n            Desktop: {isDesktop ? '✅' : '❌'}\n          </Typography>\n        </Box>\n      </Card>\n\n      {/* Touch Targets Test */}\n      <Card padding=\"medium\" sx={{ mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          👆 Touch Target Testing (WCAG AA Compliance)\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          All buttons should be minimum {TOUCH_TARGETS.MINIMUM}px on mobile\n        </Typography>\n        \n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 2 }}>\n          <Button size=\"small\" variant=\"outlined\">\n            Small Button ({TOUCH_TARGETS.SMALL}px)\n          </Button>\n          <Button size=\"medium\" variant=\"contained\">\n            Medium Button ({TOUCH_TARGETS.RECOMMENDED}px)\n          </Button>\n          <Button size=\"large\" variant=\"contained\" jamaican>\n            Large Button ({TOUCH_TARGETS.LARGE}px)\n          </Button>\n        </Box>\n\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          ✅ All touch targets meet WCAG AA guidelines (minimum 44px)\n        </Typography>\n      </Card>\n\n      {/* Input Testing */}\n      <Card padding=\"medium\" sx={{ mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          📝 Touch-Optimized Inputs\n        </Typography>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, maxWidth: 400 }}>\n          <Input \n            placeholder=\"Touch-optimized input\" \n            touchOptimized \n            jamaican\n          />\n          <Input \n            placeholder=\"Search jobs...\" \n            size=\"large\" \n            touchOptimized\n          />\n        </Box>\n      </Card>\n\n      {/* Grid System Test */}\n      <Card padding=\"medium\" sx={{ mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          📊 Responsive Grid System\n        </Typography>\n        <Grid container spacing={{ xs: 2, sm: 3, md: 4 }}>\n          {[1, 2, 3, 4].map((item) => (\n            <Grid item xs={12} sm={6} md={3} key={item}>\n              <Card \n                padding=\"small\" \n                variant=\"outlined\"\n                sx={{ \n                  textAlign: 'center',\n                  minHeight: { xs: 80, sm: 100 }\n                }}\n              >\n                <Typography variant=\"body2\">\n                  Grid Item {item}\n                </Typography>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Card>\n\n      {/* Navigation Drawer Test */}\n      <Card padding=\"medium\" sx={{ mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          🗂️ Navigation Standards\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          Drawer width: {isMobile ? '280px' : '320px'} (responsive)\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          Menu item height: {TOUCH_TARGETS.RECOMMENDED}px (touch-friendly)\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          ✅ All navigation elements are optimized for {isMobile ? 'mobile' : 'desktop'} usage\n        </Typography>\n        <Typography variant=\"body2\" color=\"primary\">\n          🏠 Header brand is clickable and navigates to homepage\n        </Typography>\n      </Card>\n\n      {/* User Experience Test */}\n      <Card padding=\"medium\">\n        <Typography variant=\"h6\" gutterBottom>\n          👤 User Experience Features\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          ✅ Brand logo/text clickable to return home (standard web pattern)\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          ✅ Visual feedback on header hover (opacity + transform)\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          ✅ Accessible with proper ARIA labels\n        </Typography>\n        <Typography variant=\"body2\">\n          ✅ Works consistently across all pages\n        </Typography>\n      </Card>\n\n      {/* Debug Info */}\n      <Box sx={{ mt: 4, p: 2, bgcolor: 'background.elevated', borderRadius: 1 }}>\n        <Typography variant=\"caption\" display=\"block\">\n          Debug Info:\n        </Typography>\n        <Typography variant=\"caption\" display=\"block\">\n          Current breakpoints: xs:{theme.breakpoints.values.xs} sm:{theme.breakpoints.values.sm} md:{theme.breakpoints.values.md} lg:{theme.breakpoints.values.lg} xl:{theme.breakpoints.values.xl}\n        </Typography>\n        <Typography variant=\"caption\" display=\"block\">\n          Touch targets: Min:{TOUCH_TARGETS.MINIMUM}px Recommended:{TOUCH_TARGETS.RECOMMENDED}px Large:{TOUCH_TARGETS.LARGE}px\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ResponsiveTest;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Button.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":129,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Button as MuiButton,\n  IconButton as MuiIconButton,\n  CircularProgress,\n  useTheme as useMuiTheme\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useResponsive, getTouchTargetSize } from '../../utils/responsive';\n\n/**\n * Standardized Button Component\n * Ensures consistent styling, touch targets, and theme usage\n */\nconst Button = ({\n  children,\n  variant = 'contained',\n  size = 'medium',\n  color = 'primary',\n  jamaican = false, // Use Jamaican-specific styling\n  loading = false,\n  disabled = false,\n  fullWidth = false,\n  icon,\n  iconPosition = 'start',\n  touchOptimized = true, // Auto-optimize for mobile touch\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const { isMobile } = useResponsive();\n\n  // Touch-optimized sizing using responsive utilities\n  const getTouchOptimizedProps = () => {\n    if (!touchOptimized) return {};\n    \n    const touchTargets = getTouchTargetSize(size, touchOptimized);\n    \n    return {\n      sx: {\n        ...touchTargets,\n        fontSize: isMobile ? '1.1rem' : undefined,\n        ...props.sx\n      }\n    };\n  };\n\n  // Jamaican theme styling\n  const getJamaicanStyling = () => {\n    if (!jamaican) return {};\n\n    const jamaicanStyle = {\n      background: isDarkMode \n        ? `linear-gradient(45deg, ${jamaicanColors.darkGreen}, ${jamaicanColors.gold})`\n        : `linear-gradient(45deg, ${jamaicanColors.green}, ${jamaicanColors.gold})`,\n      color: 'white',\n      fontWeight: 700,\n      textTransform: 'none',\n      boxShadow: '0 4px 12px rgba(0,150,57,0.3)',\n      '&:hover': {\n        background: isDarkMode \n          ? `linear-gradient(45deg, ${jamaicanColors.green}, ${jamaicanColors.goldDark})`\n          : `linear-gradient(45deg, ${jamaicanColors.darkGreen}, ${jamaicanColors.goldDark})`,\n        transform: 'translateY(-2px)',\n        boxShadow: '0 6px 16px rgba(0,150,57,0.4)'\n      },\n      '&:active': {\n        transform: 'translateY(0px)'\n      },\n      '&:disabled': {\n        background: muiTheme.palette.action.disabledBackground,\n        color: muiTheme.palette.action.disabled\n      }\n    };\n\n    return { sx: { ...jamaicanStyle, ...props.sx } };\n  };\n\n  // Loading state\n  const getLoadingProps = () => {\n    if (!loading) return {};\n    \n    return {\n      disabled: true,\n      startIcon: <CircularProgress size={20} color=\"inherit\" />\n    };\n  };\n\n  // Icon positioning\n  const getIconProps = () => {\n    if (!icon) return {};\n    \n    return iconPosition === 'start' \n      ? { startIcon: icon }\n      : { endIcon: icon };\n  };\n\n  const buttonProps = {\n    variant,\n    size,\n    color,\n    fullWidth,\n    disabled: disabled || loading,\n    ...getIconProps(),\n    ...getLoadingProps(),\n    ...(touchOptimized ? getTouchOptimizedProps() : {}),\n    ...(jamaican ? getJamaicanStyling() : {}),\n    ...props\n  };\n\n  return (\n    <MuiButton {...buttonProps}>\n      {loading ? 'Loading...' : children}\n    </MuiButton>\n  );\n};\n\n/**\n * Standardized IconButton Component\n * Optimized for touch interfaces with consistent sizing\n */\nexport const IconButton = ({\n  children,\n  size = 'medium',\n  color = 'default',\n  touchOptimized = true,\n  ...props\n}) => {\n  const { isMobile } = useResponsive();\n\n  const getTouchOptimizedProps = () => {\n    if (!touchOptimized) return {};\n    \n    const touchTargets = getTouchTargetSize(size, touchOptimized);\n    return {\n      sx: {\n        ...touchTargets,\n        ...props.sx\n      }\n    };\n  };\n\n  return (\n    <MuiIconButton\n      size={size}\n      color={color}\n      {...(touchOptimized ? getTouchOptimizedProps() : {})}\n      {...props}\n    >\n      {children}\n    </MuiIconButton>\n  );\n};\n\n// Export variants for common use cases\nexport const JamaicanButton = (props) => (\n  <Button jamaican touchOptimized {...props} />\n);\n\nexport const TouchButton = (props) => (\n  <Button touchOptimized size=\"large\" {...props} />\n);\n\nexport default Button;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Card.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'transitions' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":35,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Card as MuiCard,\n  CardContent,\n  CardActions,\n  CardHeader,\n  CardMedia,\n  Paper,\n  useTheme as useMuiTheme\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useResponsive, getResponsivePadding, getResponsiveTransitions } from '../../utils/responsive';\nimport Button from './Button';\n\n/**\n * Standardized Card Component\n * Ensures consistent spacing, elevation, and responsive behavior\n */\nconst Card = ({\n  children,\n  variant = 'elevation', // 'elevation' | 'outlined' | 'jamaican'\n  elevation = 2,\n  interactive = false, // Adds hover effects\n  padding = 'medium', // 'small' | 'medium' | 'large' | 'none'\n  borderRadius = 'medium', // 'small' | 'medium' | 'large' | 'round'\n  header,\n  actions,\n  media,\n  fullHeight = false,\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const { isMobile } = useResponsive();\n  const transitions = getResponsiveTransitions(isMobile);\n\n  // Padding mapping using responsive utilities\n  const getPadding = () => {\n    return getResponsivePadding(padding);\n  };\n\n  // Border radius mapping\n  const getBorderRadius = () => {\n    const radiusMap = {\n      small: muiTheme.spacing(1),\n      medium: muiTheme.spacing(1.5),\n      large: muiTheme.spacing(3),\n      round: muiTheme.spacing(6)\n    };\n    return radiusMap[borderRadius] || radiusMap.medium;\n  };\n\n  // Interactive hover effects\n  const getInteractiveStyles = () => {\n    if (!interactive) return {};\n    \n    return {\n      cursor: 'pointer',\n      transition: 'all 0.3s ease-in-out',\n      '&:hover': {\n        transform: 'translateY(-4px)',\n        boxShadow: isDarkMode \n          ? '0 8px 32px rgba(0,0,0,0.4)' \n          : '0 8px 32px rgba(0,0,0,0.15)',\n        borderColor: variant === 'outlined' ? muiTheme.palette.primary.main : undefined\n      },\n      '&:active': {\n        transform: 'translateY(-2px)'\n      }\n    };\n  };\n\n  // Jamaican theme styling\n  const getJamaicanStyles = () => {\n    if (variant !== 'jamaican') return {};\n\n    return {\n      background: isDarkMode \n        ? `linear-gradient(135deg, ${jamaicanColors.darkGreen}15, ${jamaicanColors.gold}10)`\n        : `linear-gradient(135deg, ${jamaicanColors.green}08, ${jamaicanColors.gold}05)`,\n      border: `2px solid ${isDarkMode ? jamaicanColors.gold : jamaicanColors.green}`,\n      backdropFilter: 'blur(10px)'\n    };\n  };\n\n  const cardStyles = {\n    borderRadius: getBorderRadius(),\n    height: fullHeight ? '100%' : 'auto',\n    display: fullHeight ? 'flex' : 'block',\n    flexDirection: fullHeight ? 'column' : undefined,\n    backgroundColor: isDarkMode \n      ? muiTheme.palette.background.paper \n      : muiTheme.palette.background.paper,\n    ...getInteractiveStyles(),\n    ...getJamaicanStyles(),\n    ...props.sx\n  };\n\n  const CardComponent = variant === 'outlined' ? Paper : MuiCard;\n  const cardProps = {\n    elevation: variant === 'elevation' ? elevation : 0,\n    variant: variant === 'outlined' ? 'outlined' : undefined,\n    sx: cardStyles,\n    ...props\n  };\n\n  return (\n    <CardComponent {...cardProps}>\n      {header && <CardHeader {...header} />}\n      {media && <CardMedia {...media} />}\n      \n      <CardContent \n        sx={{ \n          p: getPadding(),\n          flex: fullHeight ? 1 : undefined,\n          '&:last-child': {\n            paddingBottom: actions ? getPadding() : getPadding()\n          }\n        }}\n      >\n        {children}\n      </CardContent>\n      \n      {actions && (\n        <CardActions \n          sx={{ \n            p: getPadding(),\n            pt: 0,\n            justifyContent: 'flex-end',\n            gap: muiTheme.spacing(1)\n          }}\n        >\n          {actions}\n        </CardActions>\n      )}\n    </CardComponent>\n  );\n};\n\n/**\n * Specialized Card variants for common use cases\n */\nexport const JobCard = ({ job, onApply, onView, ...props }) => (\n  <Card\n    variant=\"elevation\"\n    interactive\n    padding=\"medium\"\n    fullHeight\n    actions={[\n      <Button key=\"view\" variant=\"outlined\" size=\"small\" onClick={onView}>\n        View Details\n      </Button>,\n      <Button key=\"apply\" variant=\"contained\" size=\"small\" onClick={onApply}>\n        Apply Now\n      </Button>\n    ]}\n    {...props}\n  >\n    {props.children}\n  </Card>\n);\n\nexport const FeatureCard = (props) => (\n  <Card\n    variant=\"jamaican\"\n    interactive\n    padding=\"large\"\n    borderRadius=\"large\"\n    {...props}\n  />\n);\n\nexport const SimpleCard = (props) => (\n  <Card\n    variant=\"outlined\"\n    padding=\"medium\"\n    borderRadius=\"medium\"\n    {...props}\n  />\n);\n\nexport const CompactCard = (props) => (\n  <Card\n    variant=\"elevation\"\n    elevation={1}\n    padding=\"small\"\n    borderRadius=\"small\"\n    {...props}\n  />\n);\n\nexport default Card;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Form.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":35,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'touched' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Alert,\n  useTheme as useMuiTheme\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport Button from './Button';\nimport Typography from './Typography';\n\n/**\n * Standardized Form Component\n * Consistent form handling, validation, and submission patterns\n */\nconst Form = ({\n  children,\n  onSubmit,\n  loading = false,\n  error,\n  success,\n  title,\n  subtitle,\n  submitLabel = 'Submit',\n  resetLabel = 'Reset',\n  showReset = false,\n  validation = {},\n  touchOptimized = true,\n  jamaican = false,\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode } = useTheme();\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    if (onSubmit) {\n      const formData = new FormData(event.target);\n      const data = Object.fromEntries(formData.entries());\n      \n      // Basic validation\n      const validationErrors = validateForm(data);\n      setErrors(validationErrors);\n      \n      if (Object.keys(validationErrors).length === 0) {\n        await onSubmit(data, event);\n      }\n    }\n  };\n\n  const handleReset = () => {\n    setErrors({});\n    setTouched({});\n  };\n\n  const validateForm = (data) => {\n    const errors = {};\n    \n    Object.entries(validation).forEach(([field, rules]) => {\n      const value = data[field];\n      \n      if (rules.required && (!value || value.trim() === '')) {\n        errors[field] = `${field} is required`;\n      } else if (rules.email && value && !isValidEmail(value)) {\n        errors[field] = 'Please enter a valid email address';\n      } else if (rules.minLength && value && value.length < rules.minLength) {\n        errors[field] = `Must be at least ${rules.minLength} characters`;\n      } else if (rules.maxLength && value && value.length > rules.maxLength) {\n        errors[field] = `Must be no more than ${rules.maxLength} characters`;\n      } else if (rules.pattern && value && !rules.pattern.test(value)) {\n        errors[field] = rules.message || 'Invalid format';\n      }\n    });\n    \n    return errors;\n  };\n\n  const isValidEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n      sx={{\n        width: '100%',\n        ...(touchOptimized && {\n          '& .MuiFormControl-root': {\n            mb: muiTheme.spacing(3)\n          },\n          '& .MuiTextField-root': {\n            '& .MuiOutlinedInput-root': {\n              minHeight: { xs: 48, sm: 44 } // Touch-friendly\n            }\n          }\n        }),\n        ...props.sx\n      }}\n      {...props}\n    >\n      {/* Form Header */}\n      {(title || subtitle) && (\n        <Box sx={{ mb: 4, textAlign: 'center' }}>\n          {title && (\n            <Typography\n              variant=\"h4\"\n              component=\"h1\"\n              jamaican={jamaican}\n              sx={{ mb: subtitle ? 2 : 0 }}\n            >\n              {title}\n            </Typography>\n          )}\n          {subtitle && (\n            <Typography\n              variant=\"body1\"\n              color=\"text.secondary\"\n            >\n              {subtitle}\n            </Typography>\n          )}\n        </Box>\n      )}\n\n      {/* Error Alert */}\n      {error && (\n        <Alert \n          severity=\"error\" \n          sx={{ \n            mb: 3,\n            borderRadius: muiTheme.spacing(1)\n          }}\n        >\n          {error}\n        </Alert>\n      )}\n\n      {/* Success Alert */}\n      {success && (\n        <Alert \n          severity=\"success\" \n          sx={{ \n            mb: 3,\n            borderRadius: muiTheme.spacing(1)\n          }}\n        >\n          {success}\n        </Alert>\n      )}\n\n      {/* Form Fields */}\n      <Box sx={{ mb: 4 }}>\n        {children}\n      </Box>\n\n      {/* Form Actions */}\n      <Box\n        sx={{\n          display: 'flex',\n          gap: 2,\n          flexDirection: { xs: 'column', sm: 'row' },\n          justifyContent: 'flex-end'\n        }}\n      >\n        {showReset && (\n          <Button\n            type=\"reset\"\n            variant=\"outlined\"\n            disabled={loading}\n            touchOptimized={touchOptimized}\n            sx={{ order: { xs: 2, sm: 1 } }}\n          >\n            {resetLabel}\n          </Button>\n        )}\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          loading={loading}\n          jamaican={jamaican}\n          touchOptimized={touchOptimized}\n          sx={{ order: { xs: 1, sm: 2 } }}\n        >\n          {submitLabel}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\n/**\n * Form Field wrapper with consistent error handling\n */\nexport const FormField = ({\n  children,\n  label,\n  error,\n  helperText,\n  required = false,\n  touchOptimized = true,\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n\n  return (\n    <FormControl \n      fullWidth \n      error={!!error}\n      sx={{\n        mb: muiTheme.spacing(touchOptimized ? 3 : 2)\n      }}\n      {...props}\n    >\n      {label && (\n        <FormLabel \n          required={required}\n          sx={{\n            mb: 1,\n            fontWeight: 600,\n            color: 'text.primary',\n            '&.Mui-focused': {\n              color: 'primary.main'\n            }\n          }}\n        >\n          {label}\n        </FormLabel>\n      )}\n      {children}\n      {(error || helperText) && (\n        <FormHelperText sx={{ mt: 1 }}>\n          {error || helperText}\n        </FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\n/**\n * Specialized Form variants for common use cases\n */\nexport const LoginForm = (props) => (\n  <Form\n    title=\"Welcome Back\"\n    subtitle=\"Sign in to your account\"\n    submitLabel=\"Sign In\"\n    jamaican\n    touchOptimized\n    validation={{\n      email: { required: true, email: true },\n      password: { required: true, minLength: 6 }\n    }}\n    {...props}\n  />\n);\n\nexport const RegistrationForm = (props) => (\n  <Form\n    title=\"Join JamDung Jobs\"\n    subtitle=\"Create your account to get started\"\n    submitLabel=\"Create Account\"\n    jamaican\n    touchOptimized\n    validation={{\n      name: { required: true, minLength: 2 },\n      email: { required: true, email: true },\n      password: { required: true, minLength: 8 }\n    }}\n    {...props}\n  />\n);\n\nexport const JobApplicationForm = (props) => (\n  <Form\n    title=\"Apply for Position\"\n    submitLabel=\"Submit Application\"\n    showReset\n    touchOptimized\n    validation={{\n      coverLetter: { required: true, minLength: 100 },\n      phone: { required: true }\n    }}\n    {...props}\n  />\n);\n\nexport const ContactForm = (props) => (\n  <Form\n    title=\"Get in Touch\"\n    subtitle=\"We'd love to hear from you\"\n    submitLabel=\"Send Message\"\n    touchOptimized\n    validation={{\n      name: { required: true },\n      email: { required: true, email: true },\n      message: { required: true, minLength: 10 }\n    }}\n    {...props}\n  />\n);\n\nexport default Form;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Input.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'Select' has already been declared. (118:13)","line":118,"column":13,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  TextField as MuiTextField,\n  InputAdornment,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Box,\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useResponsive, getTouchTargetSize } from '../../utils/responsive';\n\n/**\n * Standardized Input Component\n * Ensures consistent styling, touch optimization, and theme usage\n */\nconst Input = ({\n  variant = 'outlined',\n  size = 'medium',\n  touchOptimized = true,\n  startIcon,\n  endIcon,\n  jamaican = false, // Use Jamaican theme colors\n  ...props\n}) => {\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const { isMobile } = useResponsive();\n\n  // Touch-optimized sizing using responsive utilities\n  const getTouchOptimizedProps = () => {\n    if (!touchOptimized) return {};\n    \n    const touchTargets = getTouchTargetSize(size, touchOptimized);\n    \n    return {\n      sx: {\n        '& .MuiOutlinedInput-root': {\n          ...touchTargets,\n          '& input': {\n            fontSize: isMobile ? '1rem' : undefined,\n            padding: { xs: '12px 16px', sm: '10px 14px' },\n          },\n        },\n        ...props.sx,\n      }\n    };\n  };\n\n  // Jamaican theme styling\n  const getJamaicanStyling = () => {\n    if (!jamaican) return {};\n\n    return {\n      sx: {\n        '& .MuiOutlinedInput-root': {\n          '& fieldset': {\n            borderColor: isDarkMode ? jamaicanColors.gold : jamaicanColors.green,\n          },\n          '&:hover fieldset': {\n            borderColor: isDarkMode ? jamaicanColors.goldLight : jamaicanColors.lightGreen,\n          },\n          '&.Mui-focused fieldset': {\n            borderColor: isDarkMode ? jamaicanColors.gold : jamaicanColors.green,\n            borderWidth: 2,\n          },\n        },\n        '& .MuiInputLabel-root': {\n          '&.Mui-focused': {\n            color: isDarkMode ? jamaicanColors.gold : jamaicanColors.green,\n          },\n        },\n        ...props.sx,\n      }\n    };\n  };\n\n  // Icon adornments\n  const getAdornments = () => {\n    const adornments = {};\n    \n    if (startIcon) {\n      adornments.startAdornment = (\n        <InputAdornment position=\"start\">\n          {startIcon}\n        </InputAdornment>\n      );\n    }\n    \n    if (endIcon) {\n      adornments.endAdornment = (\n        <InputAdornment position=\"end\">\n          {endIcon}\n        </InputAdornment>\n      );\n    }\n    \n    return Object.keys(adornments).length > 0 ? { InputProps: adornments } : {};\n  };\n\n  const inputProps = {\n    variant,\n    size,\n    fullWidth: true,\n    ...getAdornments(),\n    ...(touchOptimized ? getTouchOptimizedProps() : {}),\n    ...(jamaican ? getJamaicanStyling() : {}),\n    ...props,\n  };\n\n  return <MuiTextField {...inputProps} />;\n};\n\n/**\n * Standardized Select Component\n */\nexport const Select = ({\n  options = [],\n  multiple = false,\n  touchOptimized = true,\n  jamaican = false,\n  renderValue,\n  ...props\n}) => {\n  const { isMobile } = useResponsive();\n\n  const getTouchOptimizedProps = () => {\n    if (!touchOptimized) return {};\n    \n    return {\n      MenuProps: {\n        PaperProps: {\n          sx: {\n            '& .MuiMenuItem-root': {\n              minHeight: { xs: 48, sm: 44 },\n              fontSize: isMobile ? '1rem' : undefined,\n            },\n          },\n        },\n      },\n    };\n  };\n\n  const defaultRenderValue = (selected) => {\n    if (multiple && Array.isArray(selected)) {\n      return (\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n          {selected.map((value) => (\n            <Chip key={value} label={value} size=\"small\" />\n          ))}\n        </Box>\n      );\n    }\n    return selected;\n  };\n\n  return (\n    <Input\n      select\n      touchOptimized={touchOptimized}\n      jamaican={jamaican}\n      SelectProps={{\n        multiple,\n        renderValue: renderValue || (multiple ? defaultRenderValue : undefined),\n        ...(touchOptimized ? getTouchOptimizedProps() : {}),\n      }}\n      {...props}\n    >\n      {options.map((option) => (\n        <MenuItem \n          key={option.value || option} \n          value={option.value || option}\n          sx={{\n            minHeight: touchOptimized ? { xs: 48, sm: 44 } : undefined,\n          }}\n        >\n          {option.label || option}\n        </MenuItem>\n      ))}\n    </Input>\n  );\n};\n\n/**\n * Specialized Input variants for common use cases\n */\nexport const SearchInput = (props) => (\n  <Input\n    placeholder=\"Search...\"\n    touchOptimized\n    jamaican\n    {...props}\n  />\n);\n\nexport const PasswordInput = (props) => (\n  <Input\n    type=\"password\"\n    touchOptimized\n    {...props}\n  />\n);\n\nexport const EmailInput = (props) => (\n  <Input\n    type=\"email\"\n    touchOptimized\n    {...props}\n  />\n);\n\nexport const PhoneInput = (props) => (\n  <Input\n    type=\"tel\"\n    touchOptimized\n    {...props}\n  />\n);\n\nexport const NumberInput = (props) => (\n  <Input\n    type=\"number\"\n    touchOptimized\n    {...props}\n  />\n);\n\nexport const TextArea = (props) => (\n  <Input\n    multiline\n    rows={4}\n    touchOptimized\n    {...props}\n  />\n);\n\nexport default Input;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Loading.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":25,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Box,\n  CircularProgress,\n  LinearProgress,\n  Skeleton,\n  useTheme as useMuiTheme\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\nimport Typography from './Typography';\n\n/**\n * Standardized Loading Component\n * Consistent loading states across the application\n */\nconst Loading = ({\n  variant = 'circular', // 'circular' | 'linear' | 'skeleton' | 'dots'\n  size = 'medium', // 'small' | 'medium' | 'large'\n  message,\n  jamaican = false,\n  fullScreen = false,\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n\n  // Size mapping\n  const getSizeProps = () => {\n    const sizeMap = {\n      small: { width: 24, height: 24 },\n      medium: { width: 40, height: 40 },\n      large: { width: 60, height: 60 }\n    };\n    return sizeMap[size] || sizeMap.medium;\n  };\n\n  // Jamaican colors\n  const getJamaicanStyles = () => {\n    if (!jamaican) return {};\n    \n    return {\n      '& .MuiCircularProgress-circle': {\n        stroke: `url(#jamaican-gradient-${Date.now()})`\n      }\n    };\n  };\n\n  const renderJamaicanGradient = () => (\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <linearGradient id={`jamaican-gradient-${Date.now()}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor={jamaicanColors.green} />\n          <stop offset=\"100%\" stopColor={jamaicanColors.gold} />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n\n  const renderCircular = () => (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      {jamaican && renderJamaicanGradient()}\n      <CircularProgress\n        size={getSizeProps().width}\n        sx={{\n          color: jamaican ? jamaicanColors.green : 'primary.main',\n          ...getJamaicanStyles()\n        }}\n        {...props}\n      />\n    </Box>\n  );\n\n  const renderLinear = () => (\n    <LinearProgress\n      sx={{\n        width: '100%',\n        borderRadius: 1,\n        backgroundColor: muiTheme.palette.action.hover,\n        '& .MuiLinearProgress-bar': {\n          background: jamaican \n            ? `linear-gradient(90deg, ${jamaicanColors.green}, ${jamaicanColors.gold})`\n            : muiTheme.palette.primary.main\n        }\n      }}\n      {...props}\n    />\n  );\n\n  const renderSkeleton = () => (\n    <Box>\n      <Skeleton \n        variant=\"rectangular\" \n        width=\"100%\" \n        height={getSizeProps().height}\n        sx={{ borderRadius: 1 }}\n      />\n      {message && (\n        <Skeleton \n          variant=\"text\" \n          width=\"60%\" \n          sx={{ mt: 1 }}\n        />\n      )}\n    </Box>\n  );\n\n  const renderDots = () => (\n    <Box\n      sx={{\n        display: 'flex',\n        gap: 1,\n        alignItems: 'center'\n      }}\n    >\n      {[0, 1, 2].map((dot) => (\n        <Box\n          key={dot}\n          sx={{\n            width: size === 'small' ? 6 : size === 'large' ? 12 : 8,\n            height: size === 'small' ? 6 : size === 'large' ? 12 : 8,\n            borderRadius: '50%',\n            backgroundColor: jamaican ? jamaicanColors.green : 'primary.main',\n            animation: `jamaicanDots 1.4s ease-in-out ${dot * 0.16}s infinite both`,\n            '@keyframes jamaicanDots': {\n              '0%, 80%, 100%': {\n                transform: 'scale(0)',\n                opacity: 0.5\n              },\n              '40%': {\n                transform: 'scale(1)',\n                opacity: 1\n              }\n            }\n          }}\n        />\n      ))}\n    </Box>\n  );\n\n  const renderVariant = () => {\n    switch (variant) {\n      case 'linear':\n        return renderLinear();\n      case 'skeleton':\n        return renderSkeleton();\n      case 'dots':\n        return renderDots();\n      default:\n        return renderCircular();\n    }\n  };\n\n  const content = (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 2,\n        ...(fullScreen && {\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          zIndex: 9999,\n          justifyContent: 'center'\n        }),\n        ...props.sx\n      }}\n    >\n      {renderVariant()}\n      {message && variant !== 'skeleton' && (\n        <Typography \n          variant=\"body2\" \n          color=\"text.secondary\"\n          sx={{ textAlign: 'center' }}\n        >\n          {message}\n        </Typography>\n      )}\n    </Box>\n  );\n\n  return content;\n};\n\n/**\n * Specialized Loading variants\n */\nexport const PageLoader = (props) => (\n  <Loading\n    variant=\"circular\"\n    size=\"large\"\n    jamaican\n    message=\"Loading...\"\n    fullScreen\n    {...props}\n  />\n);\n\nexport const ButtonLoader = (props) => (\n  <Loading\n    variant=\"circular\"\n    size=\"small\"\n    {...props}\n  />\n);\n\nexport const ContentLoader = (props) => (\n  <Loading\n    variant=\"skeleton\"\n    size=\"medium\"\n    {...props}\n  />\n);\n\nexport const InlineLoader = (props) => (\n  <Loading\n    variant=\"dots\"\n    size=\"small\"\n    jamaican\n    {...props}\n  />\n);\n\nexport default Loading;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Navigation.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'drawerConfig' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":47,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Box,\n  Avatar,\n  Divider\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp';\nimport LoginIcon from '@mui/icons-material/Login';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { useNavigate } from 'react-router-dom';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useResponsive, TOUCH_TARGETS } from '../../utils/responsive';\nimport { IconButton } from './Button';\nimport Typography from './Typography';\n\n/**\n * Standardized Navigation Component\n * Ensures consistent header behavior across all pages\n */\nconst Navigation = ({\n  brand = 'JamDung Jobs',\n  brandIcon = '🇯🇲',\n  user = null,\n  menuItems = [],\n  actions = [],\n  elevation = 4,\n  position = 'sticky',\n  onMenuClick,\n  onUserClick,\n  onLogout,\n  ...props\n}) => {\n  const navigate = useNavigate();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const { isMobile } = useResponsive();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  \n  // Get responsive drawer configuration\n  const drawerConfig = {\n    width: isMobile ? 280 : 320,\n    itemHeight: TOUCH_TARGETS.RECOMMENDED\n  };\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    setDrawerOpen(false);\n  };\n\n  const handleLogout = () => {\n    if (onLogout) onLogout();\n    setDrawerOpen(false);\n    navigate('/');\n  };\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n    if (onMenuClick) onMenuClick(!drawerOpen);\n  };\n\n  const handleUserClick = () => {\n    if (onUserClick) {\n      onUserClick();\n    } else if (user) {\n      // Default behavior: navigate to profile\n      navigate('/profile');\n    } else {\n      navigate('/login');\n    }\n  };\n\n  return (\n    <>\n      <AppBar\n        position={position}\n        elevation={elevation}\n        sx={{\n          background: isDarkMode \n            ? `linear-gradient(135deg, ${jamaicanColors.darkGreen} 0%, ${jamaicanColors.goldDark} 100%)`\n            : `linear-gradient(135deg, ${jamaicanColors.green} 0%, ${jamaicanColors.gold} 100%)`,\n          boxShadow: isDarkMode \n            ? '0 2px 10px rgba(0,0,0,0.3)' \n            : '0 2px 10px rgba(0,0,0,0.1)',\n          backdropFilter: 'blur(10px)',\n          '& .MuiToolbar-root': {\n            minHeight: { xs: 64, sm: 72 },\n            px: { xs: 2, sm: 3 }\n          },\n          ...props.sx\n        }}\n        {...props}\n      >\n        <Toolbar>\n          {/* Menu Button */}\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleDrawer}\n            touchOptimized\n            sx={{\n              '&:hover': {\n                backgroundColor: 'rgba(255,255,255,0.1)'\n              }\n            }}\n          >\n            <MenuIcon sx={{ fontSize: 28 }} />\n          </IconButton>\n\n          {/* Brand - Clickable to go home */}\n          <Box \n            sx={{ \n              flexGrow: 1, \n              display: 'flex', \n              alignItems: 'center', \n              ml: 2,\n              cursor: 'pointer',\n              '&:hover': {\n                opacity: 0.9,\n                transform: 'translateY(-1px)'\n              },\n              '&:active': {\n                transform: 'translateY(0px)'\n              },\n              transition: 'all 0.2s ease-in-out'\n            }}\n            onClick={() => navigate('/')}\n            role=\"button\"\n            aria-label=\"Go to homepage\"\n          >\n            <Typography \n              variant=\"h5\" \n              component=\"div\" \n              sx={{ \n                fontWeight: 800,\n                fontSize: { xs: '1.5rem', sm: '1.8rem' },\n                background: 'linear-gradient(45deg, #FFFFFF, #FFEB3B)',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent',\n                backgroundClip: 'text',\n                textShadow: '2px 2px 4px rgba(0,0,0,0.3)',\n                letterSpacing: '-0.02em'\n              }}\n            >\n              {brand}\n            </Typography>\n            <Typography \n              variant=\"caption\"\n              sx={{\n                ml: 1,\n                fontSize: '0.7rem',\n                color: 'rgba(255,255,255,0.8)',\n                fontStyle: 'italic',\n                display: { xs: 'none', sm: 'block' }\n              }}\n            >\n              {brandIcon}\n            </Typography>\n          </Box>\n\n          {/* Actions */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {actions.map((action, index) => (\n              <Box key={index}>{action}</Box>\n            ))}\n            \n            {/* User Avatar/Login Button */}\n            <IconButton\n              color=\"inherit\"\n              onClick={handleUserClick}\n              touchOptimized\n            >\n              {user ? (\n                <Avatar\n                  sx={{\n                    width: 32,\n                    height: 32,\n                    bgcolor: 'primary.main',\n                    fontSize: '0.9rem'\n                  }}\n                >\n                  {user.name?.charAt(0) || 'U'}\n                </Avatar>\n              ) : (\n                <Typography sx={{ \n                  px: 2, \n                  py: 0.5, \n                  bgcolor: 'rgba(255,255,255,0.1)', \n                  borderRadius: 1,\n                  fontSize: '0.9rem',\n                  fontWeight: 600\n                }}>\n                  Sign In\n                </Typography>\n              )}\n            </IconButton>\n          </Box>\n        </Toolbar>\n      </AppBar>\n\n      {/* Mobile Drawer */}\n      <Drawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={toggleDrawer}\n        PaperProps={{\n          sx: {\n            width: 280,\n            background: isDarkMode \n              ? `linear-gradient(180deg, ${jamaicanColors.darkGreen} 0%, ${jamaicanColors.black} 100%)`\n              : `linear-gradient(180deg, ${jamaicanColors.green} 0%, ${jamaicanColors.darkGreen} 100%)`,\n            color: 'white',\n            backdropFilter: 'blur(10px)'\n          }\n        }}\n      >\n        {/* User Info */}\n        {user && (\n          <Box sx={{ p: 3, bgcolor: 'primary.main', color: 'white' }}>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Avatar\n                sx={{\n                  width: 48,\n                  height: 48,\n                  mr: 2,\n                  bgcolor: 'white',\n                  color: 'primary.main'\n                }}\n              >\n                {user.name?.charAt(0) || 'U'}\n              </Avatar>\n              <Box>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                  {user.name || 'User'}\n                </Typography>\n                <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                  {user.email}\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n        )}\n\n        {/* Menu Items */}\n        <List sx={{ pt: user ? 0 : 2 }}>\n          {menuItems.map((item) => (\n            <ListItem\n              button\n              key={item.text}\n              onClick={() => handleNavigation(item.path)}\n              sx={{\n                py: 1.5,\n                minHeight: 48, // Touch-friendly\n                '&:hover': {\n                  bgcolor: 'primary.light',\n                  '& .MuiListItemIcon-root': {\n                    color: 'primary.main'\n                  }\n                }\n              }}\n            >\n              <ListItemIcon sx={{ color: 'text.secondary', minWidth: 40 }}>\n                {item.icon}\n              </ListItemIcon>\n              <ListItemText \n                primary={item.text}\n                primaryTypographyProps={{\n                  fontWeight: 500\n                }}\n              />\n            </ListItem>\n          ))}\n        </List>\n\n        {/* Footer Actions */}\n        <Box sx={{ mt: 'auto' }}>\n          <Divider />\n          {user ? (\n            <ListItem\n              button\n              onClick={handleLogout}\n              sx={{\n                py: 1.5,\n                minHeight: 48,\n                color: 'error.main',\n                '&:hover': {\n                  bgcolor: 'error.light',\n                  color: 'error.dark'\n                }\n              }}\n            >\n              <ListItemIcon sx={{ color: 'inherit', minWidth: 40 }}>\n                <ExitToAppIcon />\n              </ListItemIcon>\n              <ListItemText \n                primary=\"Sign Out\"\n                primaryTypographyProps={{\n                  fontWeight: 500\n                }}\n              />\n            </ListItem>\n          ) : (\n            <>\n              <ListItem\n                button\n                onClick={() => handleNavigation('/login')}\n                sx={{ py: 1.5, minHeight: 48 }}\n              >\n                <ListItemIcon sx={{ minWidth: 40 }}>\n                  <LoginIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Sign In\" />\n              </ListItem>\n              <ListItem\n                button\n                onClick={() => handleNavigation('/register')}\n                sx={{ py: 1.5, minHeight: 48 }}\n              >\n                <ListItemIcon sx={{ minWidth: 40 }}>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Register\" />\n              </ListItem>\n            </>\n          )}\n        </Box>\n      </Drawer>\n    </>\n  );\n};\n\n/**\n * Specialized Navigation variants\n */\nexport const AppNavigation = (props) => (\n  <Navigation\n    brand=\"JamDung Jobs\"\n    brandIcon=\"🇯🇲\"\n    position=\"sticky\"\n    elevation={4}\n    {...props}\n  />\n);\n\nexport const SimpleNavigation = (props) => (\n  <Navigation\n    elevation={1}\n    position=\"static\"\n    {...props}\n  />\n);\n\nexport default Navigation;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/Typography.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isDarkMode' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":21,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":22,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Typography as MuiTypography,\n  useTheme as useMuiTheme,\n  useMediaQuery\n} from '@mui/material';\nimport { useTheme } from '../../context/ThemeContext';\n\n/**\n * Standardized Typography Component\n * Ensures consistent typography hierarchy and theme usage\n */\nconst Typography = ({\n  variant = 'body1',\n  component,\n  jamaican = false, // Use Jamaican gradient styling\n  responsive = true, // Auto-adjust for mobile\n  ...props\n}) => {\n  const muiTheme = useMuiTheme();\n  const { isDarkMode, jamaicanColors } = useTheme();\n  const isMobile = useMediaQuery(muiTheme.breakpoints.down('md'));\n\n  // Auto-determine component if not specified\n  const getComponent = () => {\n    if (component) return component;\n    \n    const componentMap = {\n      h1: 'h1',\n      h2: 'h2',\n      h3: 'h3',\n      h4: 'h4',\n      h5: 'h5',\n      h6: 'h6',\n      subtitle1: 'h6',\n      subtitle2: 'h6',\n      body1: 'p',\n      body2: 'p',\n      caption: 'span',\n      overline: 'span',\n      button: 'span'\n    };\n    \n    return componentMap[variant] || 'span';\n  };\n\n  // Jamaican theme styling\n  const getJamaicanStyling = () => {\n    if (!jamaican) return {};\n\n    return {\n      sx: {\n        background: `linear-gradient(45deg, ${jamaicanColors.green}, ${jamaicanColors.gold})`,\n        backgroundClip: 'text',\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent',\n        fontWeight: 'bold',\n        ...props.sx\n      }\n    };\n  };\n\n  // Responsive adjustments\n  const getResponsiveProps = () => {\n    if (!responsive) return {};\n    \n    // Apply responsive typography from theme\n    return {\n      sx: {\n        ...muiTheme.typography[variant],\n        ...props.sx\n      }\n    };\n  };\n\n  const typographyProps = {\n    variant,\n    component: getComponent(),\n    ...(jamaican ? getJamaicanStyling() : {}),\n    ...(responsive ? getResponsiveProps() : {}),\n    ...props\n  };\n\n  return <MuiTypography {...typographyProps} />;\n};\n\n/**\n * Specialized Typography variants for common use cases\n */\nexport const PageTitle = (props) => (\n  <Typography\n    variant=\"h1\"\n    component=\"h1\"\n    jamaican\n    responsive\n    sx={{\n      textAlign: 'center',\n      mb: 4,\n      fontWeight: 800,\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const SectionTitle = (props) => (\n  <Typography\n    variant=\"h2\"\n    component=\"h2\"\n    jamaican\n    responsive\n    sx={{\n      textAlign: 'center',\n      mb: 3,\n      fontWeight: 700,\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const CardTitle = (props) => (\n  <Typography\n    variant=\"h5\"\n    component=\"h3\"\n    responsive\n    sx={{\n      fontWeight: 600,\n      mb: 1,\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const JobTitle = (props) => (\n  <Typography\n    variant=\"h6\"\n    component=\"h4\"\n    responsive\n    sx={{\n      fontWeight: 600,\n      color: 'primary.main',\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const CompanyName = (props) => (\n  <Typography\n    variant=\"subtitle1\"\n    component=\"span\"\n    responsive\n    sx={{\n      fontWeight: 500,\n      color: 'text.secondary',\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const Tagline = (props) => (\n  <Typography\n    variant=\"tagline\" // Custom variant from theme\n    component=\"p\"\n    responsive\n    sx={{\n      textAlign: 'center',\n      fontStyle: 'italic',\n      color: 'text.secondary',\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const Label = (props) => (\n  <Typography\n    variant=\"body2\"\n    component=\"label\"\n    responsive\n    sx={{\n      fontWeight: 600,\n      color: 'text.primary',\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const Caption = (props) => (\n  <Typography\n    variant=\"caption\"\n    component=\"span\"\n    responsive\n    sx={{\n      color: 'text.secondary',\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport const ButtonText = (props) => (\n  <Typography\n    variant=\"button\"\n    component=\"span\"\n    responsive\n    sx={{\n      fontWeight: 600,\n      ...props.sx\n    }}\n    {...props}\n  />\n);\n\nexport default Typography;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/components/ui/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/config/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/config/stripe.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":262,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":276,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Stripe Configuration for JamDung Jobs\nimport { loadStripe } from '@stripe/stripe-js';\n\n// Initialize Stripe with publishable key\nconst stripePublishableKey = process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY;\n\nif (!stripePublishableKey) {\n  console.warn('Stripe publishable key not found. Payment features will be disabled.');\n}\n\n// Load Stripe instance\nexport const stripePromise = loadStripe(stripePublishableKey);\n\n// Stripe Elements appearance configuration\nexport const stripeElementsOptions = {\n  appearance: {\n    theme: 'stripe',\n    variables: {\n      colorPrimary: '#00A651', // Jamaican green\n      colorBackground: '#ffffff',\n      colorText: '#30313d',\n      colorDanger: '#df1b41',\n      fontFamily: 'Roboto, system-ui, sans-serif',\n      spacingUnit: '4px',\n      borderRadius: '8px'\n    },\n    rules: {\n      '.Input': {\n        border: '1px solid #e6ebf1',\n        borderRadius: '8px',\n        padding: '12px',\n        fontSize: '16px'\n      },\n      '.Input:focus': {\n        borderColor: '#00A651',\n        boxShadow: '0 0 0 2px rgba(0, 166, 81, 0.1)'\n      },\n      '.Label': {\n        fontSize: '14px',\n        fontWeight: '500',\n        color: '#30313d',\n        marginBottom: '6px'\n      },\n      '.Error': {\n        color: '#df1b41',\n        fontSize: '14px',\n        marginTop: '4px'\n      }\n    }\n  },\n  loader: 'auto'\n};\n\n// Payment method types supported\nexport const SUPPORTED_PAYMENT_METHODS = [\n  'card',\n  'apple_pay',\n  'google_pay'\n];\n\n// Currency configuration\nexport const CURRENCY_CONFIG = {\n  USD: {\n    symbol: '$',\n    code: 'USD',\n    name: 'US Dollar',\n    decimals: 2\n  },\n  JMD: {\n    symbol: 'J$',\n    code: 'JMD', \n    name: 'Jamaican Dollar',\n    decimals: 2\n  }\n};\n\n// Pricing tiers for job postings\nexport const JOB_POSTING_PLANS = {\n  BASIC: {\n    id: 'basic',\n    name: 'Basic Listing',\n    description: 'Standard job posting with basic visibility',\n    prices: { USD: 50, JMD: 77 },\n    features: [\n      'Standard job listing',\n      '30-day visibility',\n      'Basic applicant filtering',\n      'Email notifications'\n    ],\n    popular: false\n  },\n  FEATURED: {\n    id: 'featured',\n    name: 'Featured Listing',\n    description: 'Enhanced visibility with featured placement',\n    prices: { USD: 100, JMD: 154 },\n    features: [\n      'Featured placement in search',\n      '45-day visibility',\n      'Priority in job recommendations',\n      'Advanced applicant filtering',\n      'SMS notifications',\n      'Application analytics'\n    ],\n    popular: true\n  },\n  PREMIUM: {\n    id: 'premium',\n    name: 'Premium Listing',\n    description: 'Maximum visibility with premium benefits',\n    prices: { USD: 150, JMD: 231 },\n    features: [\n      'Top placement in all searches',\n      '60-day visibility',\n      'Premium badge display',\n      'Advanced analytics dashboard',\n      'Priority customer support',\n      'Social media promotion',\n      'HEART graduate priority matching'\n    ],\n    popular: false,\n    heartBenefits: true\n  }\n};\n\n// Subscription plans for employers\nexport const SUBSCRIPTION_PLANS = {\n  BASIC: {\n    id: 'sub_basic',\n    name: 'Basic Plan',\n    description: 'Perfect for small businesses',\n    prices: { USD: 200, JMD: 308 },\n    interval: 'month',\n    features: [\n      'Up to 5 job postings per month',\n      'Basic applicant tracking',\n      'Email support',\n      'Standard analytics'\n    ],\n    popular: false\n  },\n  PREMIUM: {\n    id: 'sub_premium',\n    name: 'Premium Plan',\n    description: 'Best for growing companies',\n    prices: { USD: 500, JMD: 770 },\n    interval: 'month',\n    features: [\n      'Unlimited job postings',\n      'Advanced applicant tracking',\n      'Priority support',\n      'Advanced analytics',\n      'HEART graduate access',\n      'Bulk recruitment tools',\n      'Custom branding'\n    ],\n    popular: true,\n    heartBenefits: true\n  }\n};\n\n// Payment status constants\nexport const PAYMENT_STATUS = {\n  REQUIRES_PAYMENT_METHOD: 'requires_payment_method',\n  REQUIRES_CONFIRMATION: 'requires_confirmation',\n  REQUIRES_ACTION: 'requires_action',\n  PROCESSING: 'processing',\n  REQUIRES_CAPTURE: 'requires_capture',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\n// Subscription status constants\nexport const SUBSCRIPTION_STATUS = {\n  ACTIVE: 'active',\n  PAST_DUE: 'past_due',\n  UNPAID: 'unpaid',\n  CANCELED: 'canceled',\n  INCOMPLETE: 'incomplete',\n  INCOMPLETE_EXPIRED: 'incomplete_expired',\n  TRIALING: 'trialing'\n};\n\n// Error types\nexport const PAYMENT_ERROR_TYPES = {\n  CARD_ERROR: 'card_error',\n  VALIDATION_ERROR: 'validation_error',\n  API_ERROR: 'api_error',\n  AUTHENTICATION_ERROR: 'authentication_error',\n  RATE_LIMIT_ERROR: 'rate_limit_error'\n};\n\n// Utility functions\nexport const formatCurrency = (amountInCents, currency = 'USD') => {\n  const amount = amountInCents / 100;\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency.toUpperCase(),\n    minimumFractionDigits: 2\n  }).format(amount);\n};\n\nexport const getPaymentMethodIcon = (type) => {\n  const icons = {\n    card: '💳',\n    apple_pay: '🍎',\n    google_pay: '🔵',\n    paypal: '🅿️',\n    bank_transfer: '🏦',\n    cash_app: '💚',\n    link: '🔗',\n    us_bank_account: '🏛️',\n    sepa_debit: '🇪🇺',\n    ideal: '🇳🇱',\n    sofort: '🇩🇪',\n    bancontact: '🇧🇪',\n    giropay: '🇩🇪',\n    eps: '🇦🇹',\n    p24: '🇵🇱',\n    alipay: '🇨🇳',\n    wechat_pay: '💬',\n    afterpay_clearpay: '⏰',\n    klarna: '🛍️'\n  };\n  return icons[type] || '💳';\n};\n\nexport const convertCurrency = (amount, fromCurrency, toCurrency, exchangeRate = 1.54) => {\n  if (fromCurrency === toCurrency) return amount;\n  \n  if (fromCurrency === 'USD' && toCurrency === 'JMD') {\n    return Math.round(amount * exchangeRate);\n  }\n  \n  if (fromCurrency === 'JMD' && toCurrency === 'USD') {\n    return Math.round(amount / exchangeRate);\n  }\n  \n  return amount;\n};\n\n\n\nexport const validateStripeConfig = () => {\n  const errors = [];\n  \n  if (!stripePublishableKey) {\n    errors.push('Stripe publishable key is missing');\n  }\n  \n  if (!stripePublishableKey?.startsWith('pk_')) {\n    errors.push('Invalid Stripe publishable key format');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Export default configuration\nexport default {\n  stripePromise,\n  stripeElementsOptions,\n  SUPPORTED_PAYMENT_METHODS,\n  CURRENCY_CONFIG,\n  JOB_POSTING_PLANS,\n  SUBSCRIPTION_PLANS,\n  PAYMENT_STATUS,\n  SUBSCRIPTION_STATUS,\n  PAYMENT_ERROR_TYPES,\n  formatCurrency,\n  convertCurrency,\n  getPaymentMethodIcon,\n  validateStripeConfig\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/constants/jobTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/context/AuthContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/context/ThemeContext.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/data/jamaicaLocations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/hooks/useGoogleAuth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/hooks/usePayment.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'customerId' is defined but never used. Allowed unused args must match /^_/u.","line":106,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Custom Payment Hooks for JamDung Jobs\nimport { useState, useCallback, useEffect } from 'react';\nimport { useStripe, useElements } from '@stripe/react-stripe-js';\nimport paymentApiService from '../services/paymentApi.service';\nimport { PAYMENT_STATUS } from '../config/stripe.config';\n\n// Main payment processing hook\nexport const usePayment = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [paymentIntent, setPaymentIntent] = useState(null);\n\n  const createPaymentIntent = useCallback(async (paymentData) => {\n    if (!stripe) {\n      throw new Error('Stripe not initialized');\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.createPaymentIntent(paymentData);\n      \n      if (response.success) {\n        setPaymentIntent(response.data);\n        return response.data;\n      } else {\n        throw new Error(response.message || 'Failed to create payment intent');\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [stripe]);\n\n  const confirmPayment = useCallback(async (clientSecret, paymentData = {}) => {\n    if (!stripe || !elements) {\n      throw new Error('Stripe not initialized');\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { error: stripeError, paymentIntent: confirmedPayment } = await stripe.confirmPayment({\n        elements,\n        clientSecret,\n        confirmParams: {\n          return_url: `${window.location.origin}/payment/success`,\n          ...paymentData\n        },\n        redirect: 'if_required'\n      });\n\n      if (stripeError) {\n        throw stripeError;\n      }\n\n      if (confirmedPayment.status === PAYMENT_STATUS.SUCCEEDED) {\n        // Notify backend of successful payment\n        await paymentApiService.confirmPayment(confirmedPayment.id);\n        setPaymentIntent(confirmedPayment);\n        return confirmedPayment;\n      }\n\n      return confirmedPayment;\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [stripe, elements]);\n\n  const processCardPayment = useCallback(async (paymentData) => {\n    try {\n      // Step 1: Create payment intent\n      const intent = await createPaymentIntent(paymentData);\n      \n      // Step 2: Confirm payment\n      const result = await confirmPayment(intent.client_secret);\n      \n      return result;\n    } catch (err) {\n      console.error('Payment processing failed:', err);\n      throw err;\n    }\n  }, [createPaymentIntent, confirmPayment]);\n\n  return {\n    createPaymentIntent,\n    confirmPayment,\n    processCardPayment,\n    paymentIntent,\n    loading,\n    error,\n    clearError: () => setError(null)\n  };\n};\n\n// Subscription management hook\nexport const useSubscription = (customerId) => {\n  const [subscription, setSubscription] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchSubscription = useCallback(async (subscriptionId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.getSubscription(subscriptionId);\n      if (response.success) {\n        setSubscription(response.data);\n        return response.data;\n      }\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createSubscription = useCallback(async (planId, paymentMethodId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.createSubscription(planId, paymentMethodId);\n      if (response.success) {\n        setSubscription(response.data);\n        return response.data;\n      } else {\n        throw new Error(response.message || 'Failed to create subscription');\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateSubscription = useCallback(async (subscriptionId, planId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.updateSubscription(subscriptionId, planId);\n      if (response.success) {\n        setSubscription(response.data);\n        return response.data;\n      } else {\n        throw new Error(response.message || 'Failed to update subscription');\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const cancelSubscription = useCallback(async (subscriptionId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.cancelSubscription(subscriptionId);\n      if (response.success) {\n        setSubscription(prev => ({ ...prev, status: 'canceled', cancel_at_period_end: true }));\n        return response.data;\n      } else {\n        throw new Error(response.message || 'Failed to cancel subscription');\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const reactivateSubscription = useCallback(async (subscriptionId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.reactivateSubscription(subscriptionId);\n      if (response.success) {\n        setSubscription(response.data);\n        return response.data;\n      } else {\n        throw new Error(response.message || 'Failed to reactivate subscription');\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    subscription,\n    fetchSubscription,\n    createSubscription,\n    updateSubscription,\n    cancelSubscription,\n    reactivateSubscription,\n    loading,\n    error,\n    clearError: () => setError(null)\n  };\n};\n\n// Payment history hook\nexport const usePaymentHistory = (customerId) => {\n  const [payments, setPayments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0,\n    hasNext: false,\n    hasPrev: false\n  });\n\n  const fetchPayments = useCallback(async (params = {}) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.getPaymentHistory({\n        customerId,\n        ...params\n      });\n\n      if (response.success) {\n        if (params.page === 1) {\n          setPayments(response.data.data);\n        } else {\n          setPayments(prev => [...prev, ...response.data.data]);\n        }\n        setPagination(response.data.pagination);\n        return response.data;\n      }\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [customerId]);\n\n  const loadMore = useCallback(() => {\n    if (pagination.hasNext && !loading) {\n      fetchPayments({ page: pagination.page + 1 });\n    }\n  }, [pagination.hasNext, pagination.page, loading, fetchPayments]);\n\n  const exportHistory = useCallback(async (format = 'csv') => {\n    try {\n      const blob = await paymentApiService.exportPaymentHistory(format);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `payment-history.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (err) {\n      setError(err);\n    }\n  }, []);\n\n  const refreshHistory = useCallback(() => {\n    fetchPayments({ page: 1 });\n  }, [fetchPayments]);\n\n  useEffect(() => {\n    if (customerId) {\n      fetchPayments();\n    }\n  }, [customerId, fetchPayments]);\n\n  return {\n    payments,\n    loading,\n    error,\n    pagination,\n    loadMore,\n    exportHistory,\n    refreshHistory,\n    clearError: () => setError(null)\n  };\n};\n\n// Analytics hook for admin dashboard\nexport const useAnalytics = (dateRange) => {\n  const [analytics, setAnalytics] = useState(null);\n  const [customerAnalytics, setCustomerAnalytics] = useState(null);\n  const [revenueAnalytics, setRevenueAnalytics] = useState(null);\n  const [heartRevenue, setHeartRevenue] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchAnalytics = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const [paymentData, customerData, revenueData, heartData] = await Promise.all([\n        paymentApiService.getPaymentAnalytics(dateRange),\n        paymentApiService.getCustomerAnalytics(),\n        paymentApiService.getRevenueAnalytics(),\n        paymentApiService.getHeartRevenueShare()\n      ]);\n\n      if (paymentData.success) setAnalytics(paymentData.data);\n      if (customerData.success) setCustomerAnalytics(customerData.data);\n      if (revenueData.success) setRevenueAnalytics(revenueData.data);\n      if (heartData.success) setHeartRevenue(heartData.data);\n\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [dateRange]);\n\n  const refresh = useCallback(() => {\n    fetchAnalytics();\n  }, [fetchAnalytics]);\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [fetchAnalytics]);\n\n  return {\n    analytics,\n    customerAnalytics,\n    revenueAnalytics,\n    heartRevenue,\n    loading,\n    error,\n    refresh,\n    clearError: () => setError(null)\n  };\n};\n\n// Payment method management hook\nexport const usePaymentMethods = () => {\n  const [paymentMethods, setPaymentMethods] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchPaymentMethods = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.getPaymentMethods();\n      if (response.success) {\n        setPaymentMethods(response.data);\n      }\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const savePaymentMethod = useCallback(async (paymentMethodId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.savePaymentMethod(paymentMethodId);\n      if (response.success) {\n        await fetchPaymentMethods(); // Refresh list\n        return response.data;\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchPaymentMethods]);\n\n  const deletePaymentMethod = useCallback(async (paymentMethodId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await paymentApiService.deletePaymentMethod(paymentMethodId);\n      if (response.success) {\n        setPaymentMethods(prev => prev.filter(pm => pm.id !== paymentMethodId));\n        return response.data;\n      }\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchPaymentMethods();\n  }, [fetchPaymentMethods]);\n\n  return {\n    paymentMethods,\n    loading,\n    error,\n    savePaymentMethod,\n    deletePaymentMethod,\n    refreshPaymentMethods: fetchPaymentMethods,\n    clearError: () => setError(null)\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/ApplicationsPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/EmployerApplicationsPage.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container, Box, Typography } from '@mui/material';\nimport { Navigate } from 'react-router-dom';\nimport ApplicationsReview from '../components/employer/ApplicationsReview';\nimport { useAuth } from '../context/AuthContext';\n\nconst EmployerApplicationsPage = () => {\n  const { currentUser } = useAuth();\n\n  // Redirect to login if not authenticated\n  if (!currentUser) {\n    return <Navigate to=\"/login\" state={{ from: '/employer/applications' }} />;\n  }\n\n  // Redirect to dashboard if user is a job seeker\n  if (currentUser.role === 'JOBSEEKER') {\n    return <Navigate to=\"/dashboard\" />;\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 8, mb: 8 }}>\n      <Box sx={{ mb: 4 }}>\n        <ApplicationsReview />\n      </Box>\n    </Container>\n  );\n};\n\nexport default EmployerApplicationsPage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/EmployerPostJobPage.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":46,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'isAuthenticated' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":46,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":48,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":49,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":49,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":25}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Box, \n  Container, \n  Typography, \n  Paper, \n  Button, \n  styled\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\n// Styled components for Jamaican theme\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  position: 'relative',\n  zIndex: 2,\n  padding: theme.spacing(4),\n  [theme.breakpoints.up('md')]: {\n    maxWidth: '1100px'\n  }\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  position: 'relative',\n  overflow: 'hidden',\n  padding: theme.spacing(4),\n  marginBottom: theme.spacing(3),\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n    opacity: 0.2,\n    zIndex: 0\n  }\n}));\n\n// This component has been replaced with EmployerPostJobPageNew\nconst EmployerPostJobPage = () => {\n  const { user, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  return (\n    <Box sx={{ \n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #121212 0%, #2C2C2C 100%)',\n      py: 6,\n      position: 'relative'\n    }}>\n      <StyledContainer>\n        <StyledPaper>\n          <Typography variant=\"h6\" color=\"error\" sx={{ mb: 2 }}>\n            This component has been deprecated. Please use EmployerPostJobPageNew instead.\n          </Typography>\n          \n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\n            This component has been replaced with an improved version that includes a multi-step form with job preview and draft saving functionality.\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n            <Button\n              variant=\"outlined\"\n              onClick={() => navigate('/employer/dashboard')}\n              sx={{\n                borderColor: '#2C5530',\n                color: '#2C5530',\n                '&:hover': {\n                  borderColor: '#FFD700',\n                  color: '#FFD700',\n                  backgroundColor: 'rgba(44, 85, 48, 0.05)'\n                }\n              }}\n            >\n              Go to Dashboard\n            </Button>\n          </Box>\n        </StyledPaper>\n      </StyledContainer>\n    </Box>\n  );\n};\n\nexport default EmployerPostJobPage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/EmployerPostJobPageFixed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/EmployerPostJobPageNew.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":31,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":39},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":155,"column":31,"nodeType":"CallExpression","messageId":"unexpected","endLine":155,"endColumn":99}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Container, \n  Typography, \n  Paper, \n  Button, \n  TextField, \n  Grid, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem, \n  Alert,\n  CircularProgress,\n  styled,\n  Stepper,\n  Step,\n  StepLabel,\n  Divider,\n  Chip,\n  Card,\n  CardContent,\n  Tabs,\n  Tab\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport SaveIcon from '@mui/icons-material/Save';\nimport DescriptionIcon from '@mui/icons-material/Description';\nimport BuildIcon from '@mui/icons-material/Build';\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport { SkillsAutocomplete } from '../components/common/SkillsAutocomplete';\nimport { JamaicaLocationAutocomplete } from '../components/common/JamaicaLocationAutocomplete';\nimport { SalaryRangeAutocomplete } from '../components/common/SalaryRangeAutocomplete';\nimport JobDescriptionBuilder from '../components/employer/JobDescriptionBuilder';\nimport api from '../utils/axiosConfig';\n\n// Styled components for Jamaican theme\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  position: 'relative',\n  zIndex: 2,\n  padding: theme.spacing(4),\n  [theme.breakpoints.up('md')]: {\n    maxWidth: '1100px'\n  }\n}));\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  position: 'relative',\n  overflow: 'hidden',\n  padding: theme.spacing(4),\n  marginBottom: theme.spacing(3),\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n    opacity: 0.2,\n    zIndex: 0\n  }\n}));\n\n// Reusable form field styling\nconst formFieldStyle = {\n  '& .MuiOutlinedInput-root': {\n    backgroundColor: 'rgba(255, 255, 255, 0.08)',\n    '& fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.5)',\n      borderWidth: '2px'\n    },\n    '&:hover fieldset': {\n      borderColor: 'rgba(255, 215, 0, 0.8)'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#FFD700',\n      borderWidth: '2px'\n    }\n  },\n  '& .MuiInputLabel-root': {\n    color: '#FFD700',\n    fontWeight: 500\n  },\n  '& .MuiInputBase-input': {\n    color: 'white'\n  },\n  mb: 1\n};\n\nconst StyledTab = styled(Tab)(({ theme }) => ({\n  color: 'rgba(255, 255, 255, 0.7)',\n  '&.Mui-selected': {\n    color: '#FFD700'\n  },\n  transition: 'all 0.3s ease',\n  '&:hover': {\n    color: 'rgba(255, 215, 0, 0.9)',\n    backgroundColor: 'rgba(44, 85, 48, 0.1)'\n  }\n}));\n\nconst EmployerPostJobPage = () => {\n  const { user, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [savingDraft, setSavingDraft] = useState(false);\n  const [draftSaved, setDraftSaved] = useState(false);\n  const [descriptionTabValue, setDescriptionTabValue] = useState(0);\n  const [jobData, setJobData] = useState({\n    title: '',\n    description: '',\n    location: null,\n    type: 'FULL_TIME',\n    skills: [],\n    salary: { min: 30000, max: 100000 },\n    remote: false,\n    applicationDeadline: '',\n    applicationEmail: '',\n    applicationUrl: '',\n    applicationInstructions: '',\n    requirements: '',\n    benefits: ''\n  });\n\n  const jobTypes = ['FULL_TIME', 'PART_TIME', 'CONTRACT', 'INTERNSHIP', 'TEMPORARY'];\n  \n  // Define steps for the job posting process\n  const steps = ['Create Job Posting', 'Preview & Submit'];\n\n  useEffect(() => {\n    // If user is logged in but not an employer, redirect to appropriate page\n    if (isAuthenticated && user && user.role !== 'EMPLOYER') {\n      navigate('/dashboard');\n    }\n    \n    // If user is logged in as employer, pre-fill company info and check for drafts\n    if (isAuthenticated && user && user.role === 'EMPLOYER') {\n      // Check for saved drafts\n      const checkForDrafts = async () => {\n        try {\n          const response = await axios.get('/api/employer/job-drafts');\n          if (response.data && response.data.length > 0) {\n            // Ask if they want to load the most recent draft\n            const loadDraft = window.confirm('You have a saved draft. Would you like to load it?');\n            if (loadDraft) {\n              setJobData(response.data[0]);\n            }\n          }\n        } catch (err) {\n          console.error('Error checking for drafts:', err);\n          // Don't show error for this\n        }\n      };\n      \n      checkForDrafts();\n    }\n  }, [isAuthenticated, user, navigate]);\n\n  const handleInputChange = (field, value) => {\n    setJobData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleDescriptionTabChange = (event, newValue) => {\n    setDescriptionTabValue(newValue);\n  };\n\n  const handleDescriptionBuilderSave = (builderData) => {\n    setJobData(prev => ({\n      ...prev,\n      description: builderData.formattedDescription,\n      requirements: builderData.requirements,\n      benefits: builderData.benefits\n    }));\n    setDescriptionTabValue(0);\n  };\n\n  // Handle next step\n  const handleNext = () => {\n    // Validate current step\n    if (activeStep === 0) {\n      // Basic validation for required fields\n      if (!jobData.title) {\n        setError('Job title is required');\n        return;\n      }\n      if (!jobData.description) {\n        setError('Job description is required');\n        return;\n      }\n      if (!jobData.location) {\n        setError('Job location is required');\n        return;\n      }\n    }\n    \n    setActiveStep((prevStep) => prevStep + 1);\n    setError('');\n  };\n  \n  // Handle back step\n  const handleBack = () => {\n    setActiveStep((prevStep) => prevStep - 1);\n    setError('');\n  };\n\n  // Save job posting as draft\n  const saveDraft = async () => {\n    if (!isAuthenticated) {\n      // Store job data in session storage for after login\n      sessionStorage.setItem('pendingJobPost', JSON.stringify(jobData));\n      navigate('/login', { state: { from: '/employer/post-job', message: 'Please log in as an employer to save a draft' } });\n      return;\n    }\n    \n    setSavingDraft(true);\n    try {\n      // Format data for API\n      const formattedJobData = {\n        ...jobData,\n        location: jobData.location ? jobData.location.name : '',\n        placeId: jobData.location ? jobData.location.placeId : '',\n        requirements: jobData.requirements || '',\n        benefits: jobData.benefits || '',\n        isDraft: true\n      };\n      \n      await axios.post('/api/employer/job-drafts', formattedJobData);\n      setDraftSaved(true);\n      \n      // Show draft saved message briefly\n      setTimeout(() => {\n        setDraftSaved(false);\n      }, 3000);\n    } catch (err) {\n      console.error('Draft saving error:', err);\n      setError(err.response?.data?.message || 'Failed to save draft. Please try again.');\n    } finally {\n      setSavingDraft(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    if (e) e.preventDefault();\n    setLoading(true);\n    setError('');\n    \n    try {\n      if (!isAuthenticated) {\n        // Store job data in session storage for after login\n        sessionStorage.setItem('pendingJobPost', JSON.stringify(jobData));\n        navigate('/login', { state: { from: '/employer/post-job', message: 'Please log in as an employer to post a job' } });\n        return;\n      }\n      \n      // Format data for API\n      const formattedJobData = {\n        ...jobData\n      };\n      \n      // Use the configured api instance that includes authentication headers\n      await api.post('/api/employer/jobs', formattedJobData);\n      setSuccess(true);\n      \n      // Clear form after successful submission\n      setJobData({\n        title: '',\n        description: '',\n        location: null,\n        type: 'FULL_TIME',\n        skills: [],\n        salary: { min: 30000, max: 100000 },\n        remote: false,\n        applicationDeadline: '',\n        applicationEmail: '',\n        applicationUrl: '',\n        applicationInstructions: '',\n        requirements: '',\n        benefits: ''\n      });\n      \n      // Reset step\n      setActiveStep(0);\n    } catch (err) {\n      console.error('Job posting error:', err);\n      setError(err.response?.data?.message || 'Failed to post job. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Render job preview\n  const renderJobPreview = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600, color: '#FFD700' }}>\n        Job Posting Preview\n      </Typography>\n      \n      <Box sx={{ bgcolor: 'rgba(255, 255, 255, 0.05)', p: 3, borderRadius: 2, mb: 3 }}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, color: '#FFD700' }}>{jobData.title}</Typography>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Location</Typography>\n            <Typography variant=\"body1\">\n              {jobData.location ? jobData.location.name : 'Not specified'}\n              {jobData.remote && ' (Remote available)'}\n            </Typography>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Job Type</Typography>\n            <Typography variant=\"body1\">\n              {jobData.type.replace('_', ' ')}\n            </Typography>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Job Description</Typography>\n            <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line', mb: 3 }}>\n              {jobData.description}\n            </Typography>\n\n            {jobData.requirements && (\n              <>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\">Requirements</Typography>\n                <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line', mb: 3 }}>\n                  {jobData.requirements}\n                </Typography>\n              </>\n            )}\n\n            {jobData.benefits && (\n              <>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\">Benefits</Typography>\n                <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line', mb: 3 }}>\n                  {jobData.benefits}\n                </Typography>\n              </>\n            )}\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Salary Range</Typography>\n            <Typography variant=\"body1\">\n              ${jobData.salary.min.toLocaleString()} - ${jobData.salary.max.toLocaleString()} per year\n            </Typography>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Application Deadline</Typography>\n            <Typography variant=\"body1\">\n              {jobData.applicationDeadline ? new Date(jobData.applicationDeadline).toLocaleDateString() : 'Not specified'}\n            </Typography>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Required Skills</Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\n              {jobData.skills.length > 0 ? (\n                jobData.skills.map((skill, index) => (\n                  <Chip \n                    key={index} \n                    label={skill.name || skill} \n                    variant=\"outlined\"\n                    sx={{ \n                      borderColor: 'rgba(255, 215, 0, 0.5)',\n                      color: '#FFD700'\n                    }}\n                  />\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">No specific skills listed</Typography>\n              )}\n            </Box>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">Job Description</Typography>\n            <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'rgba(255, 255, 255, 0.02)' }}>\n              <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-line' }}>\n                {jobData.description}\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\">How to Apply</Typography>\n            <Card variant=\"outlined\" sx={{ bgcolor: 'rgba(44, 85, 48, 0.2)', borderColor: 'rgba(255, 215, 0, 0.3)' }}>\n              <CardContent>\n                {jobData.applicationEmail && (\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    <strong>Email:</strong> {jobData.applicationEmail}\n                  </Typography>\n                )}\n                \n                {jobData.applicationUrl && (\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    <strong>Application URL:</strong> {jobData.applicationUrl}\n                  </Typography>\n                )}\n                \n                {jobData.applicationInstructions && (\n                  <>\n                    <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                      <strong>Instructions:</strong>\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-line' }}>\n                      {jobData.applicationInstructions}\n                    </Typography>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  return (\n    <Box sx={{ \n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #121212 0%, #2C2C2C 100%)',\n      py: 6,\n      position: 'relative'\n    }}>\n      <StyledContainer>\n        {success ? (\n          <Alert \n            severity=\"success\" \n            sx={{ \n              mb: 4, \n              py: 2,\n              backgroundColor: 'rgba(44, 85, 48, 0.2)',\n              color: '#FFD700',\n              border: '1px solid rgba(255, 215, 0, 0.3)',\n              '& .MuiAlert-icon': {\n                color: '#FFD700'\n              }\n            }}\n          >\n            <Typography variant=\"h6\" gutterBottom>Job Posted Successfully!</Typography>\n            <Typography paragraph>Your job has been posted and is now live on JamDung Jobs.</Typography>\n            <Box sx={{ mt: 2, display: 'flex', gap: 2 }}>\n              <Button \n                variant=\"contained\"\n                onClick={() => navigate('/employer/dashboard')}\n                sx={{\n                  background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                  color: '#000',\n                  '&:hover': {\n                    background: 'linear-gradient(90deg, #FFD700, #2C5530)'\n                  }\n                }}\n              >\n                Go to Dashboard\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  setSuccess(false);\n                }}\n                sx={{\n                  borderColor: '#FFD700',\n                  color: '#FFD700',\n                  '&:hover': {\n                    borderColor: '#2C5530',\n                    backgroundColor: 'rgba(44, 85, 48, 0.1)'\n                  }\n                }}\n              >\n                Post Another Job\n              </Button>\n            </Box>\n          </Alert>\n        ) : (\n          <StyledPaper>\n            <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n              {steps.map((label) => (\n                <Step key={label}>\n                  <StepLabel>{label}</StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n            \n            <Box component=\"form\" onSubmit={(e) => { e.preventDefault(); activeStep === steps.length - 1 ? handleSubmit() : handleNext(); }}>\n              <Typography \n                variant=\"h4\" \n                gutterBottom\n                sx={{ \n                  fontWeight: 700, \n                  color: '#FFD700',\n                  mb: 3,\n                  position: 'relative',\n                  '&::after': {\n                    content: '\"\"',\n                    position: 'absolute',\n                    bottom: '-10px',\n                    left: 0,\n                    width: '80px',\n                    height: '4px',\n                    background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                    borderRadius: '2px'\n                  }\n                }}\n              >\n                {activeStep === 0 ? 'Post a New Job' : 'Review Your Job Posting'}\n              </Typography>\n              \n              {error && (\n                <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\n              )}\n              \n              {draftSaved && (\n                <Alert severity=\"success\" sx={{ mb: 3 }}>Draft saved successfully!</Alert>\n              )}\n              \n              {activeStep === 0 ? (\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom sx={{ color: '#FFD700' }}>\n                      Job Details\n                    </Typography>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Job Title\"\n                      value={jobData.title}\n                      onChange={(e) => handleInputChange('title', e.target.value)}\n                      required\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Box sx={{ \n                      borderBottom: 1, \n                      borderColor: 'rgba(255, 215, 0, 0.3)', \n                      mb: 2,\n                      borderRadius: '4px 4px 0 0',\n                      background: 'linear-gradient(90deg, rgba(44, 85, 48, 0.1) 0%, rgba(255, 215, 0, 0.1) 100%)'\n                    }}>\n                      <Tabs \n                        value={descriptionTabValue} \n                        onChange={handleDescriptionTabChange}\n                        variant=\"scrollable\"\n                        scrollButtons=\"auto\"\n                        sx={{\n                          '& .MuiTabs-indicator': {\n                            backgroundColor: '#FFD700',\n                            height: '3px',\n                            borderRadius: '3px 3px 0 0'\n                          }\n                        }}\n                      >\n                        <StyledTab label=\"Manual Input\" />\n                        <StyledTab label=\"Description Builder\" icon={<BuildIcon />} iconPosition=\"start\" />\n                      </Tabs>\n                    </Box>\n                    \n                    {descriptionTabValue === 0 ? (\n                      <Box>\n                        <TextField\n                          fullWidth\n                          label=\"Job Description\"\n                          value={jobData.description}\n                          onChange={(e) => handleInputChange('description', e.target.value)}\n                          multiline\n                          rows={6}\n                          required\n                          sx={formFieldStyle}\n                        />\n                        <Box sx={{ mt: 2 }}>\n                          <TextField\n                            fullWidth\n                            label=\"Requirements\"\n                            value={jobData.requirements}\n                            onChange={(e) => handleInputChange('requirements', e.target.value)}\n                            multiline\n                            rows={4}\n                            sx={formFieldStyle}\n                          />\n                        </Box>\n                        <Box sx={{ mt: 2 }}>\n                          <TextField\n                            fullWidth\n                            label=\"Benefits\"\n                            value={jobData.benefits}\n                            onChange={(e) => handleInputChange('benefits', e.target.value)}\n                            multiline\n                            rows={4}\n                            sx={formFieldStyle}\n                          />\n                        </Box>\n                      </Box>\n                    ) : (\n                      <JobDescriptionBuilder \n                        initialData={jobData}\n                        onSave={handleDescriptionBuilderSave}\n                      />\n                    )}\n                  </Grid>\n\n                  <Grid item xs={12} md={6}>\n                    <JamaicaLocationAutocomplete\n                      value={jobData.location}\n                      onChange={(locationData) => handleInputChange('location', locationData)}\n                      placeholder=\"Job Location in Jamaica\"\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth sx={formFieldStyle}>\n                      <InputLabel sx={{ color: '#FFD700', fontWeight: 500 }}>Job Type</InputLabel>\n                      <Select\n                        value={jobData.type}\n                        onChange={(e) => handleInputChange('type', e.target.value)}\n                        label=\"Job Type\"\n                        required\n                        sx={{\n                          color: 'white',\n                          backgroundColor: 'rgba(255, 255, 255, 0.08)',\n                          '& .MuiSelect-icon': {\n                            color: '#FFD700'\n                          }\n                        }}\n                      >\n                        {jobTypes.map(type => (\n                          <MenuItem key={type} value={type}>\n                            {type.replace('_', ' ')}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <SkillsAutocomplete\n                      value={jobData.skills}\n                      onChange={(value) => handleInputChange('skills', value)}\n                      label=\"Required Skills\"\n                      placeholder=\"Add skills required for this job\"\n                      helperText=\"Add skills to help candidates find your job\"\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Typography gutterBottom sx={{ color: '#FFD700', fontWeight: 500 }}>Salary Range</Typography>\n                    <SalaryRangeAutocomplete\n                      value={jobData.salary}\n                      onChange={(value) => handleInputChange('salary', value)}\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom sx={{ color: '#FFD700', mt: 2 }}>\n                      Application Details\n                    </Typography>\n                  </Grid>\n\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Application Deadline\"\n                      type=\"date\"\n                      value={jobData.applicationDeadline}\n                      onChange={(e) => handleInputChange('applicationDeadline', e.target.value)}\n                      InputLabelProps={{ shrink: true }}\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Application Email\"\n                      type=\"email\"\n                      value={jobData.applicationEmail}\n                      onChange={(e) => handleInputChange('applicationEmail', e.target.value)}\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Application URL (Optional)\"\n                      value={jobData.applicationUrl}\n                      onChange={(e) => handleInputChange('applicationUrl', e.target.value)}\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Application Instructions (Optional)\"\n                      value={jobData.applicationInstructions}\n                      onChange={(e) => handleInputChange('applicationInstructions', e.target.value)}\n                      multiline\n                      rows={3}\n                      sx={formFieldStyle}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Divider sx={{ my: 2 }} />\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                      <Button\n                        variant=\"outlined\"\n                        onClick={saveDraft}\n                        disabled={savingDraft}\n                        startIcon={<SaveIcon />}\n                        sx={{\n                          borderColor: '#2C5530',\n                          color: '#2C5530',\n                          '&:hover': {\n                            borderColor: '#FFD700',\n                            color: '#FFD700',\n                            backgroundColor: 'rgba(44, 85, 48, 0.05)'\n                          }\n                        }}\n                      >\n                        {savingDraft ? 'Saving...' : 'Save Draft'}\n                      </Button>\n                      \n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        endIcon={<ArrowForwardIcon />}\n                        sx={{\n                          py: 1.5,\n                          px: 4,\n                          background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                          color: '#000',\n                          fontWeight: 600,\n                          '&:hover': {\n                            background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                            transform: 'translateY(-2px)',\n                            boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                          },\n                          transition: 'all 0.3s ease'\n                        }}\n                      >\n                        Continue to Preview\n                      </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              ) : (\n                <>\n                  {renderJobPreview()}\n                  \n                  <Divider sx={{ my: 3 }} />\n                  <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={handleBack}\n                      startIcon={<ArrowBackIcon />}\n                      sx={{\n                        borderColor: '#2C5530',\n                        color: '#2C5530',\n                        '&:hover': {\n                          borderColor: '#FFD700',\n                          color: '#FFD700',\n                          backgroundColor: 'rgba(44, 85, 48, 0.05)'\n                        }\n                      }}\n                    >\n                      Back to Edit\n                    </Button>\n                    \n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      disabled={loading}\n                      sx={{\n                        py: 1.5,\n                        px: 4,\n                        background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                        color: '#000',\n                        fontWeight: 600,\n                        '&:hover': {\n                          background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                          transform: 'translateY(-2px)',\n                          boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                        },\n                        transition: 'all 0.3s ease'\n                      }}\n                    >\n                      {loading ? (\n                        <>\n                          <CircularProgress size={24} sx={{ mr: 1, color: '#000' }} />\n                          Posting Job...\n                        </>\n                      ) : 'Publish Job'}\n                    </Button>\n                  </Box>\n                </>\n              )}\n            </Box>\n          </StyledPaper>\n        )}\n      </StyledContainer>\n    </Box>\n  );\n};\n\nexport default EmployerPostJobPage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/FeatureDemo.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_|^React$/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"import/order","severity":1,"message":"There should be no empty line between import groups","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":38},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":108,"column":5,"nodeType":"CallExpression","messageId":"unexpected","endLine":108,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'hasDeadline' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":176,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Container, \n  Typography, \n  Box, \n  Grid, \n  Card, \n  CardContent,\n  Button,\n  Divider,\n  Alert,\n  Chip\n} from '@mui/material';\nimport { styled } from '@mui/system';\n\n// Import our new components\nimport JobShareButton from '../components/common/JobShareButton';\nimport RecentlyViewedJobs, { trackJobView } from '../components/common/RecentlyViewedJobs';\nimport DeadlineWarning, { hasApproachingDeadline, getDeadlineUrgency } from '../components/common/DeadlineWarning';\n\n// Styled components for consistent theming\nconst StyledCard = styled(Card)(({ theme }) => ({\n  backgroundColor: 'rgba(20, 20, 20, 0.85)',\n  border: '1px solid rgba(255, 215, 0, 0.3)',\n  position: 'relative',\n  overflow: 'hidden',\n  marginBottom: theme.spacing(3),\n  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n  '&::before': {\n    content: '\"\"',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n    opacity: 0.2,\n    zIndex: 0\n  }\n}));\n\nconst FeatureDemo = () => {\n  const [sampleJobs] = useState([\n    {\n      id: '1',\n      title: 'Senior React Developer',\n      company: {\n        id: '1',\n        name: 'TechCorp Jamaica',\n        logoUrl: null\n      },\n      location: 'Kingston, Jamaica',\n      type: 'FULL_TIME',\n      salary: { min: 80000, max: 120000, currency: 'JMD' },\n      skills: ['React', 'JavaScript', 'Node.js'],\n      deadline: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days from now\n      description: 'We are looking for an experienced React developer to join our team.'\n    },\n    {\n      id: '2',\n      title: 'Digital Marketing Specialist',\n      company: {\n        id: '2',\n        name: 'Creative Solutions Ltd',\n        logoUrl: null\n      },\n      location: 'Montego Bay, Jamaica',\n      type: 'FULL_TIME',\n      salary: { min: 60000, max: 90000, currency: 'JMD' },\n      skills: ['Marketing', 'SEO', 'Social Media'],\n      deadline: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 1 day from now\n      description: 'Join our creative team and help brands grow their digital presence.'\n    },\n    {\n      id: '3',\n      title: 'DevOps Engineer',\n      company: {\n        id: '3',\n        name: 'CloudTech Jamaica',\n        logoUrl: null\n      },\n      location: 'Spanish Town, Jamaica',\n      type: 'CONTRACT',\n      salary: { min: 100000, max: 150000, currency: 'JMD' },\n      skills: ['AWS', 'Docker', 'Kubernetes'],\n      deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n      description: 'Help us build and maintain scalable cloud infrastructure.'\n    },\n    {\n      id: '4',\n      title: 'UX/UI Designer',\n      company: {\n        id: '4',\n        name: 'Design Studio JA',\n        logoUrl: null\n      },\n      location: 'Kingston, Jamaica',\n      type: 'PART_TIME',\n      salary: { min: 50000, max: 75000, currency: 'JMD' },\n      skills: ['Figma', 'Adobe XD', 'User Research'],\n      deadline: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // Expired (1 day ago)\n      description: 'Create amazing user experiences for our digital products.'\n    }\n  ]);\n\n  const handleTrackJobView = (job) => {\n    trackJobView(job);\n    alert(`Tracked view for: ${job.title}`);\n  };\n\n  const clearRecentViews = () => {\n    localStorage.removeItem('recentlyViewedJobs');\n    window.location.reload();\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        background: 'linear-gradient(135deg, #1a1a1a 0%, #2C5530 50%, #1a1a1a 100%)',\n        position: 'relative',\n        '&::before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          background: 'url(\"/jamaica-flag-bg.png\") center/cover',\n          opacity: 0.05,\n          zIndex: 0\n        }\n      }}\n    >\n      <Container maxWidth=\"lg\" sx={{ position: 'relative', zIndex: 1, py: 4 }}>\n        {/* Page Header */}\n        <Box textAlign=\"center\" mb={4}>\n          <Typography \n            variant=\"h3\" \n            component=\"h1\" \n            sx={{ \n              color: '#FFD700', \n              fontWeight: 'bold',\n              textShadow: '2px 2px 4px rgba(0,0,0,0.5)',\n              mb: 2\n            }}\n          >\n            JamDung Jobs - New Features Demo\n          </Typography>\n          <Typography \n            variant=\"h6\" \n            sx={{ \n              color: 'rgba(255, 255, 255, 0.8)',\n              mb: 2\n            }}\n          >\n            Showcasing Job Sharing, Recently Viewed Jobs, and Deadline Warnings\n          </Typography>\n          <Alert severity=\"info\" sx={{ mt: 2, backgroundColor: 'rgba(33, 150, 243, 0.1)' }}>\n            This demo page shows the new features. Click around to test functionality!\n          </Alert>\n        </Box>\n\n        <Grid container spacing={4}>\n          {/* Left Column - Job Listings with New Features */}\n          <Grid item xs={12} md={8}>\n            <Typography \n              variant=\"h5\" \n              sx={{ color: '#FFD700', mb: 3, fontWeight: 'bold' }}\n            >\n              Job Listings with New Features\n            </Typography>\n\n            {sampleJobs.map((job) => {\n              const urgency = getDeadlineUrgency(job);\n              const hasDeadline = hasApproachingDeadline(job);\n\n              return (\n                <StyledCard key={job.id}>\n                  <CardContent sx={{ position: 'relative', zIndex: 1 }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12} md={8}>\n                        <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 1 }}>\n                          {job.title}\n                        </Typography>\n                        <Typography sx={{ color: 'rgba(255, 255, 255, 0.7)', mb: 2 }}>\n                          {job.company.name} • {job.location}\n                        </Typography>\n                        <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.6)', mb: 2 }}>\n                          {job.description}\n                        </Typography>\n                        \n                        {/* Skills */}\n                        <Box sx={{ mb: 2 }}>\n                          {job.skills.map((skill) => (\n                            <Chip\n                              key={skill}\n                              label={skill}\n                              size=\"small\"\n                              sx={{\n                                mr: 0.5,\n                                mb: 0.5,\n                                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                                color: 'rgba(255, 255, 255, 0.7)'\n                              }}\n                            />\n                          ))}\n                        </Box>\n\n                        {/* Urgency Badge */}\n                        {urgency && (\n                          <Chip\n                            label={`Urgency: ${urgency.toUpperCase()}`}\n                            color={urgency === 'critical' ? 'error' : urgency === 'urgent' ? 'warning' : 'info'}\n                            size=\"small\"\n                            sx={{ mb: 2 }}\n                          />\n                        )}\n                      </Grid>\n\n                      <Grid item xs={12} md={4} sx={{ textAlign: 'right' }}>\n                        {/* Salary */}\n                        <Typography sx={{ color: '#FFD700', fontWeight: 'bold', mb: 1 }}>\n                          ${job.salary.min.toLocaleString()} - ${job.salary.max.toLocaleString()} {job.salary.currency}\n                        </Typography>\n                        \n                        {/* Job Type */}\n                        <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.6)', mb: 2 }}>\n                          {job.type.replace('_', ' ')}\n                        </Typography>\n                        \n                        {/* Deadline Warning - NEW FEATURE */}\n                        <Box sx={{ mb: 2 }}>\n                          <DeadlineWarning job={job} />\n                        </Box>\n                        \n                        {/* Job Share Button - NEW FEATURE */}\n                        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>\n                          <JobShareButton job={job} />\n                        </Box>\n                        \n                        {/* Action Buttons */}\n                        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                          <Button\n                            variant=\"outlined\"\n                            onClick={() => handleTrackJobView(job)}\n                            sx={{\n                              borderColor: '#FFD700',\n                              color: '#FFD700',\n                              '&:hover': {\n                                borderColor: '#2C5530',\n                                color: '#2C5530',\n                                backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                              }\n                            }}\n                          >\n                            View & Track\n                          </Button>\n                          \n                          <Button\n                            variant=\"contained\"\n                            disabled={urgency === 'expired'}\n                            sx={{\n                              backgroundColor: urgency === 'expired' ? 'rgba(244, 67, 54, 0.3)' : '#2C5530',\n                              '&:hover': {\n                                backgroundColor: urgency === 'expired' ? 'rgba(244, 67, 54, 0.3)' : '#1a3d21'\n                              }\n                            }}\n                          >\n                            {urgency === 'expired' ? 'Expired' : 'Apply Now'}\n                          </Button>\n                        </Box>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </StyledCard>\n              );\n            })}\n          </Grid>\n\n          {/* Right Column - Recently Viewed Jobs */}\n          <Grid item xs={12} md={4}>\n            <Typography \n              variant=\"h5\" \n              sx={{ color: '#FFD700', mb: 3, fontWeight: 'bold' }}\n            >\n              Recently Viewed Jobs\n            </Typography>\n            \n            {/* Recently Viewed Component - NEW FEATURE */}\n            <RecentlyViewedJobs limit={5} />\n            \n            {/* Demo Controls */}\n            <StyledCard sx={{ mt: 3 }}>\n              <CardContent sx={{ position: 'relative', zIndex: 1 }}>\n                <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                  Demo Controls\n                </Typography>\n                <Button\n                  variant=\"outlined\"\n                  onClick={clearRecentViews}\n                  fullWidth\n                  sx={{\n                    borderColor: '#FFD700',\n                    color: '#FFD700',\n                    '&:hover': {\n                      borderColor: '#2C5530',\n                      color: '#2C5530',\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)'\n                    }\n                  }}\n                >\n                  Clear Recent Views\n                </Button>\n              </CardContent>\n            </StyledCard>\n\n            {/* Feature Explanations */}\n            <StyledCard sx={{ mt: 3 }}>\n              <CardContent sx={{ position: 'relative', zIndex: 1 }}>\n                <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                  New Features\n                </Typography>\n                \n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#FFD700', fontWeight: 'bold' }}>\n                    🔗 Job Sharing\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                    Share jobs via WhatsApp, LinkedIn, Twitter, or copy link\n                  </Typography>\n                </Box>\n\n                <Divider sx={{ my: 2, borderColor: 'rgba(255, 215, 0, 0.3)' }} />\n\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#FFD700', fontWeight: 'bold' }}>\n                    👁️ Recently Viewed\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                    Track and display recently viewed jobs with timestamps\n                  </Typography>\n                </Box>\n\n                <Divider sx={{ my: 2, borderColor: 'rgba(255, 215, 0, 0.3)' }} />\n\n                <Box>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#FFD700', fontWeight: 'bold' }}>\n                    ⏰ Deadline Warnings\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                    Visual warnings for application deadlines with urgency levels\n                  </Typography>\n                </Box>\n              </CardContent>\n            </StyledCard>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default FeatureDemo;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/JobApplyPage.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchJobDetails'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [currentUser, jobId, navigate, location.state, fetchJobDetails]","fix":{"range":[1696,1742],"text":"[currentUser, jobId, navigate, location.state, fetchJobDetails]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used. Allowed unused vars must match /^_|^React$/u.","line":99,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Container' is not defined.","line":109,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":109,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Box' is not defined.","line":110,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":110,"endColumn":13},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CircularProgress' is not defined.","line":111,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":111,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Container' is not defined.","line":119,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":119,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Alert' is not defined.","line":120,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":120,"endColumn":15},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":121,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":121,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Container' is not defined.","line":139,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Alert' is not defined.","line":140,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":15},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Container' is not defined.","line":148,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":148,"endColumn":15},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":149,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":149,"endColumn":14}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport axios from 'axios';\nimport JobApplicationForm from '../components/jobseeker/JobApplicationForm';\nimport { buildApiUrl } from '../config';\nimport { useAuth } from '../context/AuthContext';\nimport { logDev, logError, sanitizeForLogging } from '../utils/loggingUtils';\n\nconst JobApplyPage = () => {\n  const { jobId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { currentUser } = useAuth();\n  \n  const [job, setJob] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    // Redirect to login if not authenticated\n    if (!currentUser) {\n      logDev('debug', 'Redirecting unauthenticated user to login', {\n        targetJobId: jobId,\n        page: 'JobApplyPage'\n      });\n      navigate('/login', { state: { from: `/jobs/${jobId}/apply` } });\n      return;\n    }\n\n    // Redirect to employer dashboard if user is an employer\n    if (currentUser.role === 'EMPLOYER') {\n      logDev('debug', 'Redirecting employer from job apply page', {\n        userId: sanitizeForLogging(currentUser.id),\n        userRole: currentUser.role,\n        targetJobId: jobId\n      });\n      navigate('/dashboard');\n      return;\n    }\n\n    // Log page access\n    logDev('debug', 'Job apply page accessed', {\n      jobId,\n      userId: sanitizeForLogging(currentUser.id),\n      referrer: location.state?.from || 'direct'\n    });\n\n    fetchJobDetails();\n  }, [currentUser, jobId, navigate, location.state]);\n\n  const fetchJobDetails = async () => {\n    try {\n      logDev('debug', 'Fetching job details', { \n        jobId, \n        userId: sanitizeForLogging(currentUser?.id)\n      });\n      \n      const response = await axios.get(buildApiUrl(`/jobs/${jobId}`));\n      setJob(response.data);\n      \n      logDev('debug', 'Job details fetched successfully', { \n        jobId, \n        jobTitle: response.data.title\n      });\n    } catch (err) {\n      const errorContext = {\n        module: 'JobApplyPage',\n        function: 'fetchJobDetails',\n        jobId,\n        userId: sanitizeForLogging(currentUser?.id),\n        status: err.response?.status,\n        statusText: err.response?.statusText\n      };\n      \n      logError('Error loading job details', err, errorContext);\n      setError('Failed to load job details. The job may no longer be available.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApplicationSuccess = (applicationData) => {\n    logDev('info', 'Job application submitted successfully', {\n      jobId,\n      jobTitle: job?.title,\n      userId: sanitizeForLogging(currentUser?.id),\n      applicationId: sanitizeForLogging(applicationData?.id)\n    });\n    \n    setSuccess(true);\n    // Redirect to applications page after a short delay\n    setTimeout(() => {\n      navigate('/applications');\n    }, 3000);\n  };\n\n  const handleCancel = () => {\n    logDev('debug', 'Job application cancelled', {\n      jobId,\n      userId: sanitizeForLogging(currentUser?.id)\n    });\n    navigate(`/jobs/${jobId}`);\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>\n          <CircularProgress sx={{ color: '#2C5530' }} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n        <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\n        <Button \n          startIcon={<ArrowBackIcon />} \n          onClick={() => navigate('/jobs')}\n          sx={{\n            color: '#2C5530',\n            '&:hover': {\n              backgroundColor: 'rgba(44, 85, 48, 0.05)'\n            }\n          }}\n        >\n          Back to Jobs\n        </Button>\n      </Container>\n    );\n  }\n\n  if (success) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          Your application has been submitted successfully! You will be redirected to your applications page.\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n      <Button \n        startIcon={<ArrowBackIcon />} \n        onClick={() => navigate(`/jobs/${jobId}`)}\n        sx={{\n          mb: 3,\n          color: '#2C5530',\n          '&:hover': {\n            backgroundColor: 'rgba(44, 85, 48, 0.05)'\n          }\n        }}\n      >\n        Back to Job Details\n      </Button>\n      \n      {job && (\n        <JobApplicationForm \n          jobId={job.id} \n          jobTitle={job.title} \n          onSuccess={handleApplicationSuccess}\n          onCancel={() => navigate(-1)}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default JobApplyPage;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/pages/JobDetailsPage.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchJobDetails'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [jobId, isAuthenticated, currentUser, location.state, fetchJobDetails]","fix":{"range":[1638,1691],"text":"[jobId, isAuthenticated, currentUser, location.state, fetchJobDetails]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { \n  Container, \n  Box, \n  Typography, \n  CircularProgress, \n  Alert, \n  Button, \n  Card, \n  CardContent, \n  Grid, \n  Chip, \n  Divider,\n  Paper\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport WorkIcon from '@mui/icons-material/Work';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport FlashOnIcon from '@mui/icons-material/FlashOn';\nimport { SalaryDisplay } from '../components/common/SalaryDisplay';\nimport api from '../utils/api';\nimport { useAuth } from '../context/AuthContext';\nimport { logDev, logError, sanitizeForLogging } from '../utils/loggingUtils';\nimport { formatDate } from '../utils/dateUtils';\n\nconst JobDetailsPage = () => {\n  const { jobId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { isAuthenticated, currentUser } = useAuth();\n  \n  const [job, setJob] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Log page access\n    logDev('debug', 'Job details page accessed', {\n      jobId,\n      userId: isAuthenticated ? sanitizeForLogging(currentUser?.id) : 'guest',\n      userRole: currentUser?.role || 'guest',\n      referrer: location.state?.from || 'direct'\n    });\n\n    fetchJobDetails();\n  }, [jobId, isAuthenticated, currentUser, location.state]);\n\n  const fetchJobDetails = async () => {\n    try {\n      logDev('debug', 'Fetching job details', { \n        jobId, \n        userId: isAuthenticated ? sanitizeForLogging(currentUser?.id) : 'guest'\n      });\n      \n      const response = await api.get(`/api/jobs/${jobId}`);\n      setJob(response.data);\n      \n      logDev('debug', 'Job details fetched successfully', { \n        jobId, \n        jobTitle: response.data.title\n      });\n    } catch (err) {\n      const errorContext = {\n        module: 'JobDetailsPage',\n        function: 'fetchJobDetails',\n        jobId,\n        userId: isAuthenticated ? sanitizeForLogging(currentUser?.id) : 'guest',\n        status: err.response?.status,\n        statusText: err.response?.statusText\n      };\n      \n      logError('Error loading job details', err, errorContext);\n      setError('Failed to load job details. The job may no longer be available.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApply = () => {\n    if (!isAuthenticated) {\n      // Redirect to login with return URL\n      navigate('/login', { state: { from: `/jobs/${jobId}/apply` } });\n      return;\n    }\n    \n    // Safely check if the user is an employer\n    if (currentUser?.role === 'EMPLOYER') {\n      // Show an error message for employers\n      setError('Employers cannot apply for jobs. Please login as a job seeker.');\n      return;\n    }\n    \n    // Navigate to the application page\n    navigate(`/jobs/${jobId}/apply`);\n  };\n\n  const handleBackToJobs = () => {\n    navigate('/jobs');\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>\n          <CircularProgress sx={{ color: '#2C5530' }} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8 }}>\n        <Alert severity=\"error\" sx={{ mb: 3 }}>{error}</Alert>\n        <Button \n          startIcon={<ArrowBackIcon />} \n          onClick={handleBackToJobs}\n          sx={{\n            color: '#2C5530',\n            '&:hover': {\n              backgroundColor: 'rgba(44, 85, 48, 0.05)'\n            }\n          }}\n        >\n          Back to Jobs\n        </Button>\n      </Container>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#0A0A0A',\n        position: 'relative',\n        overflow: 'hidden'\n      }}\n    >\n      {/* Background image with Jamaican styling */}\n      <Box\n        sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh',\n          backgroundImage: 'url(\"/images/generated/jamaican-design-1747273968.png\")',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          opacity: 0.3,\n          zIndex: 1\n        }}\n      />\n      \n      <Container maxWidth=\"md\" sx={{ mt: 8, mb: 8, position: 'relative', zIndex: 2 }}>\n        <Button \n          startIcon={<ArrowBackIcon />} \n          onClick={handleBackToJobs}\n          sx={{\n            mb: 3,\n            color: '#FFD700',\n            borderColor: '#FFD700',\n            border: '1px solid',\n            '&:hover': {\n              backgroundColor: 'rgba(255, 215, 0, 0.1)',\n              borderColor: '#FFD700'\n            }\n          }}\n        >\n          Back to Jobs\n        </Button>\n        \n        {job && (\n          <Paper\n            elevation={3}\n            sx={{\n              p: 4,\n              backgroundColor: 'rgba(20, 20, 20, 0.85)',\n              border: '1px solid rgba(255, 215, 0, 0.3)',\n              borderRadius: 2,\n              backdropFilter: 'blur(10px)',\n              position: 'relative',\n              overflow: 'hidden',\n              boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)'\n            }}\n          >\n            {/* Card background gradient */}\n            <Box\n              sx={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                background: 'linear-gradient(135deg, rgba(44, 85, 48, 0.2) 0%, rgba(255, 215, 0, 0.2) 100%)',\n                opacity: 0.3,\n                zIndex: 0\n              }}\n            />\n            \n            <Box sx={{ position: 'relative', zIndex: 1 }}>\n              <Typography variant=\"h4\" component=\"h1\" sx={{ \n                color: '#FFD700',\n                fontWeight: 600,\n                mb: 1\n              }}>\n                {job.title}\n              </Typography>\n              \n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n                <Typography variant=\"h6\" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>\n                  {job.company.name}\n                </Typography>\n                <Box sx={{ ml: 2 }}>\n                  <Chip \n                    label={job.type.replace('_', ' ')} \n                    size=\"small\"\n                    sx={{\n                      backgroundColor: 'rgba(44, 85, 48, 0.6)',\n                      color: '#FFD700',\n                      fontWeight: 'bold'\n                    }}\n                  />\n                </Box>\n              </Box>\n              \n              <Grid container spacing={3}>\n                <Grid item xs={12} md={8}>\n                  <Box sx={{ mb: 3 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <LocationOnIcon sx={{ color: '#FFD700', mr: 1 }} />\n                      <Typography sx={{ color: 'white' }}>\n                        {job.location}\n                      </Typography>\n                    </Box>\n                    \n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <CalendarTodayIcon sx={{ color: '#FFD700', mr: 1 }} />\n                      <Typography sx={{ color: 'white' }}>\n                        Posted {formatDate(job.postedDate)}\n                      </Typography>\n                    </Box>\n                    \n                    {job.remote && (\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                        <WorkIcon sx={{ color: '#FFD700', mr: 1 }} />\n                        <Typography sx={{ color: 'white' }}>\n                          Remote Work Available\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                  \n                  <Divider sx={{ backgroundColor: 'rgba(255, 215, 0, 0.3)', mb: 3 }} />\n                  \n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                    Job Description\n                  </Typography>\n                  \n                  <Typography sx={{ color: 'white', mb: 3, whiteSpace: 'pre-line' }}>\n                    {job.description}\n                  </Typography>\n                  \n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                    Requirements\n                  </Typography>\n                  \n                  <Typography sx={{ color: 'white', mb: 3, whiteSpace: 'pre-line' }}>\n                    {job.requirements}\n                  </Typography>\n                  \n                  <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                    Required Skills\n                  </Typography>\n                  \n                  <Box sx={{ mb: 3 }}>\n                    {job.skills.map(skill => (\n                      <Chip\n                        key={skill}\n                        label={skill}\n                        sx={{\n                          mr: 1,\n                          mb: 1,\n                          backgroundColor: 'rgba(44, 85, 48, 0.6)',\n                          color: '#FFD700'\n                        }}\n                      />\n                    ))}\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={12} md={4}>\n                  <Card sx={{ \n                    backgroundColor: 'rgba(44, 85, 48, 0.3)',\n                    border: '1px solid rgba(255, 215, 0, 0.5)',\n                    mb: 3\n                  }}>\n                    <CardContent>\n                      <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                        Job Details\n                      </Typography>\n                      \n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                        <MonetizationOnIcon sx={{ color: '#FFD700', mr: 1 }} />\n                        <Typography sx={{ color: 'white' }}>\n                          <SalaryDisplay salary={job.salary} />\n                        </Typography>\n                      </Box>\n                      \n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                        <AccessTimeIcon sx={{ color: '#FFD700', mr: 1 }} />\n                        <Typography sx={{ color: 'white' }}>\n                          {job.type.replace('_', ' ')}\n                        </Typography>\n                      </Box>\n                      \n                      <Box sx={{ mt: 3 }}>\n                        <Button\n                          variant=\"contained\"\n                          fullWidth\n                          startIcon={<FlashOnIcon />}\n                          onClick={handleApply}\n                          sx={{\n                            py: 1.5,\n                            background: 'linear-gradient(90deg, #2C5530, #FFD700)',\n                            color: '#000',\n                            fontWeight: 600,\n                            fontSize: '1.1rem',\n                            '&:hover': {\n                              background: 'linear-gradient(90deg, #FFD700, #2C5530)',\n                              transform: 'translateY(-2px)',\n                              boxShadow: '0 4px 12px rgba(255, 215, 0, 0.3)'\n                            },\n                            transition: 'all 0.3s ease'\n                          }}\n                        >\n                          {isAuthenticated \n                            ? (currentUser?.role === 'EMPLOYER' ? 'Employers Cannot Apply' : 'Apply Now') \n                            : 'Sign In to Apply'}\n                        </Button>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card sx={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                    border: '1px solid rgba(255, 215, 0, 0.3)'\n                  }}>\n                    <CardContent>\n                      <Typography variant=\"h6\" sx={{ color: '#FFD700', mb: 2 }}>\n                        About {job.company.name}\n                      </Typography>\n                      \n                      <Typography sx={{ color: 'white', mb: 2 }}>\n                        {job.company.description || 'Company information not available.'}\n                      </Typography>\n                      \n                      {job.company.website && (\n                        <Button\n                          variant=\"outlined\"\n                          fullWidth\n                          href={job.company.website}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          sx={{\n                            mt: 2,\n                            borderColor: '#FFD700',\n                            color: '#FFD700',\n                            '&:hover': {\n                              backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                              borderColor: '#FFD700'\n                            }\n                          }}\n                        >\n                          Visit Company Website\n                        </Button>\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          </Paper>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default JobDetailsPage;\n\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/services/paymentApi.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/styles/theme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/theme/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/theme/mobileTheme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/theme/simpleMobileTheme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/theme/themeConfig.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/axiosConfig.js","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\..","line":29,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":29,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1069,1070],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1069,1069],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { logDev, logError, sanitizeForLogging } from './loggingUtils';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000'\n});\n\n// Constants for localStorage keys (must match the ones in AuthContext.js)\nconst TOKEN_KEY = 'jamdung_auth_token';\n\n// Add a request interceptor to automatically add the JWT token to all requests\napi.interceptors.request.use(\n  (config) => {\n    // Get token from the correct localStorage key\n    let token = localStorage.getItem(TOKEN_KEY);\n    \n    if (token) {\n      // Sanitize the token - remove any quotes, whitespace or malformed characters\n      token = token.trim();\n      if (token.startsWith('\"') && token.endsWith('\"')) {\n        token = token.slice(1, -1);\n      }\n      \n      // Log token format for debugging (excluding actual token value)\n      logDev('debug', 'Token format check', { \n        length: token.length,\n        hasBearer: token.startsWith('Bearer '),\n        hasMalformedChars: /[^\\w\\d\\.\\-_]/g.test(token.replace('Bearer ', ''))\n      });\n      \n      // Make sure token is properly formatted with Bearer prefix\n      let finalToken;\n      if (token.startsWith('Bearer ')) {\n        // If token already has 'Bearer ' prefix, use as is\n        finalToken = token;\n      } else {\n        // Otherwise add the Bearer prefix\n        finalToken = `Bearer ${token}`;\n      }\n      \n      // Set the Authorization header\n      config.headers.Authorization = finalToken;\n      logDev('debug', `Setting Authorization header for ${config.url}`, { \n        headerSet: true, \n        headerLength: finalToken.length\n      });\n      \n      // Also set token in the regular 'token' key for backward compatibility\n      if (!localStorage.getItem('token')) {\n        localStorage.setItem('token', token);\n      }\n    } else {\n      // Try fallback to the old token key as a temporary measure\n      const legacyToken = localStorage.getItem('token');\n      if (legacyToken) {\n        // Sanitize the legacy token too\n        const sanitizedLegacyToken = legacyToken.trim();\n        const finalLegacyToken = sanitizedLegacyToken.startsWith('Bearer ') \n          ? sanitizedLegacyToken \n          : `Bearer ${sanitizedLegacyToken}`;\n          \n        config.headers.Authorization = finalLegacyToken;\n        // Migrate the token to the correct key\n        localStorage.setItem(TOKEN_KEY, sanitizedLegacyToken);\n        \n        logDev('debug', 'Using legacy token', {\n          tokenMigrated: true,\n          headerSet: true\n        });\n      } else {\n        // Only log auth issues for protected endpoints, not for public routes\n        if (!config.url.includes('/auth/') && !config.url.includes('/public/')) {\n          logDev('warn', 'No token found for request to:', config.url);\n        }\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    // Always log request errors in all environments\n    logError('Request interceptor error', error, {\n      module: 'axiosConfig',\n      interceptor: 'request'\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to safely parse JSON\nconst safeJSONParse = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      logError('JSON parse error', { error: e, data: data.substring(0, 100) });\n      return {};\n    }\n  }\n  return data || {};\n};\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    if (!response) {\n      logDev('warn', 'Received null/undefined response');\n      return { data: {} };\n    }\n\n    try {\n      // Ensure response.data exists and is properly parsed\n      if (response.data === undefined || response.data === null) {\n        logDev('warn', 'Received undefined/null response data', {\n          url: response.config?.url,\n          method: response.config?.method\n        });\n        response.data = {};\n      } else {\n        // Parse the response data if it's a string\n        response.data = safeJSONParse(response.data);\n      }\n\n      // Ensure the data is an object or array\n      if (typeof response.data !== 'object') {\n        logDev('warn', 'Response data is not an object/array', {\n          type: typeof response.data,\n          url: response.config?.url\n        });\n        response.data = { value: response.data };\n      }\n\n      return response;\n    } catch (error) {\n      logError('Response transformation error', {\n        error,\n        url: response.config?.url,\n        method: response.config?.method\n      });\n      return { data: {} };\n    }\n  },\n  (error) => {\n    // Ensure error.response exists\n    if (!error.response) {\n      error.response = {\n        status: 500,\n        data: { message: 'Network error or server timeout' }\n      };\n    }\n\n    // Ensure error.response.data exists and is an object\n    if (!error.response.data || typeof error.response.data !== 'object') {\n      error.response.data = {\n        message: typeof error.response.data === 'string' \n          ? error.response.data \n          : 'Unknown error occurred'\n      };\n    }\n\n    // Log the error but don't automatically log out the user\n    // This allows components to handle auth errors themselves\n    logError('API request failed', {\n      error: sanitizeForLogging(error),\n      status: error.response?.status,\n      url: error.config?.url,\n      method: error.config?.method,\n      module: 'axiosConfig',\n      interceptor: 'response',\n      data: sanitizeForLogging(error.response?.data)\n    });\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/currencyUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/dateUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/logger.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[738,792],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Simple development logger utility\n * Provides consistent logging across the application\n */\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n/**\n * Log development messages\n * @param {string} level - Log level (info, warn, error, debug)\n * @param {string} message - Log message\n * @param {Object} data - Additional data to log\n */\nexport const logDev = (level = 'info', message = '', data = {}) => {\n  if (!isDevelopment) return;\n\n  const timestamp = new Date().toISOString();\n\n  switch (level.toLowerCase()) {\n    case 'error':\n      console.error(`[${timestamp}] ERROR:`, message, data);\n      break;\n    case 'warn':\n      console.warn(`[${timestamp}] WARN:`, message, data);\n      break;\n    case 'debug':\n      console.debug(`[${timestamp}] DEBUG:`, message, data);\n      break;\n    case 'info':\n    default:\n      console.warn(`[${timestamp}] INFO:`, message, data);\n      break;\n  }\n};\n\n/**\n * Log API requests\n * @param {string} method - HTTP method\n * @param {string} url - Request URL\n * @param {Object} data - Request/response data\n */\nexport const logApi = (method, url, data = {}) => {\n  logDev('debug', `API ${method.toUpperCase()} ${url}`, data);\n};\n\n/**\n * Log user actions\n * @param {string} action - User action\n * @param {Object} data - Action data\n */\nexport const logUserAction = (action, data = {}) => {\n  logDev('info', `User Action: ${action}`, data);\n};\n\n/**\n * Log errors with stack trace\n * @param {Error} error - Error object\n * @param {string} context - Error context\n */\nexport const logError = (error, context = '') => {\n  logDev('error', `${context}: ${error.message}`, {\n    stack: error.stack,\n    name: error.name\n  });\n};\n\nconst logger = {\n  logDev,\n  logApi,\n  logUserAction,\n  logError\n};\n\nexport default logger;\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/loggingUtils.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":null},"fix":{"range":[447,471],"text":""},"desc":"Remove the console.null()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Logging utilities for JamDung Jobs application\n * \n * This file contains utility functions for consistent logging\n * that respect the current environment (development vs production)\n */\n\n/**\n * Log messages only in development environment\n * @param {string} level - Log level (debug, info, warn, error)\n * @param {*} args - Arguments to log\n */\nexport const logDev = (level, ...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console[level](...args);\n  }\n};\n\n/**\n * Log errors in all environments, but with better formatting\n * @param {string} message - Error message\n * @param {Error|Object} error - Error object or details\n * @param {Object} context - Additional context\n */\nexport const logError = (message, error, context = {}) => {\n  // Always log errors in all environments, but with controlled detail\n  if (error instanceof Error) {\n    console.error(`${message}: ${error.message}`, { \n      ...context,\n      // Only include stack trace in development\n      ...(process.env.NODE_ENV !== 'production' ? { stack: error.stack } : {})\n    });\n  } else {\n    console.error(message, error, context);\n  }\n};\n\n/**\n * Format object for logging, removing sensitive data\n * @param {Object} obj - Object to format\n * @param {Array} sensitiveKeys - Keys to redact\n * @returns {Object} Sanitized object copy\n */\nexport const sanitizeForLogging = (obj, sensitiveKeys = ['password', 'token', 'auth']) => {\n  if (!obj || typeof obj !== 'object') return obj;\n  \n  const result = { ...obj };\n  \n  sensitiveKeys.forEach(key => {\n    if (key in result) {\n      result[key] = '[REDACTED]';\n    }\n  });\n  \n  return result;\n};\n\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/responsive.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/app/src/utils/themeValidation.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":187,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":194,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Validation Utility\n * Helps ensure consistent usage of theme values across components\n */\n\nimport { themeConfig } from '../theme/themeConfig';\n\n/**\n * Extract hardcoded color patterns from component code\n */\nexport const HARDCODED_COLOR_PATTERNS = [\n  /#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/g, // Hex colors\n  /rgb\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*\\)/g, // RGB colors\n  /rgba\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*[\\d.]+\\s*\\)/g, // RGBA colors\n  /hsl\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)/g, // HSL colors\n  /hsla\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*[\\d.]+\\s*\\)/g // HSLA colors\n];\n\n/**\n * Allowed color values that should use theme instead\n */\nexport const THEME_COLOR_MAP = {\n  // Primary colors\n  '#009639': 'theme.palette.primary.main',\n  '#4CAF50': 'theme.palette.primary.light',\n  '#006D2C': 'theme.palette.primary.dark',\n  \n  // Secondary colors\n  '#FFD700': 'theme.palette.secondary.main',\n  '#FFEB3B': 'theme.palette.secondary.light',\n  '#FFA000': 'theme.palette.secondary.dark',\n  \n  // Common colors that should be themed\n  '#000000': 'theme.palette.text.primary',\n  '#ffffff': 'theme.palette.background.paper',\n  '#f5f5f5': 'theme.palette.background.elevated',\n  '#fafafa': 'theme.palette.background.default'\n};\n\n/**\n * Validate if a component follows theme consistency rules\n */\nexport const validateThemeUsage = (componentCode, componentName) => {\n  const issues = [];\n  \n  // Check for hardcoded colors\n  HARDCODED_COLOR_PATTERNS.forEach(pattern => {\n    const matches = componentCode.match(pattern);\n    if (matches) {\n      matches.forEach(match => {\n        const suggestion = THEME_COLOR_MAP[match];\n        issues.push({\n          type: 'hardcoded-color',\n          value: match,\n          suggestion: suggestion || 'Use theme.palette values',\n          severity: 'error',\n          component: componentName\n        });\n      });\n    }\n  });\n  \n  // Check for hardcoded spacing values\n  const spacingPattern = /(?:margin|padding|gap):\\s*['\"]\\d+px['\"]/g;\n  const spacingMatches = componentCode.match(spacingPattern);\n  if (spacingMatches) {\n    spacingMatches.forEach(match => {\n      issues.push({\n        type: 'hardcoded-spacing',\n        value: match,\n        suggestion: 'Use theme.spacing() function',\n        severity: 'warning',\n        component: componentName\n      });\n    });\n  }\n  \n  // Check for hardcoded typography\n  const fontSizePattern = /fontSize:\\s*['\"]\\d+(?:px|rem|em)['\"]/g;\n  const fontMatches = componentCode.match(fontSizePattern);\n  if (fontMatches) {\n    fontMatches.forEach(match => {\n      issues.push({\n        type: 'hardcoded-typography',\n        value: match,\n        suggestion: 'Use theme.typography variants',\n        severity: 'warning',\n        component: componentName\n      });\n    });\n  }\n  \n  return issues;\n};\n\n/**\n * Generate theme-compliant replacements\n */\nexport const generateThemeReplacements = (hardcodedValue) => {\n  // Color replacements\n  if (THEME_COLOR_MAP[hardcodedValue]) {\n    return THEME_COLOR_MAP[hardcodedValue];\n  }\n  \n  // Spacing replacements (convert px to theme.spacing)\n  const pxMatch = hardcodedValue.match(/(\\d+)px/);\n  if (pxMatch) {\n    const pixels = parseInt(pxMatch[1]);\n    const spacingUnits = Math.round(pixels / 8); // Assuming 8px base spacing\n    return `theme.spacing(${spacingUnits})`;\n  }\n  \n  return null;\n};\n\n/**\n * Check if component properly imports theme\n */\nexport const validateThemeImports = (componentCode) => {\n  const hasUseTheme = componentCode.includes('useTheme');\n  const hasThemeImport = componentCode.includes(\"from '@mui/material/styles'\") || \n                        componentCode.includes(\"from '../theme/\") ||\n                        componentCode.includes(\"from '../../theme/\");\n  \n  return {\n    hasUseTheme,\n    hasThemeImport,\n    isValid: hasUseTheme && hasThemeImport\n  };\n};\n\n/**\n * Validate breakpoint usage\n */\nexport const validateBreakpointUsage = (componentCode) => {\n  const issues = [];\n  \n  // Check for hardcoded breakpoint values\n  const hardcodedBreakpoints = [\n    /768px/g,\n    /960px/g,\n    /1024px/g,\n    /1200px/g,\n    /600px/g\n  ];\n  \n  hardcodedBreakpoints.forEach(pattern => {\n    const matches = componentCode.match(pattern);\n    if (matches) {\n      matches.forEach(match => {\n        issues.push({\n          type: 'hardcoded-breakpoint',\n          value: match,\n          suggestion: 'Use theme.breakpoints.down() or theme.breakpoints.up()',\n          severity: 'warning'\n        });\n      });\n    }\n  });\n  \n  return issues;\n};\n\n/**\n * Get theme-compliant touch target recommendations\n */\nexport const getTouchTargetRecommendations = () => {\n  return {\n    minimumSize: '44px', // WCAG AA minimum\n    recommendedSize: '48px', // Better UX\n    buttonMinHeight: 'theme.spacing(6)', // 48px with default spacing\n    iconButtonMinSize: 'theme.spacing(5.5)' // 44px with default spacing\n  };\n};\n\n/**\n * Export theme constants for easy access\n */\nexport const THEME_CONSTANTS = {\n  JAMAICAN_COLORS: themeConfig.jamaicanColors,\n  SPACING_UNIT: 8, // Base spacing unit in pixels\n  BORDER_RADIUS: 8, // Base border radius\n  TOUCH_TARGET_MIN: 44, // Minimum touch target size\n  TOUCH_TARGET_RECOMMENDED: 48 // Recommended touch target size\n};\n\nexport default {\n  validateThemeUsage,\n  validateThemeImports,\n  validateBreakpointUsage,\n  generateThemeReplacements,\n  getTouchTargetRecommendations,\n  THEME_CONSTANTS\n};\n","usedDeprecatedRules":[{"ruleId":"jsx-quotes","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]
