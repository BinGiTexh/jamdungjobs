const fs = require('fs');
const path = require('path');

// In Docker, we'll use sample files that we'll create
const samplePhotoPath = path.resolve(__dirname, 'sample_photo.jpg');
const sampleResumePath = path.resolve(__dirname, 'sample_resume.pdf');

// Create a sample photo if it doesn't exist (a simple colored square)
if (!fs.existsSync(samplePhotoPath)) {
  console.log('Creating a sample photo...');
  // This is a minimal valid JPG file (a small colored square)
  const minimalJpg = Buffer.from([
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
    0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
    0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12,
    0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20, 0x24, 0x2e, 0x27, 0x20,
    0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29, 0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27,
    0x39, 0x3d, 0x38, 0x32, 0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xc0, 0x00, 0x0b, 0x08, 0x00, 0x10,
    0x00, 0x10, 0x01, 0x01, 0x11, 0x00, 0xff, 0xc4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0xc4, 0x00, 0x14,
    0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3f, 0x00, 0xaa, 0x00, 0x0a, 0xff,
    0xd9
  ]);
  fs.writeFileSync(samplePhotoPath, minimalJpg);
}

// Create a sample PDF if it doesn't exist
if (!fs.existsSync(sampleResumePath)) {
  console.log('Creating a sample resume PDF...');
  // This is a minimal valid PDF file
  const minimalPdf = Buffer.from([
    0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a,
    0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x28, 0x53, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x29, 0x2f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
    0x20, 0x28, 0x4d, 0x61, 0x6c, 0x69, 0x6b, 0x20, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x6e, 0x29,
    0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x28, 0x4a, 0x61, 0x6d, 0x44, 0x75, 0x6e,
    0x67, 0x20, 0x4a, 0x6f, 0x62, 0x73, 0x29, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
    0x20, 0x28, 0x4a, 0x61, 0x6d, 0x44, 0x75, 0x6e, 0x67, 0x20, 0x4a, 0x6f, 0x62, 0x73, 0x29, 0x2f,
    0x4d, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x28, 0x44, 0x3a, 0x32, 0x30, 0x32, 0x35, 0x30,
    0x35, 0x31, 0x39, 0x31, 0x38, 0x30, 0x30, 0x30, 0x30, 0x2b, 0x30, 0x30, 0x27, 0x30, 0x30, 0x27,
    0x29, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x28,
    0x44, 0x3a, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x31, 0x39, 0x31, 0x38, 0x30, 0x30, 0x30, 0x30,
    0x2b, 0x30, 0x30, 0x27, 0x30, 0x30, 0x27, 0x29, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62,
    0x6a, 0x0a, 0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70,
    0x65, 0x20, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73,
    0x20, 0x33, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
    0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x20,
    0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x4b, 0x69, 0x64, 0x73, 0x5b, 0x34, 0x20, 0x30, 0x20,
    0x52, 0x5d, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x31, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64,
    0x6f, 0x62, 0x6a, 0x0a, 0x34, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54,
    0x79, 0x70, 0x65, 0x20, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
    0x20, 0x33, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6f, 0x78, 0x5b,
    0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5d, 0x2f, 0x52, 0x65, 0x73,
    0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3c, 0x3c, 0x3e, 0x3e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65,
    0x6e, 0x74, 0x73, 0x20, 0x35, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f,
    0x62, 0x6a, 0x0a, 0x35, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x4c, 0x65,
    0x6e, 0x67, 0x74, 0x68, 0x20, 0x34, 0x34, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
    0x0a, 0x42, 0x54, 0x0a, 0x2f, 0x46, 0x31, 0x20, 0x31, 0x32, 0x20, 0x54, 0x66, 0x0a, 0x31, 0x30,
    0x30, 0x20, 0x37, 0x30, 0x30, 0x20, 0x54, 0x64, 0x0a, 0x28, 0x4d, 0x61, 0x6c, 0x69, 0x6b, 0x20,
    0x43, 0x61, 0x6d, 0x65, 0x72, 0x6f, 0x6e, 0x20, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x52,
    0x65, 0x73, 0x75, 0x6d, 0x65, 0x29, 0x20, 0x54, 0x6a, 0x0a, 0x45, 0x54, 0x0a, 0x65, 0x6e, 0x64,
    0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72,
    0x65, 0x66, 0x0a, 0x30, 0x20, 0x36, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x39, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x39, 0x34, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x20, 0x6e, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x39, 0x32, 0x20, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x33, 0x38,
    0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
    0x0a, 0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x36, 0x2f, 0x52, 0x6f, 0x6f, 0x74, 0x20,
    0x32, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x49, 0x44, 0x5b, 0x3c, 0x33, 0x37, 0x35, 0x33, 0x64, 0x32,
    0x61, 0x31, 0x35, 0x66, 0x63, 0x65, 0x31, 0x64, 0x34, 0x38, 0x38, 0x34, 0x32, 0x36, 0x31, 0x35,
    0x32, 0x34, 0x33, 0x66, 0x36, 0x33, 0x36, 0x33, 0x32, 0x3e, 0x3c, 0x33, 0x37, 0x35, 0x33, 0x64,
    0x32, 0x61, 0x31, 0x35, 0x66, 0x63, 0x65, 0x31, 0x64, 0x34, 0x38, 0x38, 0x34, 0x32, 0x36, 0x31,
    0x35, 0x32, 0x34, 0x33, 0x66, 0x36, 0x33, 0x36, 0x33, 0x32, 0x3e, 0x5d, 0x3e, 0x3e, 0x0a, 0x73,
    0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x37, 0x39, 0x35, 0x0a, 0x25, 0x25, 0x45,
    0x4f, 0x46, 0x0a
  ]);
  fs.writeFileSync(sampleResumePath, minimalPdf);
}

// Read and convert photo to base64
try {
  const photoBuffer = fs.readFileSync(samplePhotoPath);
  const photoBase64 = `data:image/jpeg;base64,${photoBuffer.toString('base64')}`;
  
  // Save to a file for easy copying
  fs.writeFileSync(
    path.resolve(__dirname, 'photo_base64.txt'), 
    photoBase64
  );
  console.log('Photo converted to base64 and saved to scripts/photo_base64.txt');
} catch (error) {
  console.error('Error processing photo:', error.message);
}

// Read and convert resume to base64
try {
  const resumeBuffer = fs.readFileSync(sampleResumePath);
  const resumeBase64 = `data:application/pdf;base64,${resumeBuffer.toString('base64')}`;
  
  // Save to a file for easy copying
  fs.writeFileSync(
    path.resolve(__dirname, 'resume_base64.txt'), 
    resumeBase64
  );
  console.log('Resume converted to base64 and saved to scripts/resume_base64.txt');
  console.log('Resume filename:', path.basename(sampleResumePath));
} catch (error) {
  console.error('Error processing resume:', error.message);
}
