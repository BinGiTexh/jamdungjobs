// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  passwordHash      String            @map("password_hash")
  firstName         String            @map("first_name")
  lastName          String            @map("last_name")
  role              Role              @default(JOBSEEKER)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  
  // Profile information
  title             String?
  bio               String?
  location          String?
  phoneNumber       String?           @map("phone_number")
  
  // Relations
  company           Company?          @relation("CompanyEmployees", fields: [companyId], references: [id])
  companyId         String?           @map("company_id")
  applications      JobApplication[]
  savedJobs         SavedJob[]
  candidateProfile  CandidateProfile?
  receivedNotifications Notification[] @relation("UserNotifications")
  
  // New relations for notification system
  sentMessages                Message[]
  threadParticipations        MessageThreadParticipant[]
  profileViewsInitiated       ProfileView[]          @relation("ViewerRelation")
  profileViewsReceived        ProfileView[]          @relation("ViewedUserRelation")
  jobRecommendations          JobRecommendation[]
  scheduledReminders          ScheduledReminder[]
  
  @@map("users")
}

model CandidateProfile {
  id              String    @id @default(uuid())
  userId          String    @unique @map("user_id")
  title           String?
  bio             String?
  location        String?
  skills          Json?     // Array of skills
  education       Json?     // Array of education objects
  experience      Json?     // Array of work experience objects
  photoUrl        String?   @map("photo_url") // Base64 encoded photo
  resumeUrl       String?   @map("resume_url") // Base64 encoded resume
  resumeFileName  String?   @map("resume_file_name")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  
  @@map("candidate_profiles")
}

model Company {
  id          String    @id @default(uuid())
  name        String
  description String?
  industry    String?
  location    String?
  website     String?
  logoUrl     String?   // URL to logo image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  employees   User[]    @relation("CompanyEmployees")
  jobs        Job[]
  
  @@map("companies")
}

model Job {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String
  type        JobType
  status      JobStatus @default(ACTIVE)
  salary      Json?     // For salary range: { min: number, max: number, currency: string }
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String    @map("company_id")
  applications JobApplication[]
  savedBy     SavedJob[]
  
  // Skills and requirements
  skills      String[]
  experience  String?
  education   String?
  
  // New relations for notification system
  recommendations JobRecommendation[]
  
  @@map("jobs")
}

model JobApplication {
  id            String    @id @default(uuid())
  status        ApplicationStatus @default(PENDING)
  resumeUrl     String?
  coverLetter   String?
  phoneNumber   String?
  availability  String?
  salary        String?
  additionalInfo String?
  appliedVia    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  job         Job       @relation(fields: [jobId], references: [id])
  jobId       String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  notifications Notification[]
  
  @@map("job_applications")
}

model SavedJob {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  
  // Relations
  job       Job       @relation(fields: [jobId], references: [id])
  jobId     String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  
  @@unique([jobId, userId])
  @@index([userId])
  @@index([jobId])
  @@map("saved_jobs")
}

// Updated notification system models

enum Role {
  ADMIN
  EMPLOYER
  JOBSEEKER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  ACCEPTED
}

// Updated NotificationType enum with all the required types
enum NotificationType {
  APPLICATION_UPDATE    // For application status changes
  MESSAGE               // For messages from employers/recruiters
  JOB_RECOMMENDATION    // For job recommendations
  SAVED_JOB_UPDATE      // For saved job updates (expiration/removal)
  PROFILE_VIEW          // For when employers view profiles
  REMINDER              // For reminders (interviews, profile completion)
  SYSTEM                // For system notifications
}

enum NotificationStatus {
  READ
  UNREAD
}

// Updated Notification model with new fields
model Notification {
  id                String            @id @default(uuid())
  type              NotificationType
  status            NotificationStatus @default(UNREAD)
  title             String            @default("Notification")
  message           String
  relatedEntityIds  Json?             @map("related_entity_ids")
  metadata          Json?
  dismissed         Boolean           @default(false)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  
  // Relations
  recipient         User              @relation("UserNotifications", fields: [recipientId], references: [id])
  recipientId       String            @map("recipient_id")
  jobApplication    JobApplication?   @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId  String?           @map("job_application_id")
  
  @@map("notifications")
}

// Message thread models for employer/job seeker messaging
model MessageThread {
  id            String                     @id @default(uuid())
  title         String?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  
  // Relations
  participants  MessageThreadParticipant[]
  messages      Message[]
  
  @@map("message_threads")
}

model MessageThreadParticipant {
  // Note: Using UUID for thread_id to match message_threads table
  threadId      String
  userId        String
  
  // Relations
  thread        MessageThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([threadId, userId])
  @@map("message_thread_participants")
}

model Message {
  id            String         @id @default(uuid())
  threadId      String         @map("thread_id")
  senderId      String         @map("sender_id")
  content       String
  createdAt     DateTime       @default(now()) @map("created_at")
  readAt        DateTime?      @map("read_at")
  
  // Relations
  thread        MessageThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender        User           @relation(fields: [senderId], references: [id])
  
  @@map("messages")
}

// Profile view tracking
model ProfileView {
  id            String      @id @default(uuid())
  viewerId      String      @map("viewer_id")
  viewedUserId  String      @map("viewed_user_id")
  viewedAt      DateTime    @default(now()) @map("viewed_at")
  
  // Relations
  viewer        User        @relation("ViewerRelation", fields: [viewerId], references: [id])
  viewedUser    User        @relation("ViewedUserRelation", fields: [viewedUserId], references: [id])
  
  @@map("profile_views")
}

// Job recommendations
model JobRecommendation {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  jobId         String      @map("job_id")
  score         Float
  reason        String?
  viewed        Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  job           Job         @relation(fields: [jobId], references: [id])
  
  @@map("job_recommendations")
}

// Scheduled reminders for interviews and profile completion
model ScheduledReminder {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  type          String
  scheduledFor  DateTime    @map("scheduled_for")
  content       Json
  processed     Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  
  @@map("scheduled_reminders")
}
