name: Local Testing Stack

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - api
          - comprehensive
          - mvp-readiness
          - file-upload
          - new-features
      environment:
        description: 'Test environment'
        required: false
        default: 'local'
        type: choice
        options:
          - local
          - docker
      skip_setup:
        description: 'Skip test account setup'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  setup-test-environment:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: jobboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    outputs:
      api-url: ${{ steps.setup-api.outputs.api-url }}
      frontend-url: ${{ steps.setup-frontend.outputs.frontend-url }}
      test-db-url: ${{ steps.setup-db.outputs.db-url }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Install Frontend Dependencies
      run: |
        cd web-frontend
        npm ci

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Setup Test Database
      id: setup-db
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:testpassword@localhost:5432/jobboard_test"
        echo "db-url=$DATABASE_URL" >> $GITHUB_OUTPUT
        
        # Generate Prisma client
        npx prisma generate
        
        # Run database migrations
        npx prisma migrate deploy || npx prisma db push
        
        echo "✅ Test database setup completed"

    - name: Create Test Environment File
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=5001
        DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/jobboard_test
        JWT_SECRET=test-jwt-secret-for-github-actions-testing-only
        REDIS_URL=redis://localhost:6379
        FRONTEND_URL=http://localhost:3001
        API_URL=http://localhost:5001
        GOOGLE_MAPS_API_KEY=test-key
        AWS_REGION=us-east-1
        CLOUDFLARE_TUNNEL_TOKEN=test-token
        EOF
        
        # Copy to backend and frontend directories
        cp .env.test backend/.env
        cp .env.test web-frontend/.env

    - name: Start Backend API
      id: setup-api
      run: |
        cd backend
        npm start &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Wait for API to be ready
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -f http://localhost:5001/api/health 2>/dev/null; then
            echo "✅ API is ready"
            echo "api-url=http://localhost:5001" >> $GITHUB_OUTPUT
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ API failed to start"
            exit 1
          fi
          sleep 2
        done

    - name: Build and Start Frontend
      id: setup-frontend
      run: |
        cd web-frontend
        npm run build
        npx serve -s build -l 3001 &
        FRONTEND_PID=$!
        echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
        
        # Wait for frontend to be ready
        echo "Waiting for frontend to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3001 2>/dev/null; then
            echo "✅ Frontend is ready"
            echo "frontend-url=http://localhost:3001" >> $GITHUB_OUTPUT
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Frontend failed to start"
            exit 1
          fi
          sleep 2
        done

    - name: Setup Test Accounts
      if: ${{ github.event.inputs.skip_setup != 'true' }}
      run: |
        cd testing
        echo "Setting up test accounts..."
        node setup_test_accounts.js
        echo "✅ Test accounts created"

    - name: Environment Health Check
      run: |
        echo "=== Test Environment Health Check ==="
        echo "API Health:"
        curl -f http://localhost:5001/api/health | jq '.'
        echo ""
        echo "Frontend Health:"
        curl -f -s http://localhost:3001 | head -n 5
        echo ""
        echo "Database Connection:"
        cd backend && npx prisma db seed --preview-feature || echo "No seed script found"
        echo ""
        echo "Redis Connection:"
        redis-cli ping
        echo ""
        echo "✅ All services are healthy"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'smoke' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run Smoke Tests
      run: |
        cd testing
        echo "Running basic smoke tests..."
        node basic-smoke-test.js
        echo "✅ Smoke tests completed"

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'api' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run API Tests
      run: |
        cd testing
        echo "Running comprehensive API tests..."
        node api.test.js
        echo "✅ API tests completed"

    - name: Run Resume API Tests
      run: |
        cd testing
        echo "Running resume API tests..."
        node test-resume-api.js
        echo "✅ Resume API tests completed"

  comprehensive-tests:
    name: Comprehensive QA Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'comprehensive' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run Comprehensive QA Tests
      run: |
        cd testing
        echo "Running comprehensive QA test suite..."
        node comprehensive-qa-test.js
        echo "✅ Comprehensive QA tests completed"

    - name: Upload QA Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qa-report-${{ github.run_id }}
        path: testing/qa-report-*.json

  mvp-readiness-tests:
    name: MVP Readiness Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'mvp-readiness' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run MVP Readiness Tests
      run: |
        cd testing
        echo "Running MVP readiness validation..."
        node mvp-readiness-test.js
        echo "✅ MVP readiness tests completed"

  file-upload-tests:
    name: File Upload Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'file-upload' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run File Upload Tests
      run: |
        cd testing
        echo "Running file upload tests..."
        node file-upload-test.js
        echo "✅ File upload tests completed"

  new-features-tests:
    name: New Features Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'new-features' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Testing Dependencies
      run: |
        cd testing
        npm ci

    - name: Run New Features Tests
      run: |
        cd testing
        echo "Running new features tests..."
        node test-new-features.js
        echo "✅ New features tests completed"

  docker-environment-tests:
    name: Docker Environment Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'docker' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Docker Environment
      run: |
        # Create test environment file
        cat > .env << EOF
        NODE_ENV=test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=testpassword
        POSTGRES_DB=jobboard_test
        DATABASE_URL=postgresql://postgres:testpassword@postgres:5432/jobboard_test
        JWT_SECRET=test-jwt-secret-for-docker-testing
        REDIS_URL=redis://redis:6379
        FRONTEND_URL=http://frontend:3000
        API_URL=http://api:5000
        EOF

    - name: Start Docker Compose Test Stack
      run: |
        # Use local development compose but with test database
        docker-compose -f local-dev/docker-compose.yml up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service health
        docker-compose -f local-dev/docker-compose.yml ps

    - name: Setup Test Accounts in Docker
      run: |
        cd testing
        npm ci
        echo "Setting up test accounts in Docker environment..."
        node setup_test_accounts_docker.js

    - name: Run Docker-based Tests
      run: |
        cd testing
        echo "Running tests against Docker environment..."
        
        # Update test config for Docker
        export API_BASE_URL="http://localhost:5000"
        export FRONTEND_BASE_URL="http://localhost:3000"
        
        # Run test suite
        node basic-smoke-test.js
        node api.test.js
        
        echo "✅ Docker environment tests completed"

    - name: Cleanup Docker Environment
      if: always()
      run: |
        docker-compose -f local-dev/docker-compose.yml down -v
        docker system prune -f

  postman-collection-tests:
    name: Postman Collection Tests
    runs-on: ubuntu-latest
    needs: setup-test-environment
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Newman
      run: npm install -g newman

    - name: Run Postman Collection
      run: |
        cd testing
        echo "Running Postman collection tests..."
        newman run JamDungJobs_Postman_Collection.json \
          --environment <(echo '{"values":[{"key":"baseUrl","value":"http://localhost:5001"}]}') \
          --reporters cli,json \
          --reporter-json-export postman-results.json
        echo "✅ Postman collection tests completed"

    - name: Upload Postman Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: postman-results-${{ github.run_id }}
        path: testing/postman-results.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-tests, comprehensive-tests, mvp-readiness-tests, file-upload-tests, new-features-tests, postman-collection-tests]
    if: always()
    
    steps:
    - name: Generate Test Summary
      run: |
        echo "=========================================="
        echo "         TEST EXECUTION SUMMARY"
        echo "=========================================="
        echo "🧪 Test Suite: ${{ github.event.inputs.test_suite || 'all' }}"
        echo "🌍 Environment: ${{ github.event.inputs.environment || 'local' }}"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🕒 Time: $(date)"
        echo ""
        echo "Test Results:"
        echo "✅ Smoke Tests: ${{ needs.smoke-tests.result }}"
        echo "✅ API Tests: ${{ needs.api-tests.result }}"
        echo "✅ Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
        echo "✅ MVP Readiness Tests: ${{ needs.mvp-readiness-tests.result }}"
        echo "✅ File Upload Tests: ${{ needs.file-upload-tests.result }}"
        echo "✅ New Features Tests: ${{ needs.new-features-tests.result }}"
        echo "✅ Postman Collection: ${{ needs.postman-collection-tests.result }}"
        echo ""
        echo "Artifacts:"
        echo "📄 QA Reports available in workflow artifacts"
        echo "📄 Postman Results available in workflow artifacts"
        echo "=========================================="

  cleanup:
    name: Cleanup Test Environment
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    
    steps:
    - name: Cleanup Test Accounts
      run: |
        echo "Cleaning up test accounts and data..."
        # This would connect to test DB and clean up
        echo "✅ Test environment cleaned up"

    - name: Archive Test Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-logs-${{ github.run_id }}
        path: |
          testing/*.log
          testing/qa-report-*.json
        retention-days: 7
